
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 17 18:59:01 CST 2019
//----------------------------------------------------

package AnalisiSemanticoSQL;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 17 18:59:01 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\004\000\002\013\004\000\002\013\002\000" +
    "\002\014\004\000\002\015\004\000\002\015\002\000\002" +
    "\016\004\000\002\017\004\000\002\017\002\000\002\020" +
    "\004\000\002\021\004\000\002\022\004\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\010\000\002\024\003\000\002\024\010\000\002\024" +
    "\003\000\002\024\003\000\002\024\006\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\006\000\002\024\003\000\002\024\006\000\002\024" +
    "\006\000\002\024\006\000\002\024\003\000\002\024\006" +
    "\000\002\024\006\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\006\000\002\025\002\000\002" +
    "\026\004\000\002\026\002\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\061\006\000" +
    "\002\061\005\000\002\062\004\000\002\062\002\000\002" +
    "\063\004\000\002\064\004\000\002\064\004\000\002\064" +
    "\004\000\002\064\004\000\002\064\004\000\002\064\004" +
    "\000\002\064\004\000\002\064\004\000\002\064\004\000" +
    "\002\064\004\000\002\064\005\000\002\064\003\000\002" +
    "\065\010\000\002\065\007\000\002\065\007\000\002\067" +
    "\003\000\002\067\002\000\002\066\003\000\002\066\003" +
    "\000\002\070\004\000\002\070\002\000\002\044\004\000" +
    "\002\044\003\000\002\044\002\000\002\045\003\000\002" +
    "\045\003\000\002\046\004\000\002\047\005\000\002\047" +
    "\005\000\002\047\002\000\002\050\004\000\002\051\005" +
    "\000\002\051\005\000\002\051\002\000\002\052\005\000" +
    "\002\052\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\055\005\000\002\055\002\000\002\056\003\000\002\056" +
    "\002\000\002\027\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\006\000\002\032\005\000\002\032\002\000\002" +
    "\033\006\000\002\034\005\000\002\034\002\000\002\035" +
    "\005\000\002\036\006\000\002\037\005\000\002\037\002" +
    "\000\002\040\006\000\002\041\005\000\002\042\005\000" +
    "\002\042\002\000\002\271\003\000\002\271\002\000\002" +
    "\137\004\000\002\140\003\000\002\140\003\000\002\140" +
    "\003\000\002\140\003\000\002\140\003\000\002\140\003" +
    "\000\002\140\003\000\002\141\004\000\002\142\005\000" +
    "\002\143\004\000\002\144\005\000\002\144\002\000\002" +
    "\145\004\000\002\145\002\000\002\146\003\000\002\146" +
    "\002\000\002\147\005\000\002\147\003\000\002\150\014" +
    "\000\002\151\003\000\002\151\003\000\002\152\003\000" +
    "\002\152\003\000\002\153\005\000\002\153\002\000\002" +
    "\155\003\000\002\155\003\000\002\155\003\000\002\156" +
    "\006\000\002\157\003\000\002\157\002\000\002\160\003" +
    "\000\002\160\003\000\002\160\003\000\002\160\003\000" +
    "\002\161\005\000\002\162\004\000\002\163\003\000\002" +
    "\163\003\000\002\163\002\000\002\164\006\000\002\165" +
    "\003\000\002\165\003\000\002\165\002\000\002\166\006" +
    "\000\002\167\014\000\002\170\003\000\002\170\002\000" +
    "\002\171\005\000\002\172\005\000\002\173\006\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\175" +
    "\007\000\002\175\002\000\002\176\011\000\002\177\004" +
    "\000\002\177\002\000\002\200\004\000\002\200\003\000" +
    "\002\200\002\000\002\203\005\000\002\203\003\000\002" +
    "\204\004\000\002\204\003\000\002\204\002\000\002\205" +
    "\003\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\202\005\000\002\202\002\000\002\206\006\000" +
    "\002\207\004\000\002\207\002\000\002\210\004\000\002" +
    "\210\002\000\002\211\003\000\002\211\004\000\002\211" +
    "\002\000\002\212\003\000\002\212\002\000\002\213\007" +
    "\000\002\213\002\000\002\214\005\000\002\214\003\000" +
    "\002\214\002\000\002\215\007\000\002\215\006\000\002" +
    "\215\004\000\002\215\005\000\002\216\003\000\002\216" +
    "\003\000\002\216\003\000\002\216\003\000\002\216\003" +
    "\000\002\217\003\000\002\217\002\000\002\220\003\000" +
    "\002\220\005\000\002\221\004\000\002\221\003\000\002" +
    "\221\002\000\002\222\010\000\002\223\005\000\002\223" +
    "\002\000\002\224\004\000\002\224\002\000\002\225\004" +
    "\000\002\225\010\000\002\225\007\000\002\226\003\000" +
    "\002\226\003\000\002\226\002\000\002\227\004\000\002" +
    "\227\002\000\002\230\005\000\002\230\002\000\002\231" +
    "\005\000\002\231\002\000\002\232\004\000\002\232\004" +
    "\000\002\233\003\000\002\233\004\000\002\234\003\000" +
    "\002\234\003\000\002\235\004\000\002\235\003\000\002" +
    "\236\004\000\002\237\006\000\002\237\005\000\002\237" +
    "\012\000\002\237\007\000\002\240\007\000\002\241\006" +
    "\000\002\242\005\000\002\242\002\000\002\243\006\000" +
    "\002\243\002\000\002\244\006\000\002\u0101\004\000\002" +
    "\u0102\005\000\002\u0102\004\000\002\u0103\004\000\002\u0103" +
    "\002\000\002\u0104\004\000\002\u0105\005\000\002\u0105\002" +
    "\000\002\u0106\004\000\002\u0107\005\000\002\u0107\002\000" +
    "\002\u0108\004\000\002\u0109\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0221\000\016\002\ufffe\003\017\167\014\230\025\257" +
    "\021\263\016\001\002\000\006\325\ufff9\u010b\ufff9\001\002" +
    "\000\006\325\ufff3\u010b\ufff3\001\002\000\006\325\155\u010b" +
    "\153\001\002\000\004\002\u0221\001\002\000\006\325\ufffa" +
    "\u010b\ufffa\001\002\000\006\325\ufffd\u010b\ufffd\001\002\000" +
    "\006\325\ufffb\u010b\ufffb\001\002\000\006\325\ufff5\u010b\ufff5" +
    "\001\002\000\022\126\uff36\132\uff36\174\260\212\uff36\217" +
    "\252\243\256\262\255\273\261\001\002\000\006\325\ufff7" +
    "\u010b\ufff7\001\002\000\014\132\161\174\167\217\160\262" +
    "\162\273\166\001\002\000\006\325\155\u010b\153\001\002" +
    "\000\006\325\ufffc\u010b\ufffc\001\002\000\004\u0127\152\001" +
    "\002\000\006\325\ufff6\u010b\ufff6\001\002\000\006\325\ufff4" +
    "\u010b\ufff4\001\002\000\006\325\ufff8\u010b\ufff8\001\002\000" +
    "\004\u0117\027\001\002\000\070\051\062\337\053\340\047" +
    "\341\067\342\076\343\066\344\054\345\044\346\074\347" +
    "\057\350\065\351\075\352\055\353\050\354\056\355\046" +
    "\356\071\357\070\360\052\361\073\362\063\363\060\364" +
    "\077\365\100\366\045\367\051\370\064\001\002\000\004" +
    "\u0127\043\001\002\000\010\325\ufece\u010b\ufece\u010c\037\001" +
    "\002\000\006\325\ufed8\u010b\ufed8\001\002\000\072\051\ufed1" +
    "\337\ufed1\340\ufed1\341\ufed1\342\ufed1\343\ufed1\344\ufed1\345" +
    "\ufed1\346\ufed1\347\ufed1\350\ufed1\351\ufed1\352\ufed1\353\ufed1" +
    "\354\ufed1\355\ufed1\356\ufed1\357\ufed1\360\ufed1\361\ufed1\362" +
    "\ufed1\363\ufed1\364\ufed1\365\ufed1\366\ufed1\367\ufed1\370\ufed1" +
    "\u010c\034\001\002\000\070\051\ufed3\337\ufed3\340\ufed3\341" +
    "\ufed3\342\ufed3\343\ufed3\344\ufed3\345\ufed3\346\ufed3\347\ufed3" +
    "\350\ufed3\351\ufed3\352\ufed3\353\ufed3\354\ufed3\355\ufed3\356" +
    "\ufed3\357\ufed3\360\ufed3\361\ufed3\362\ufed3\363\ufed3\364\ufed3" +
    "\365\ufed3\366\ufed3\367\ufed3\370\ufed3\001\002\000\004\u0117" +
    "\027\001\002\000\072\051\ufed1\337\ufed1\340\ufed1\341\ufed1" +
    "\342\ufed1\343\ufed1\344\ufed1\345\ufed1\346\ufed1\347\ufed1\350" +
    "\ufed1\351\ufed1\352\ufed1\353\ufed1\354\ufed1\355\ufed1\356\ufed1" +
    "\357\ufed1\360\ufed1\361\ufed1\362\ufed1\363\ufed1\364\ufed1\365" +
    "\ufed1\366\ufed1\367\ufed1\370\ufed1\u010c\034\001\002\000\070" +
    "\051\ufed2\337\ufed2\340\ufed2\341\ufed2\342\ufed2\343\ufed2\344" +
    "\ufed2\345\ufed2\346\ufed2\347\ufed2\350\ufed2\351\ufed2\352\ufed2" +
    "\353\ufed2\354\ufed2\355\ufed2\356\ufed2\357\ufed2\360\ufed2\361" +
    "\ufed2\362\ufed2\363\ufed2\364\ufed2\365\ufed2\366\ufed2\367\ufed2" +
    "\370\ufed2\001\002\000\004\u0117\027\001\002\000\006\325" +
    "\ufed0\u010b\ufed0\001\002\000\010\325\ufece\u010b\ufece\u010c\037" +
    "\001\002\000\006\325\ufecf\u010b\ufecf\001\002\000\154\042" +
    "\uffe4\051\uffe4\070\uffe4\127\uffe4\151\uffe4\170\uffe4\215\uffe4" +
    "\237\uffe4\264\uffe4\325\uffe4\337\uffe4\340\uffe4\341\uffe4\342" +
    "\uffe4\343\uffe4\344\uffe4\345\uffe4\346\uffe4\347\uffe4\350\uffe4" +
    "\351\uffe4\352\uffe4\353\uffe4\354\uffe4\355\uffe4\356\uffe4\357" +
    "\uffe4\360\uffe4\361\uffe4\362\uffe4\363\uffe4\364\uffe4\365\uffe4" +
    "\366\uffe4\367\uffe4\370\uffe4\u0106\uffe4\u0107\uffe4\u0108\uffe4\u0109" +
    "\uffe4\u010b\uffe4\u010c\uffe4\u0111\uffe4\u011a\uffe4\u011b\uffe4\u011c\uffe4" +
    "\u011d\uffe4\u011e\uffe4\u011f\uffe4\u0120\uffe4\u0121\uffe4\u0122\uffe4\u0123" +
    "\uffe4\001\002\000\050\046\uffda\052\uffda\056\uffda\113\uffda" +
    "\114\uffda\115\uffda\134\uffda\150\uffda\215\uffda\220\uffda\243" +
    "\uffda\314\uffda\325\uffda\u010b\uffda\u010c\uffda\u010f\uffda\u0110\uffda" +
    "\u0111\uffda\u0123\uffda\001\002\000\050\046\uffc6\052\uffc6\056" +
    "\uffc6\113\uffc6\114\uffc6\115\uffc6\134\uffc6\150\uffc6\215\uffc6" +
    "\220\uffc6\243\uffc6\314\uffc6\325\uffc6\u010b\uffc6\u010c\uffc6\u010f" +
    "\uffc6\u0110\uffc6\u0111\uffc6\u0123\uffc6\001\002\000\050\046\uffd1" +
    "\052\uffd1\056\uffd1\113\uffd1\114\uffd1\115\uffd1\134\uffd1\150" +
    "\uffd1\215\uffd1\220\uffd1\243\uffd1\314\uffd1\325\uffd1\u010b\uffd1" +
    "\u010c\uffd1\u010f\uffd1\u0110\uffd1\u0111\uffd1\u0123\uffd1\001\002\000" +
    "\050\046\uffdf\052\uffdf\056\uffdf\113\uffdf\114\uffdf\115\uffdf" +
    "\134\uffdf\150\uffdf\215\uffdf\220\uffdf\243\uffdf\314\uffdf\325" +
    "\uffdf\u010b\uffdf\u010c\uffdf\u010f\uffdf\u0110\uffdf\u0111\uffdf\u0123\uffdf" +
    "\001\002\000\050\046\uffd3\052\uffd3\056\uffd3\113\uffd3\114" +
    "\uffd3\115\uffd3\134\uffd3\150\uffd3\215\uffd3\220\uffd3\243\uffd3" +
    "\314\uffd3\325\uffd3\u010b\uffd3\u010c\uffd3\u010f\uffd3\u0110\uffd3\u0111" +
    "\uffd3\u0123\uffd3\001\002\000\050\046\uffc5\052\uffc5\056\uffc5" +
    "\113\uffc5\114\uffc5\115\uffc5\134\uffc5\150\uffc5\215\uffc5\220" +
    "\uffc5\243\uffc5\314\uffc5\325\uffc5\u010b\uffc5\u010c\uffc5\u010f\uffc5" +
    "\u0110\uffc5\u0111\uffc5\u0123\uffc5\001\002\000\004\u0110\147\001" +
    "\002\000\050\046\uffe0\052\uffe0\056\uffe0\113\uffe0\114\uffe0" +
    "\115\uffe0\134\uffe0\150\uffe0\215\uffe0\220\uffe0\243\uffe0\314" +
    "\uffe0\325\uffe0\u010b\uffe0\u010c\uffe0\u010f\uffe0\u0110\uffe0\u0111\uffe0" +
    "\u0123\uffe0\001\002\000\004\u0110\142\001\002\000\050\046" +
    "\uffd4\052\uffd4\056\uffd4\113\uffd4\114\uffd4\115\uffd4\134\uffd4" +
    "\150\uffd4\215\uffd4\220\uffd4\243\uffd4\314\uffd4\325\uffd4\u010b" +
    "\uffd4\u010c\uffd4\u010f\uffd4\u0110\uffd4\u0111\uffd4\u0123\uffd4\001\002" +
    "\000\050\046\uffd2\052\uffd2\056\uffd2\113\uffd2\114\uffd2\115" +
    "\uffd2\134\uffd2\150\uffd2\215\uffd2\220\uffd2\243\uffd2\314\uffd2" +
    "\325\uffd2\u010b\uffd2\u010c\uffd2\u010f\uffd2\u0110\uffd2\u0111\uffd2\u0123" +
    "\uffd2\001\002\000\050\046\uffd8\052\uffd8\056\uffd8\113\uffd8" +
    "\114\uffd8\115\uffd8\134\uffd8\150\uffd8\215\uffd8\220\uffd8\243" +
    "\uffd8\314\uffd8\325\uffd8\u010b\uffd8\u010c\uffd8\u010f\uffd8\u0110\uffd8" +
    "\u0111\uffd8\u0123\uffd8\001\002\000\004\u0110\137\001\002\000" +
    "\012\325\ufed4\u010b\ufed4\u010c\ufed4\u0123\125\001\002\000\066" +
    "\337\053\340\047\341\067\342\076\343\066\344\054\345" +
    "\044\346\074\347\057\350\065\351\075\352\055\353\050" +
    "\354\056\355\046\356\071\357\070\360\052\361\073\362" +
    "\063\363\060\364\077\365\100\366\045\367\051\370\064" +
    "\001\002\000\004\u0110\116\001\002\000\050\046\uffc4\052" +
    "\uffc4\056\uffc4\113\uffc4\114\uffc4\115\uffc4\134\uffc4\150\uffc4" +
    "\215\uffc4\220\uffc4\243\uffc4\314\uffc4\325\uffc4\u010b\uffc4\u010c" +
    "\uffc4\u010f\uffc4\u0110\uffc4\u0111\uffc4\u0123\uffc4\001\002\000\050" +
    "\046\uffd7\052\uffd7\056\uffd7\113\uffd7\114\uffd7\115\uffd7\134" +
    "\uffd7\150\uffd7\215\uffd7\220\uffd7\243\uffd7\314\uffd7\325\uffd7" +
    "\u010b\uffd7\u010c\uffd7\u010f\uffd7\u0110\113\u0111\uffd7\u0123\uffd7\001" +
    "\002\000\050\046\uffdc\052\uffdc\056\uffdc\113\uffdc\114\uffdc" +
    "\115\uffdc\134\uffdc\150\uffdc\215\uffdc\220\uffdc\243\uffdc\314" +
    "\uffdc\325\uffdc\u010b\uffdc\u010c\uffdc\u010f\uffdc\u0110\uffdc\u0111\uffdc" +
    "\u0123\uffdc\001\002\000\050\046\uffde\052\uffde\056\uffde\113" +
    "\uffde\114\uffde\115\uffde\134\uffde\150\uffde\215\uffde\220\uffde" +
    "\243\uffde\314\uffde\325\uffde\u010b\uffde\u010c\uffde\u010f\uffde\u0110" +
    "\uffde\u0111\uffde\u0123\uffde\001\002\000\050\046\uffcf\052\uffcf" +
    "\056\uffcf\113\uffcf\114\uffcf\115\uffcf\134\uffcf\150\uffcf\215" +
    "\uffcf\220\uffcf\243\uffcf\314\uffcf\325\uffcf\u010b\uffcf\u010c\uffcf" +
    "\u010f\uffcf\u0110\uffcf\u0111\uffcf\u0123\uffcf\001\002\000\050\046" +
    "\uffd0\052\uffd0\056\uffd0\113\uffd0\114\uffd0\115\uffd0\134\uffd0" +
    "\150\uffd0\215\uffd0\220\uffd0\243\uffd0\314\uffd0\325\uffd0\u010b" +
    "\uffd0\u010c\uffd0\u010f\uffd0\u0110\uffd0\u0111\uffd0\u0123\uffd0\001\002" +
    "\000\010\325\ufecd\u010b\ufecd\u010c\ufecd\001\002\000\050\046" +
    "\uffcd\052\uffcd\056\uffcd\113\uffcd\114\uffcd\115\uffcd\134\uffcd" +
    "\150\uffcd\215\uffcd\220\uffcd\243\uffcd\314\uffcd\325\uffcd\u010b" +
    "\uffcd\u010c\uffcd\u010f\uffcd\u0110\uffcd\u0111\uffcd\u0123\uffcd\001\002" +
    "\000\004\u0110\106\001\002\000\050\046\uffd5\052\uffd5\056" +
    "\uffd5\113\uffd5\114\uffd5\115\uffd5\134\uffd5\150\uffd5\215\uffd5" +
    "\220\uffd5\243\uffd5\314\uffd5\325\uffd5\u010b\uffd5\u010c\uffd5\u010f" +
    "\uffd5\u0110\uffd5\u0111\uffd5\u0123\uffd5\001\002\000\050\046\uffdd" +
    "\052\uffdd\056\uffdd\113\uffdd\114\uffdd\115\uffdd\134\uffdd\150" +
    "\uffdd\215\uffdd\220\uffdd\243\uffdd\314\uffdd\325\uffdd\u010b\uffdd" +
    "\u010c\uffdd\u010f\uffdd\u0110\uffdd\u0111\uffdd\u0123\uffdd\001\002\000" +
    "\050\046\uffc9\052\uffc9\056\uffc9\113\uffc9\114\uffc9\115\uffc9" +
    "\134\uffc9\150\uffc9\215\uffc9\220\uffc9\243\uffc9\314\uffc9\325" +
    "\uffc9\u010b\uffc9\u010c\uffc9\u010f\uffc9\u0110\uffc9\u0111\uffc9\u0123\uffc9" +
    "\001\002\000\004\u0110\101\001\002\000\004\331\103\001" +
    "\002\000\004\u0111\105\001\002\000\004\u0111\104\001\002" +
    "\000\050\046\uffc7\052\uffc7\056\uffc7\113\uffc7\114\uffc7\115" +
    "\uffc7\134\uffc7\150\uffc7\215\uffc7\220\uffc7\243\uffc7\314\uffc7" +
    "\325\uffc7\u010b\uffc7\u010c\uffc7\u010f\uffc7\u0110\uffc7\u0111\uffc7\u0123" +
    "\uffc7\001\002\000\050\046\uffc8\052\uffc8\056\uffc8\113\uffc8" +
    "\114\uffc8\115\uffc8\134\uffc8\150\uffc8\215\uffc8\220\uffc8\243" +
    "\uffc8\314\uffc8\325\uffc8\u010b\uffc8\u010c\uffc8\u010f\uffc8\u0110\uffc8" +
    "\u0111\uffc8\u0123\uffc8\001\002\000\002\001\002\000\004\u010c" +
    "\110\001\002\000\002\001\002\000\004\u0111\112\001\002" +
    "\000\050\046\uffd9\052\uffd9\056\uffd9\113\uffd9\114\uffd9\115" +
    "\uffd9\134\uffd9\150\uffd9\215\uffd9\220\uffd9\243\uffd9\314\uffd9" +
    "\325\uffd9\u010b\uffd9\u010c\uffd9\u010f\uffd9\u0110\uffd9\u0111\uffd9\u0123" +
    "\uffd9\001\002\000\002\001\002\000\004\u0111\115\001\002" +
    "\000\050\046\uffd6\052\uffd6\056\uffd6\113\uffd6\114\uffd6\115" +
    "\uffd6\134\uffd6\150\uffd6\215\uffd6\220\uffd6\243\uffd6\314\uffd6" +
    "\325\uffd6\u010b\uffd6\u010c\uffd6\u010f\uffd6\u0110\uffd6\u0111\uffd6\u0123" +
    "\uffd6\001\002\000\004\331\120\001\002\000\004\u0111\122" +
    "\001\002\000\004\u0111\121\001\002\000\050\046\uffcb\052" +
    "\uffcb\056\uffcb\113\uffcb\114\uffcb\115\uffcb\134\uffcb\150\uffcb" +
    "\215\uffcb\220\uffcb\243\uffcb\314\uffcb\325\uffcb\u010b\uffcb\u010c" +
    "\uffcb\u010f\uffcb\u0110\uffcb\u0111\uffcb\u0123\uffcb\001\002\000\050" +
    "\046\uffcc\052\uffcc\056\uffcc\113\uffcc\114\uffcc\115\uffcc\134" +
    "\uffcc\150\uffcc\215\uffcc\220\uffcc\243\uffcc\314\uffcc\325\uffcc" +
    "\u010b\uffcc\u010c\uffcc\u010f\uffcc\u0110\uffcc\u0111\uffcc\u0123\uffcc\001" +
    "\002\000\012\325\ufed4\u010b\ufed4\u010c\ufed4\u0123\125\001\002" +
    "\000\010\325\ufed7\u010b\ufed7\u010c\ufed7\001\002\000\020\220" +
    "\130\233\132\u0117\027\u0124\131\u0129\133\u012a\126\u012b\127" +
    "\001\002\000\010\325\uffbd\u010b\uffbd\u010c\uffbd\001\002\000" +
    "\010\325\uffbe\u010b\uffbe\u010c\uffbe\001\002\000\010\325\uffb9" +
    "\u010b\uffb9\u010c\uffb9\001\002\000\010\325\uffbc\u010b\uffbc\u010c" +
    "\uffbc\001\002\000\010\325\uffbf\u010b\uffbf\u010c\uffbf\001\002" +
    "\000\010\325\uffbb\u010b\uffbb\u010c\uffbb\001\002\000\010\325" +
    "\uffba\u010b\uffba\u010c\uffba\001\002\000\010\325\ufed5\u010b\ufed5" +
    "\u010c\ufed5\001\002\000\010\325\ufed6\u010b\ufed6\u010c\ufed6\001" +
    "\002\000\002\001\002\000\004\u0111\141\001\002\000\050" +
    "\046\uffca\052\uffca\056\uffca\113\uffca\114\uffca\115\uffca\134" +
    "\uffca\150\uffca\215\uffca\220\uffca\243\uffca\314\uffca\325\uffca" +
    "\u010b\uffca\u010c\uffca\u010f\uffca\u0110\uffca\u0111\uffca\u0123\uffca\001" +
    "\002\000\002\001\002\000\004\u010c\144\001\002\000\002" +
    "\001\002\000\004\u0111\146\001\002\000\050\046\uffdb\052" +
    "\uffdb\056\uffdb\113\uffdb\114\uffdb\115\uffdb\134\uffdb\150\uffdb" +
    "\215\uffdb\220\uffdb\243\uffdb\314\uffdb\325\uffdb\u010b\uffdb\u010c" +
    "\uffdb\u010f\uffdb\u0110\uffdb\u0111\uffdb\u0123\uffdb\001\002\000\002" +
    "\001\002\000\004\u0111\151\001\002\000\050\046\uffce\052" +
    "\uffce\056\uffce\113\uffce\114\uffce\115\uffce\134\uffce\150\uffce" +
    "\215\uffce\220\uffce\243\uffce\314\uffce\325\uffce\u010b\uffce\u010c" +
    "\uffce\u010f\uffce\u0110\uffce\u0111\uffce\u0123\uffce\001\002\000\006" +
    "\325\ufecc\u010b\ufecc\001\002\000\016\002\ufff2\003\ufff2\167" +
    "\ufff2\230\ufff2\257\ufff2\263\ufff2\001\002\000\016\002\ufffe" +
    "\003\017\167\014\230\025\257\021\263\016\001\002\000" +
    "\016\002\ufff1\003\ufff1\167\ufff1\230\ufff1\257\ufff1\263\ufff1" +
    "\001\002\000\004\002\uffff\001\002\000\006\325\uff7b\u010b" +
    "\uff7b\001\002\000\010\124\173\u010e\uff67\u0127\uff67\001\002" +
    "\000\010\124\173\u010e\uff67\u0127\uff67\001\002\000\010\124" +
    "\173\u010e\uff67\u0127\uff67\001\002\000\006\325\uff78\u010b\uff78" +
    "\001\002\000\006\325\uff7c\u010b\uff7c\001\002\000\006\325" +
    "\uff7a\u010b\uff7a\001\002\000\010\124\173\u010e\uff67\u0127\uff67" +
    "\001\002\000\010\124\173\u010e\uff67\u0127\uff67\001\002\000" +
    "\006\325\uff77\u010b\uff77\001\002\000\006\325\uff79\u010b\uff79" +
    "\001\002\000\006\u010e\200\u0127\201\001\002\000\004\316" +
    "\175\001\002\000\006\u010e\uff68\u0127\uff68\001\002\000\006" +
    "\u010e\uffe5\u0127\uffe5\001\002\000\072\042\uffe9\070\uffe9\127" +
    "\uffe9\151\uffe9\170\uffe9\215\uffe9\237\uffe9\264\uffe9\325\uffe9" +
    "\u0106\uffe9\u0107\uffe9\u0108\uffe9\u0109\uffe9\u010b\uffe9\u010c\uffe9\u010d" +
    "\211\u0110\uffe9\u0111\uffe9\u011a\uffe9\u011b\uffe9\u011c\uffe9\u011d\uffe9" +
    "\u011e\uffe9\u011f\uffe9\u0120\uffe9\u0121\uffe9\u0122\uffe9\u0123\uffe9\001" +
    "\002\000\010\325\uff74\u010b\uff74\u010c\205\001\002\000\004" +
    "\u0127\202\001\002\000\216\042\uffef\046\uffef\051\uffef\052" +
    "\uffef\056\uffef\070\uffef\113\uffef\114\uffef\115\uffef\126\uffef" +
    "\127\uffef\134\uffef\150\uffef\151\uffef\170\uffef\212\uffef\215" +
    "\uffef\220\uffef\233\uffef\237\uffef\243\uffef\264\uffef\314\uffef" +
    "\325\uffef\337\uffef\340\uffef\341\uffef\342\uffef\343\uffef\344" +
    "\uffef\345\uffef\346\uffef\347\uffef\350\uffef\351\uffef\352\uffef" +
    "\353\uffef\354\uffef\355\uffef\356\uffef\357\uffef\360\uffef\361" +
    "\uffef\362\uffef\363\uffef\364\uffef\365\uffef\366\uffef\367\uffef" +
    "\370\uffef\u0106\uffef\u0107\uffef\u0108\uffef\u0109\uffef\u010b\uffef\u010c" +
    "\uffef\u010d\uffef\u010e\uffef\u0110\uffef\u0111\uffef\u011a\uffef\u011b\uffef" +
    "\u011c\uffef\u011d\uffef\u011e\uffef\u011f\uffef\u0120\uffef\u0121\uffef\u0122" +
    "\uffef\u0123\uffef\001\002\000\004\u010f\203\001\002\000\216" +
    "\042\ufff0\046\ufff0\051\ufff0\052\ufff0\056\ufff0\070\ufff0\113" +
    "\ufff0\114\ufff0\115\ufff0\126\ufff0\127\ufff0\134\ufff0\150\ufff0" +
    "\151\ufff0\170\ufff0\212\ufff0\215\ufff0\220\ufff0\233\ufff0\237" +
    "\ufff0\243\ufff0\264\ufff0\314\ufff0\325\ufff0\337\ufff0\340\ufff0" +
    "\341\ufff0\342\ufff0\343\ufff0\344\ufff0\345\ufff0\346\ufff0\347" +
    "\ufff0\350\ufff0\351\ufff0\352\ufff0\353\ufff0\354\ufff0\355\ufff0" +
    "\356\ufff0\357\ufff0\360\ufff0\361\ufff0\362\ufff0\363\ufff0\364" +
    "\ufff0\365\ufff0\366\ufff0\367\ufff0\370\ufff0\u0106\ufff0\u0107\ufff0" +
    "\u0108\ufff0\u0109\ufff0\u010b\ufff0\u010c\ufff0\u010d\ufff0\u010e\ufff0\u0110" +
    "\ufff0\u0111\ufff0\u011a\ufff0\u011b\ufff0\u011c\ufff0\u011d\ufff0\u011e\ufff0" +
    "\u011f\ufff0\u0120\ufff0\u0121\ufff0\u0122\ufff0\u0123\ufff0\001\002\000" +
    "\006\325\uff76\u010b\uff76\001\002\000\006\u010e\200\u0127\201" +
    "\001\002\000\010\325\uff74\u010b\uff74\u010c\205\001\002\000" +
    "\006\325\uff75\u010b\uff75\001\002\000\070\042\uffeb\070\uffeb" +
    "\127\uffeb\151\uffeb\170\uffeb\215\uffeb\237\uffeb\264\uffeb\325" +
    "\uffeb\u0106\uffeb\u0107\uffeb\u0108\uffeb\u0109\uffeb\u010b\uffeb\u010c\uffeb" +
    "\u0110\uffeb\u0111\uffeb\u011a\uffeb\u011b\uffeb\u011c\uffeb\u011d\uffeb\u011e" +
    "\uffeb\u011f\uffeb\u0120\uffeb\u0121\uffeb\u0122\uffeb\u0123\uffeb\001\002" +
    "\000\006\u010e\200\u0127\201\001\002\000\112\042\uffec\051" +
    "\uffec\052\uffec\056\uffec\070\uffec\115\uffec\127\uffec\150\uffec" +
    "\151\uffec\170\uffec\215\uffec\220\uffec\237\uffec\243\uffec\264" +
    "\uffec\314\uffec\325\uffec\u0106\uffec\u0107\uffec\u0108\uffec\u0109\uffec" +
    "\u010b\uffec\u010c\uffec\u010d\215\u0110\uffec\u0111\uffec\u011a\uffec\u011b" +
    "\uffec\u011c\uffec\u011d\uffec\u011e\uffec\u011f\uffec\u0120\uffec\u0121\uffec" +
    "\u0122\uffec\u0123\uffec\001\002\000\070\042\uffea\070\uffea\127" +
    "\uffea\151\uffea\170\uffea\215\uffea\237\uffea\264\uffea\325\uffea" +
    "\u0106\uffea\u0107\uffea\u0108\uffea\u0109\uffea\u010b\uffea\u010c\uffea\u0110" +
    "\uffea\u0111\uffea\u011a\uffea\u011b\uffea\u011c\uffea\u011d\uffea\u011e\uffea" +
    "\u011f\uffea\u0120\uffea\u0121\uffea\u0122\uffea\u0123\uffea\001\002\000" +
    "\110\042\uffee\051\uffee\052\uffee\056\uffee\070\uffee\115\uffee" +
    "\127\uffee\150\uffee\151\uffee\170\uffee\215\uffee\220\uffee\237" +
    "\uffee\243\uffee\264\uffee\314\uffee\325\uffee\u0106\uffee\u0107\uffee" +
    "\u0108\uffee\u0109\uffee\u010b\uffee\u010c\uffee\u0110\uffee\u0111\uffee\u011a" +
    "\uffee\u011b\uffee\u011c\uffee\u011d\uffee\u011e\uffee\u011f\uffee\u0120\uffee" +
    "\u0121\uffee\u0122\uffee\u0123\uffee\001\002\000\006\u010e\200\u0127" +
    "\201\001\002\000\110\042\uffed\051\uffed\052\uffed\056\uffed" +
    "\070\uffed\115\uffed\127\uffed\150\uffed\151\uffed\170\uffed\215" +
    "\uffed\220\uffed\237\uffed\243\uffed\264\uffed\314\uffed\325\uffed" +
    "\u0106\uffed\u0107\uffed\u0108\uffed\u0109\uffed\u010b\uffed\u010c\uffed\u0110" +
    "\uffed\u0111\uffed\u011a\uffed\u011b\uffed\u011c\uffed\u011d\uffed\u011e\uffed" +
    "\u011f\uffed\u0120\uffed\u0121\uffed\u0122\uffed\u0123\uffed\001\002\000" +
    "\006\u010e\200\u0127\201\001\002\000\010\325\uff71\u010b\uff71" +
    "\u010c\222\001\002\000\006\325\uff73\u010b\uff73\001\002\000" +
    "\006\u010e\200\u0127\201\001\002\000\010\325\uff71\u010b\uff71" +
    "\u010c\222\001\002\000\006\325\uff72\u010b\uff72\001\002\000" +
    "\006\u010e\200\u0127\201\001\002\000\006\325\uff70\u010b\uff70" +
    "\001\002\000\006\u010e\200\u0127\201\001\002\000\004\237" +
    "\236\001\002\000\010\325\uff69\u010b\uff69\u010c\232\001\002" +
    "\000\006\u010e\200\u0127\201\001\002\000\006\325\uff6c\u010b" +
    "\uff6c\001\002\000\010\325\uff69\u010b\uff69\u010c\232\001\002" +
    "\000\006\325\uff6a\u010b\uff6a\001\002\000\006\u010e\200\u0127" +
    "\201\001\002\000\010\325\uff6b\u010b\uff6b\u010c\uff6b\001\002" +
    "\000\006\u010e\200\u0127\201\001\002\000\010\325\uff6d\u010b" +
    "\uff6d\u010c\242\001\002\000\006\u010e\200\u0127\201\001\002" +
    "\000\006\325\uff6f\u010b\uff6f\001\002\000\010\325\uff6d\u010b" +
    "\uff6d\u010c\242\001\002\000\006\325\uff6e\u010b\uff6e\001\002" +
    "\000\006\325\uff62\u010b\uff62\001\002\000\006\325\uff64\u010b" +
    "\uff64\001\002\000\006\325\uff60\u010b\uff60\001\002\000\006" +
    "\325\uff63\u010b\uff63\001\002\000\006\u010e\200\u0127\201\001" +
    "\002\000\006\325\uff65\u010b\uff65\001\002\000\006\325\uff66" +
    "\u010b\uff66\001\002\000\006\u010e\200\u0127\201\001\002\000" +
    "\010\126\uff37\132\uff37\212\uff37\001\002\000\010\126\307" +
    "\132\ufef3\212\310\001\002\000\006\u010e\200\u0127\201\001" +
    "\002\000\006\u010e\200\u0127\201\001\002\000\006\325\uff5f" +
    "\u010b\uff5f\001\002\000\006\325\uff61\u010b\uff61\001\002\000" +
    "\004\051\265\001\002\000\002\001\002\000\006\325\uff39" +
    "\u010b\uff39\001\002\000\004\u0110\270\001\002\000\022\052" +
    "\ufef9\115\ufef9\132\275\150\276\243\ufef9\314\ufef9\u010e\200" +
    "\u0127\201\001\002\000\006\u010c\uff21\u0111\uff21\001\002\000" +
    "\006\u010c\uff20\u0111\uff20\001\002\000\006\u010c\uff1f\u0111\uff1f" +
    "\001\002\000\006\u010c\u01c5\u0111\uff1d\001\002\000\006\u010e" +
    "\200\u0127\201\001\002\000\006\u010e\200\u0127\201\001\002" +
    "\000\070\337\053\340\047\341\067\342\076\343\066\344" +
    "\054\345\044\346\074\347\057\350\065\351\075\352\055" +
    "\353\050\354\056\355\046\356\071\357\070\360\052\361" +
    "\073\362\063\363\060\364\077\365\100\366\045\367\051" +
    "\370\064\u010e\u016e\001\002\000\012\052\302\115\301\243" +
    "\305\314\303\001\002\000\010\215\345\220\346\u0110\uff28" +
    "\001\002\000\004\157\326\001\002\000\004\157\323\001" +
    "\002\000\006\u010c\ufee4\u0111\ufee4\001\002\000\010\126\307" +
    "\212\310\u0110\ufef3\001\002\000\004\u0110\312\001\002\000" +
    "\026\052\ufef5\056\ufef5\115\ufef5\132\ufef5\150\ufef5\243\ufef5" +
    "\314\ufef5\u010c\ufef5\u0110\ufef5\u0111\ufef5\001\002\000\026\052" +
    "\ufef4\056\ufef4\115\ufef4\132\ufef4\150\ufef4\243\ufef4\314\ufef4" +
    "\u010c\ufef4\u0110\ufef4\u0111\ufef4\001\002\000\006\u010c\ufee2\u0111" +
    "\ufee2\001\002\000\006\u010e\200\u0127\201\001\002\000\002" +
    "\001\002\000\006\u010c\316\u0111\ufeda\001\002\000\004\u0111" +
    "\322\001\002\000\006\u010e\200\u0127\201\001\002\000\002" +
    "\001\002\000\006\u010c\316\u0111\ufeda\001\002\000\004\u0111" +
    "\ufedb\001\002\000\006\u010c\ufedf\u0111\ufedf\001\002\000\010" +
    "\126\307\212\310\u0110\ufef3\001\002\000\004\u0110\312\001" +
    "\002\000\006\u010c\ufee3\u0111\ufee3\001\002\000\004\u0110\330" +
    "\001\002\000\004\056\337\001\002\000\006\u010e\200\u0127" +
    "\201\001\002\000\006\u010c\333\u0111\ufedc\001\002\000\004" +
    "\u0111\336\001\002\000\006\u010e\200\u0127\201\001\002\000" +
    "\006\u010c\333\u0111\ufedc\001\002\000\004\u0111\ufedd\001\002" +
    "\000\004\056\ufede\001\002\000\006\u010e\200\u0127\201\001" +
    "\002\000\016\215\ufeef\220\ufeef\237\ufeef\u010c\ufeef\u0110\341" +
    "\u0111\ufeef\001\002\000\006\u010e\200\u0127\201\001\002\000" +
    "\014\215\ufeed\220\ufeed\237\343\u010c\ufeed\u0111\ufeed\001\002" +
    "\000\006\236\361\251\363\001\002\000\012\215\345\220" +
    "\346\u010c\uff28\u0111\uff28\001\002\000\006\046\350\220\352" +
    "\001\002\000\026\052\uff29\056\uff29\114\uff29\115\uff29\150" +
    "\uff29\243\uff29\314\uff29\u010c\uff29\u0110\uff29\u0111\uff29\001\002" +
    "\000\006\u010c\ufee1\u0111\ufee1\001\002\000\004\061\353\001" +
    "\002\000\026\052\uff2a\056\uff2a\114\uff2a\115\uff2a\150\uff2a" +
    "\243\uff2a\314\uff2a\u010c\uff2a\u0110\uff2a\u0111\uff2a\001\002\000" +
    "\026\052\uff26\056\uff26\114\uff26\115\uff26\150\uff26\243\uff26" +
    "\314\uff26\u010c\uff26\u0110\uff26\u0111\uff26\001\002\000\032\052" +
    "\uff23\056\uff23\114\uff23\115\uff23\150\uff23\215\354\220\356" +
    "\243\uff23\314\uff23\u010c\uff23\u0110\uff23\u0111\uff23\001\002\000" +
    "\004\220\360\001\002\000\026\052\uff27\056\uff27\114\uff27" +
    "\115\uff27\150\uff27\243\uff27\314\uff27\u010c\uff27\u0110\uff27\u0111" +
    "\uff27\001\002\000\026\052\uff24\056\uff24\114\uff24\115\uff24" +
    "\150\uff24\243\uff24\314\uff24\u010c\uff24\u0110\uff24\u0111\uff24\001" +
    "\002\000\026\052\uff25\056\uff25\114\uff25\115\uff25\150\uff25" +
    "\243\uff25\314\uff25\u010c\uff25\u0110\uff25\u0111\uff25\001\002\000" +
    "\026\052\uff22\056\uff22\114\uff22\115\uff22\150\uff22\243\uff22" +
    "\314\uff22\u010c\uff22\u0110\uff22\u0111\uff22\001\002\000\006\107" +
    "\366\152\365\001\002\000\030\052\ufeed\056\ufeed\115\ufeed" +
    "\150\ufeed\215\ufeed\220\ufeed\237\343\243\ufeed\314\ufeed\u010c" +
    "\ufeed\u0111\ufeed\001\002\000\006\107\366\152\365\001\002" +
    "\000\030\052\ufeeb\056\ufeeb\115\ufeeb\150\ufeeb\215\ufeeb\220" +
    "\ufeeb\237\ufeeb\243\ufeeb\314\ufeeb\u010c\ufeeb\u0111\ufeeb\001\002" +
    "\000\006\220\371\233\367\001\002\000\030\052\ufeea\056" +
    "\ufeea\115\ufeea\150\ufeea\215\ufeea\220\ufeea\237\ufeea\243\ufeea" +
    "\314\ufeea\u010c\ufeea\u0111\ufeea\001\002\000\030\052\ufee7\056" +
    "\ufee7\115\ufee7\150\ufee7\215\ufee7\220\ufee7\237\ufee7\243\ufee7" +
    "\314\ufee7\u010c\ufee7\u0111\ufee7\001\002\000\030\052\ufee9\056" +
    "\ufee9\115\ufee9\150\ufee9\215\ufee9\220\ufee9\237\ufee9\243\ufee9" +
    "\314\ufee9\u010c\ufee9\u0111\ufee9\001\002\000\030\052\ufee8\056" +
    "\ufee8\115\ufee8\150\ufee8\215\ufee8\220\ufee8\237\ufee8\243\ufee8" +
    "\314\ufee8\u010c\ufee8\u0111\ufee8\001\002\000\026\052\ufeee\056" +
    "\ufeee\115\ufeee\150\ufeee\215\ufeee\220\ufeee\243\ufeee\314\ufeee" +
    "\u010c\ufeee\u0111\ufeee\001\002\000\030\052\ufeec\056\ufeec\115" +
    "\ufeec\150\ufeec\215\ufeec\220\ufeec\237\ufeec\243\ufeec\314\ufeec" +
    "\u010c\ufeec\u0111\ufeec\001\002\000\004\u0111\375\001\002\000" +
    "\030\052\ufef0\056\ufef0\115\ufef0\150\ufef0\215\ufef0\220\ufef0" +
    "\237\ufef0\243\ufef0\314\ufef0\u010c\ufef0\u0111\ufef0\001\002\000" +
    "\004\u0110\377\001\002\000\040\215\u0101\220\uff7d\326\uff7d" +
    "\327\uff7d\330\uff7d\331\uff7d\332\uff7d\u010e\uff7d\u0110\u0103\u0117" +
    "\uff7d\u0124\uff7d\u0127\uff7d\u0129\uff7d\u012a\uff7d\u012b\uff7d\001\002" +
    "\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332" +
    "\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a" +
    "\u012a\u0110\u012b\u0112\001\002\000\044\070\uff7e\127\uff7e\170" +
    "\uff7e\220\uff7e\326\uff7e\327\uff7e\330\uff7e\331\uff7e\332\uff7e" +
    "\u010e\uff7e\u0110\uff7e\u0117\uff7e\u0124\uff7e\u0127\uff7e\u0129\uff7e\u012a" +
    "\uff7e\u012b\uff7e\001\002\000\004\u0111\u010b\001\002\000\040" +
    "\215\u0101\220\uff7d\326\uff7d\327\uff7d\330\uff7d\331\uff7d\332" +
    "\uff7d\u010e\uff7d\u0110\u0103\u0117\uff7d\u0124\uff7d\u0127\uff7d\u0129\uff7d" +
    "\u012a\uff7d\u012b\uff7d\001\002\000\004\u0111\u0105\001\002\000" +
    "\016\042\u0107\237\uffb5\264\u0109\325\uffb5\u010b\uffb5\u0111\uffb5" +
    "\001\002\000\012\237\uffb8\325\uffb8\u010b\uffb8\u0111\uffb8\001" +
    "\002\000\040\215\uffa2\220\uffa2\326\uffa2\327\uffa2\330\uffa2" +
    "\331\uffa2\332\uffa2\u010e\uffa2\u0110\uffa2\u0117\uffa2\u0124\uffa2\u0127" +
    "\uffa2\u0129\uffa2\u012a\uffa2\u012b\uffa2\001\002\000\040\215\u0101" +
    "\220\uff7d\326\uff7d\327\uff7d\330\uff7d\331\uff7d\332\uff7d\u010e" +
    "\uff7d\u0110\u0103\u0117\uff7d\u0124\uff7d\u0127\uff7d\u0129\uff7d\u012a\uff7d" +
    "\u012b\uff7d\001\002\000\040\215\uffa1\220\uffa1\326\uffa1\327" +
    "\uffa1\330\uffa1\331\uffa1\332\uffa1\u010e\uffa1\u0110\uffa1\u0117\uffa1" +
    "\u0124\uffa1\u0127\uffa1\u0129\uffa1\u012a\uffa1\u012b\uffa1\001\002\000" +
    "\012\237\uffb6\325\uffb6\u010b\uffb6\u0111\uffb6\001\002\000\006" +
    "\u010c\ufee0\u0111\ufee0\001\002\000\066\042\uff8c\070\uff8c\127" +
    "\uff8c\151\uff8c\170\uff8c\215\uff8c\237\uff8c\264\uff8c\325\uff8c" +
    "\u0106\uff8c\u0107\uff8c\u0108\uff8c\u0109\uff8c\u010b\uff8c\u010c\uff8c\u0111" +
    "\uff8c\u011a\uff8c\u011b\uff8c\u011c\uff8c\u011d\uff8c\u011e\uff8c\u011f\uff8c" +
    "\u0120\uff8c\u0121\uff8c\u0122\uff8c\u0123\uff8c\001\002\000\040\070" +
    "\uff7d\127\uff7d\151\u0150\170\uff7d\215\u0101\u011a\u0144\u011b\u0145" +
    "\u011c\u0149\u011d\u0148\u011e\u0147\u011f\u014b\u0120\u0146\u0121\u014c\u0122" +
    "\u014f\u0123\u014a\001\002\000\066\042\uff8a\070\uff8a\127\uff8a" +
    "\151\uff8a\170\uff8a\215\uff8a\237\uff8a\264\uff8a\325\uff8a\u0106" +
    "\uff8a\u0107\uff8a\u0108\uff8a\u0109\uff8a\u010b\uff8a\u010c\uff8a\u0111\uff8a" +
    "\u011a\uff8a\u011b\uff8a\u011c\uff8a\u011d\uff8a\u011e\uff8a\u011f\uff8a\u0120" +
    "\uff8a\u0121\uff8a\u0122\uff8a\u0123\uff8a\001\002\000\004\u0110\u0141" +
    "\001\002\000\066\042\uff8d\070\uff8d\127\uff8d\151\uff8d\170" +
    "\uff8d\215\uff8d\237\uff8d\264\uff8d\325\uff8d\u0106\uff8d\u0107\uff8d" +
    "\u0108\uff8d\u0109\uff8d\u010b\uff8d\u010c\uff8d\u0111\uff8d\u011a\uff8d\u011b" +
    "\uff8d\u011c\uff8d\u011d\uff8d\u011e\uff8d\u011f\uff8d\u0120\uff8d\u0121\uff8d" +
    "\u0122\uff8d\u0123\uff8d\001\002\000\066\042\uff8f\070\uff8f\127" +
    "\uff8f\151\uff8f\170\uff8f\215\uff8f\237\uff8f\264\uff8f\325\uff8f" +
    "\u0106\uff8f\u0107\uff8f\u0108\uff8f\u0109\uff8f\u010b\uff8f\u010c\uff8f\u0111" +
    "\uff8f\u011a\uff8f\u011b\uff8f\u011c\uff8f\u011d\uff8f\u011e\uff8f\u011f\uff8f" +
    "\u0120\uff8f\u0121\uff8f\u0122\uff8f\u0123\uff8f\001\002\000\066\042" +
    "\uff8e\070\uff8e\127\uff8e\151\uff8e\170\uff8e\215\uff8e\237\uff8e" +
    "\264\uff8e\325\uff8e\u0106\uff8e\u0107\uff8e\u0108\uff8e\u0109\uff8e\u010b" +
    "\uff8e\u010c\uff8e\u0111\uff8e\u011a\uff8e\u011b\uff8e\u011c\uff8e\u011d\uff8e" +
    "\u011e\uff8e\u011f\uff8e\u0120\uff8e\u0121\uff8e\u0122\uff8e\u0123\uff8e\001" +
    "\002\000\070\042\uffe6\070\uffe6\127\uffe6\151\uffe6\170\uffe6" +
    "\215\uffe6\237\uffe6\264\uffe6\325\uffe6\u0106\uffe6\u0107\uffe6\u0108" +
    "\uffe6\u0109\uffe6\u010b\uffe6\u010c\uffe6\u010d\u013f\u0111\uffe6\u011a\uffe6" +
    "\u011b\uffe6\u011c\uffe6\u011d\uffe6\u011e\uffe6\u011f\uffe6\u0120\uffe6\u0121" +
    "\uffe6\u0122\uffe6\u0123\uffe6\001\002\000\066\042\uff90\070\uff90" +
    "\127\uff90\151\uff90\170\uff90\215\uff90\237\uff90\264\uff90\325" +
    "\uff90\u0106\uff90\u0107\uff90\u0108\uff90\u0109\uff90\u010b\uff90\u010c\uff90" +
    "\u0111\uff90\u011a\uff90\u011b\uff90\u011c\uff90\u011d\uff90\u011e\uff90\u011f" +
    "\uff90\u0120\uff90\u0121\uff90\u0122\uff90\u0123\uff90\001\002\000\066" +
    "\042\uff92\070\uff92\127\uff92\151\uff92\170\uff92\215\uff92\237" +
    "\uff92\264\uff92\325\uff92\u0106\uff92\u0107\uff92\u0108\u0138\u0109\u0139" +
    "\u010b\uff92\u010c\uff92\u0111\uff92\u011a\uff92\u011b\uff92\u011c\uff92\u011d" +
    "\uff92\u011e\uff92\u011f\uff92\u0120\uff92\u0121\uff92\u0122\uff92\u0123\uff92" +
    "\001\002\000\016\042\u0107\237\uffb5\264\u0109\325\uffb5\u010b" +
    "\uffb5\u0111\uffb5\001\002\000\062\042\uff96\070\uff96\127\uff96" +
    "\151\uff96\170\uff96\215\uff96\237\uff96\264\uff96\325\uff96\u0106" +
    "\u0131\u0107\u0130\u010b\uff96\u010c\uff96\u0111\uff96\u011a\uff96\u011b\uff96" +
    "\u011c\uff96\u011d\uff96\u011e\uff96\u011f\uff96\u0120\uff96\u0121\uff96\u0122" +
    "\uff96\u0123\uff96\001\002\000\004\u0110\u012d\001\002\000\004" +
    "\u0110\u012b\001\002\000\066\042\uff8b\070\uff8b\127\uff8b\151" +
    "\uff8b\170\uff8b\215\uff8b\237\uff8b\264\uff8b\325\uff8b\u0106\uff8b" +
    "\u0107\uff8b\u0108\uff8b\u0109\uff8b\u010b\uff8b\u010c\uff8b\u0111\uff8b\u011a" +
    "\uff8b\u011b\uff8b\u011c\uff8b\u011d\uff8b\u011e\uff8b\u011f\uff8b\u0120\uff8b" +
    "\u0121\uff8b\u0122\uff8b\u0123\uff8b\001\002\000\036\220\u011d\326" +
    "\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b" +
    "\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001" +
    "\002\000\004\u0110\u0127\001\002\000\066\042\uff89\070\uff89" +
    "\127\uff89\151\uff89\170\uff89\215\uff89\237\uff89\264\uff89\325" +
    "\uff89\u0106\uff89\u0107\uff89\u0108\uff89\u0109\uff89\u010b\uff89\u010c\uff89" +
    "\u0111\uff89\u011a\uff89\u011b\uff89\u011c\uff89\u011d\uff89\u011e\uff89\u011f" +
    "\uff89\u0120\uff89\u0121\uff89\u0122\uff89\u0123\uff89\001\002\000\004" +
    "\u0110\u011f\001\002\000\010\u0108\u0122\u010e\200\u0127\201\001" +
    "\002\000\066\042\uff84\070\uff84\127\uff84\151\uff84\170\uff84" +
    "\215\uff84\237\uff84\264\uff84\325\uff84\u0106\uff84\u0107\uff84\u0108" +
    "\uff84\u0109\uff84\u010b\uff84\u010c\uff84\u0111\uff84\u011a\uff84\u011b\uff84" +
    "\u011c\uff84\u011d\uff84\u011e\uff84\u011f\uff84\u0120\uff84\u0121\uff84\u0122" +
    "\uff84\u0123\uff84\001\002\000\004\u0111\u0126\001\002\000\004" +
    "\u0111\u0125\001\002\000\004\u0111\u0124\001\002\000\066\042" +
    "\uff82\070\uff82\127\uff82\151\uff82\170\uff82\215\uff82\237\uff82" +
    "\264\uff82\325\uff82\u0106\uff82\u0107\uff82\u0108\uff82\u0109\uff82\u010b" +
    "\uff82\u010c\uff82\u0111\uff82\u011a\uff82\u011b\uff82\u011c\uff82\u011d\uff82" +
    "\u011e\uff82\u011f\uff82\u0120\uff82\u0121\uff82\u0122\uff82\u0123\uff82\001" +
    "\002\000\066\042\uff81\070\uff81\127\uff81\151\uff81\170\uff81" +
    "\215\uff81\237\uff81\264\uff81\325\uff81\u0106\uff81\u0107\uff81\u0108" +
    "\uff81\u0109\uff81\u010b\uff81\u010c\uff81\u0111\uff81\u011a\uff81\u011b\uff81" +
    "\u011c\uff81\u011d\uff81\u011e\uff81\u011f\uff81\u0120\uff81\u0121\uff81\u0122" +
    "\uff81\u0123\uff81\001\002\000\066\042\uff83\070\uff83\127\uff83" +
    "\151\uff83\170\uff83\215\uff83\237\uff83\264\uff83\325\uff83\u0106" +
    "\uff83\u0107\uff83\u0108\uff83\u0109\uff83\u010b\uff83\u010c\uff83\u0111\uff83" +
    "\u011a\uff83\u011b\uff83\u011c\uff83\u011d\uff83\u011e\uff83\u011f\uff83\u0120" +
    "\uff83\u0121\uff83\u0122\uff83\u0123\uff83\001\002\000\010\u0108\u0122" +
    "\u010e\200\u0127\201\001\002\000\066\042\uff85\070\uff85\127" +
    "\uff85\151\uff85\170\uff85\215\uff85\237\uff85\264\uff85\325\uff85" +
    "\u0106\uff85\u0107\uff85\u0108\uff85\u0109\uff85\u010b\uff85\u010c\uff85\u0111" +
    "\uff85\u011a\uff85\u011b\uff85\u011c\uff85\u011d\uff85\u011e\uff85\u011f\uff85" +
    "\u0120\uff85\u0121\uff85\u0122\uff85\u0123\uff85\001\002\000\004\u0111" +
    "\u012a\001\002\000\066\042\uff91\070\uff91\127\uff91\151\uff91" +
    "\170\uff91\215\uff91\237\uff91\264\uff91\325\uff91\u0106\uff91\u0107" +
    "\uff91\u0108\uff91\u0109\uff91\u010b\uff91\u010c\uff91\u0111\uff91\u011a\uff91" +
    "\u011b\uff91\u011c\uff91\u011d\uff91\u011e\uff91\u011f\uff91\u0120\uff91\u0121" +
    "\uff91\u0122\uff91\u0123\uff91\001\002\000\010\u0108\u0122\u010e\200" +
    "\u0127\201\001\002\000\066\042\uff86\070\uff86\127\uff86\151" +
    "\uff86\170\uff86\215\uff86\237\uff86\264\uff86\325\uff86\u0106\uff86" +
    "\u0107\uff86\u0108\uff86\u0109\uff86\u010b\uff86\u010c\uff86\u0111\uff86\u011a" +
    "\uff86\u011b\uff86\u011c\uff86\u011d\uff86\u011e\uff86\u011f\uff86\u0120\uff86" +
    "\u0121\uff86\u0122\uff86\u0123\uff86\001\002\000\010\u0108\u0122\u010e" +
    "\200\u0127\201\001\002\000\066\042\uff87\070\uff87\127\uff87" +
    "\151\uff87\170\uff87\215\uff87\237\uff87\264\uff87\325\uff87\u0106" +
    "\uff87\u0107\uff87\u0108\uff87\u0109\uff87\u010b\uff87\u010c\uff87\u0111\uff87" +
    "\u011a\uff87\u011b\uff87\u011c\uff87\u011d\uff87\u011e\uff87\u011f\uff87\u0120" +
    "\uff87\u0121\uff87\u0122\uff87\u0123\uff87\001\002\000\056\042\uff99" +
    "\070\uff99\127\uff99\151\uff99\170\uff99\215\uff99\237\uff99\264" +
    "\uff99\325\uff99\u010b\uff99\u010c\uff99\u0111\uff99\u011a\uff99\u011b\uff99" +
    "\u011c\uff99\u011d\uff99\u011e\uff99\u011f\uff99\u0120\uff99\u0121\uff99\u0122" +
    "\uff99\u0123\uff99\001\002\000\036\220\u011d\326\u010f\327\u0118" +
    "\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b\u0117\027\u0124" +
    "\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001\002\000\036" +
    "\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e" +
    "\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110" +
    "\u012b\u0112\001\002\000\062\042\uff96\070\uff96\127\uff96\151" +
    "\uff96\170\uff96\215\uff96\237\uff96\264\uff96\325\uff96\u0106\u0131" +
    "\u0107\u0130\u010b\uff96\u010c\uff96\u0111\uff96\u011a\uff96\u011b\uff96\u011c" +
    "\uff96\u011d\uff96\u011e\uff96\u011f\uff96\u0120\uff96\u0121\uff96\u0122\uff96" +
    "\u0123\uff96\001\002\000\056\042\uff98\070\uff98\127\uff98\151" +
    "\uff98\170\uff98\215\uff98\237\uff98\264\uff98\325\uff98\u010b\uff98" +
    "\u010c\uff98\u0111\uff98\u011a\uff98\u011b\uff98\u011c\uff98\u011d\uff98\u011e" +
    "\uff98\u011f\uff98\u0120\uff98\u0121\uff98\u0122\uff98\u0123\uff98\001\002" +
    "\000\062\042\uff96\070\uff96\127\uff96\151\uff96\170\uff96\215" +
    "\uff96\237\uff96\264\uff96\325\uff96\u0106\u0131\u0107\u0130\u010b\uff96" +
    "\u010c\uff96\u0111\uff96\u011a\uff96\u011b\uff96\u011c\uff96\u011d\uff96\u011e" +
    "\uff96\u011f\uff96\u0120\uff96\u0121\uff96\u0122\uff96\u0123\uff96\001\002" +
    "\000\056\042\uff97\070\uff97\127\uff97\151\uff97\170\uff97\215" +
    "\uff97\237\uff97\264\uff97\325\uff97\u010b\uff97\u010c\uff97\u0111\uff97" +
    "\u011a\uff97\u011b\uff97\u011c\uff97\u011d\uff97\u011e\uff97\u011f\uff97\u0120" +
    "\uff97\u0121\uff97\u0122\uff97\u0123\uff97\001\002\000\012\237\uffb7" +
    "\325\uffb7\u010b\uffb7\u0111\uffb7\001\002\000\062\042\uff95\070" +
    "\uff95\127\uff95\151\uff95\170\uff95\215\uff95\237\uff95\264\uff95" +
    "\325\uff95\u0106\uff95\u0107\uff95\u010b\uff95\u010c\uff95\u0111\uff95\u011a" +
    "\uff95\u011b\uff95\u011c\uff95\u011d\uff95\u011e\uff95\u011f\uff95\u0120\uff95" +
    "\u0121\uff95\u0122\uff95\u0123\uff95\001\002\000\036\220\u011d\326" +
    "\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b" +
    "\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001" +
    "\002\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c" +
    "\332\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129" +
    "\u011a\u012a\u0110\u012b\u0112\001\002\000\066\042\uff92\070\uff92" +
    "\127\uff92\151\uff92\170\uff92\215\uff92\237\uff92\264\uff92\325" +
    "\uff92\u0106\uff92\u0107\uff92\u0108\u0138\u0109\u0139\u010b\uff92\u010c\uff92" +
    "\u0111\uff92\u011a\uff92\u011b\uff92\u011c\uff92\u011d\uff92\u011e\uff92\u011f" +
    "\uff92\u0120\uff92\u0121\uff92\u0122\uff92\u0123\uff92\001\002\000\062" +
    "\042\uff93\070\uff93\127\uff93\151\uff93\170\uff93\215\uff93\237" +
    "\uff93\264\uff93\325\uff93\u0106\uff93\u0107\uff93\u010b\uff93\u010c\uff93" +
    "\u0111\uff93\u011a\uff93\u011b\uff93\u011c\uff93\u011d\uff93\u011e\uff93\u011f" +
    "\uff93\u0120\uff93\u0121\uff93\u0122\uff93\u0123\uff93\001\002\000\066" +
    "\042\uff92\070\uff92\127\uff92\151\uff92\170\uff92\215\uff92\237" +
    "\uff92\264\uff92\325\uff92\u0106\uff92\u0107\uff92\u0108\u0138\u0109\u0139" +
    "\u010b\uff92\u010c\uff92\u0111\uff92\u011a\uff92\u011b\uff92\u011c\uff92\u011d" +
    "\uff92\u011e\uff92\u011f\uff92\u0120\uff92\u0121\uff92\u0122\uff92\u0123\uff92" +
    "\001\002\000\062\042\uff94\070\uff94\127\uff94\151\uff94\170" +
    "\uff94\215\uff94\237\uff94\264\uff94\325\uff94\u0106\uff94\u0107\uff94" +
    "\u010b\uff94\u010c\uff94\u0111\uff94\u011a\uff94\u011b\uff94\u011c\uff94\u011d" +
    "\uff94\u011e\uff94\u011f\uff94\u0120\uff94\u0121\uff94\u0122\uff94\u0123\uff94" +
    "\001\002\000\066\042\uffe8\070\uffe8\127\uffe8\151\uffe8\170" +
    "\uffe8\215\uffe8\237\uffe8\264\uffe8\325\uffe8\u0106\uffe8\u0107\uffe8" +
    "\u0108\uffe8\u0109\uffe8\u010b\uffe8\u010c\uffe8\u0111\uffe8\u011a\uffe8\u011b" +
    "\uffe8\u011c\uffe8\u011d\uffe8\u011e\uffe8\u011f\uffe8\u0120\uffe8\u0121\uffe8" +
    "\u0122\uffe8\u0123\uffe8\001\002\000\006\u010e\200\u0127\201\001" +
    "\002\000\066\042\uffe7\070\uffe7\127\uffe7\151\uffe7\170\uffe7" +
    "\215\uffe7\237\uffe7\264\uffe7\325\uffe7\u0106\uffe7\u0107\uffe7\u0108" +
    "\uffe7\u0109\uffe7\u010b\uffe7\u010c\uffe7\u0111\uffe7\u011a\uffe7\u011b\uffe7" +
    "\u011c\uffe7\u011d\uffe7\u011e\uffe7\u011f\uffe7\u0120\uffe7\u0121\uffe7\u0122" +
    "\uffe7\u0123\uffe7\001\002\000\010\u0108\u0122\u010e\200\u0127\201" +
    "\001\002\000\066\042\uff88\070\uff88\127\uff88\151\uff88\170" +
    "\uff88\215\uff88\237\uff88\264\uff88\325\uff88\u0106\uff88\u0107\uff88" +
    "\u0108\uff88\u0109\uff88\u010b\uff88\u010c\uff88\u0111\uff88\u011a\uff88\u011b" +
    "\uff88\u011c\uff88\u011d\uff88\u011e\uff88\u011f\uff88\u0120\uff88\u0121\uff88" +
    "\u0122\uff88\u0123\uff88\001\002\000\010\070\u015f\127\u015e\170" +
    "\u015d\001\002\000\036\220\u011d\326\u010f\327\u0118\330\u011e" +
    "\331\u011c\332\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127" +
    "\201\u0129\u011a\u012a\u0110\u012b\u0112\001\002\000\036\220\u011d" +
    "\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110" +
    "\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112" +
    "\001\002\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331" +
    "\u011c\332\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201" +
    "\u0129\u011a\u012a\u0110\u012b\u0112\001\002\000\036\220\u011d\326" +
    "\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b" +
    "\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001" +
    "\002\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c" +
    "\332\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129" +
    "\u011a\u012a\u0110\u012b\u0112\001\002\000\036\220\u011d\326\u010f" +
    "\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b\u0117" +
    "\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001\002" +
    "\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332" +
    "\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a" +
    "\u012a\u0110\u012b\u0112\001\002\000\036\220\u011d\326\u010f\327" +
    "\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b\u0117\027" +
    "\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001\002\000" +
    "\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119" +
    "\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a" +
    "\u0110\u012b\u0112\001\002\000\016\042\uffa8\237\uffa8\264\uffa8" +
    "\325\uffa8\u010b\uffa8\u0111\uffa8\001\002\000\016\042\uffb4\237" +
    "\uffb4\264\uffb4\325\uffb4\u010b\uffb4\u0111\uffb4\001\002\000\036" +
    "\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e" +
    "\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110" +
    "\u012b\u0112\001\002\000\006\215\u0101\220\uff7d\001\002\000" +
    "\004\220\u0152\001\002\000\016\042\uffa9\237\uffa9\264\uffa9" +
    "\325\uffa9\u010b\uffa9\u0111\uffa9\001\002\000\016\042\uffab\237" +
    "\uffab\264\uffab\325\uffab\u010b\uffab\u0111\uffab\001\002\000\016" +
    "\042\uffac\237\uffac\264\uffac\325\uffac\u010b\uffac\u0111\uffac\001" +
    "\002\000\016\042\uffae\237\uffae\264\uffae\325\uffae\u010b\uffae" +
    "\u0111\uffae\001\002\000\016\042\uffaa\237\uffaa\264\uffaa\325" +
    "\uffaa\u010b\uffaa\u0111\uffaa\001\002\000\016\042\uffb1\237\uffb1" +
    "\264\uffb1\325\uffb1\u010b\uffb1\u0111\uffb1\001\002\000\016\042" +
    "\uffb0\237\uffb0\264\uffb0\325\uffb0\u010b\uffb0\u0111\uffb0\001\002" +
    "\000\016\042\uffaf\237\uffaf\264\uffaf\325\uffaf\u010b\uffaf\u0111" +
    "\uffaf\001\002\000\016\042\uffad\237\uffad\264\uffad\325\uffad" +
    "\u010b\uffad\u0111\uffad\001\002\000\016\042\uffb2\237\uffb2\264" +
    "\uffb2\325\uffb2\u010b\uffb2\u0111\uffb2\001\002\000\016\042\uffb3" +
    "\237\uffb3\264\uffb3\325\uffb3\u010b\uffb3\u0111\uffb3\001\002\000" +
    "\006\u010a\u016a\u0124\uffa3\001\002\000\004\u0110\u0163\001\002" +
    "\000\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332" +
    "\u0119\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a" +
    "\u012a\u0110\u012b\u0112\001\002\000\004\042\u0161\001\002\000" +
    "\036\220\u011d\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119" +
    "\u010e\200\u0110\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a" +
    "\u0110\u012b\u0112\001\002\000\016\042\uffa6\237\uffa6\264\uffa6" +
    "\325\uffa6\u010b\uffa6\u0111\uffa6\001\002\000\036\220\u011d\326" +
    "\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110\u011b" +
    "\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112\001" +
    "\002\000\006\u010c\u0165\u0111\uff7f\001\002\000\036\220\u011d" +
    "\326\u010f\327\u0118\330\u011e\331\u011c\332\u0119\u010e\200\u0110" +
    "\u011b\u0117\027\u0124\u010c\u0127\201\u0129\u011a\u012a\u0110\u012b\u0112" +
    "\001\002\000\004\u0111\u0167\001\002\000\016\042\uffa7\237" +
    "\uffa7\264\uffa7\325\uffa7\u010b\uffa7\u0111\uffa7\001\002\000\006" +
    "\u010c\u0165\u0111\uff7f\001\002\000\004\u0111\uff80\001\002\000" +
    "\020\042\uffa4\237\uffa4\264\uffa4\325\uffa4\u010b\uffa4\u0111\uffa4" +
    "\u0124\uffa4\001\002\000\004\u0124\u016c\001\002\000\020\042" +
    "\uffa3\237\uffa3\264\uffa3\325\uffa3\u010a\u016a\u010b\uffa3\u0111\uffa3" +
    "\001\002\000\016\042\uffa5\237\uffa5\264\uffa5\325\uffa5\u010b" +
    "\uffa5\u0111\uffa5\001\002\000\066\337\053\340\047\341\067" +
    "\342\076\343\066\344\054\345\044\346\074\347\057\350" +
    "\065\351\075\352\055\353\050\354\056\355\046\356\071" +
    "\357\070\360\052\361\073\362\063\363\060\364\077\365" +
    "\100\366\045\367\051\370\064\001\002\000\040\046\uffe2" +
    "\052\uffe2\056\uffe2\113\uffe2\114\uffe2\115\uffe2\134\uffe2\150" +
    "\uffe2\215\uffe2\220\uffe2\243\uffe2\314\uffe2\u010c\uffe2\u0110\uffe2" +
    "\u0111\uffe2\001\002\000\040\046\uffc2\052\uffc2\056\uffc2\113" +
    "\uffc2\114\uffc2\115\uffc2\134\uffc2\150\uffc2\215\uffc2\220\uffc2" +
    "\243\uffc2\314\uffc2\u010c\uffc2\u0110\u01b8\u0111\uffc2\001\002\000" +
    "\036\046\uff1a\052\uff1a\056\uff1a\113\uff1a\114\uff1a\115\uff1a" +
    "\134\u0172\150\uff1a\215\uff1a\220\uff1a\243\uff1a\314\uff1a\u010c" +
    "\uff1a\u0111\uff1a\001\002\000\006\u010e\200\u0127\201\001\002" +
    "\000\034\046\uff03\052\ufef9\056\ufef9\113\u0174\114\u0175\115" +
    "\ufef9\150\u0176\215\u0178\220\uff03\243\ufef9\314\ufef9\u010c\uff0e" +
    "\u0111\uff0e\001\002\000\032\052\uff11\056\uff11\114\uff11\115" +
    "\uff11\150\uff11\215\uff11\220\uff11\243\uff11\314\uff11\u010c\uff11" +
    "\u0110\u01ac\u0111\uff11\001\002\000\022\052\ufef9\056\ufef9\115" +
    "\ufef9\150\276\243\ufef9\314\ufef9\u010c\ufefb\u0111\ufefb\001\002" +
    "\000\006\u010e\200\u0127\201\001\002\000\014\052\u018b\056" +
    "\ufef1\115\u0189\243\u018d\314\u018c\001\002\000\006\046\uff04" +
    "\220\uff04\001\002\000\006\046\u017d\220\u017e\001\002\000" +
    "\006\u010c\uff0f\u0111\uff0f\001\002\000\006\u010c\uff1c\u0111\uff1c" +
    "\001\002\000\024\052\uff13\056\uff13\114\u0184\115\uff13\150" +
    "\uff13\243\uff13\314\uff13\u010c\uff13\u0111\uff13\001\002\000\004" +
    "\061\u017f\001\002\000\024\052\uff02\056\uff02\114\uff02\115" +
    "\uff02\150\uff02\243\uff02\314\uff02\u010c\uff02\u0111\uff02\001\002" +
    "\000\030\052\ufefe\056\ufefe\114\ufefe\115\ufefe\150\ufefe\215" +
    "\u0180\220\u0181\243\ufefe\314\ufefe\u010c\ufefe\u0111\ufefe\001\002" +
    "\000\004\220\u0183\001\002\000\024\052\ufeff\056\ufeff\114" +
    "\ufeff\115\ufeff\150\ufeff\243\ufeff\314\ufeff\u010c\ufeff\u0111\ufeff" +
    "\001\002\000\024\052\uff01\056\uff01\114\uff01\115\uff01\150" +
    "\uff01\243\uff01\314\uff01\u010c\uff01\u0111\uff01\001\002\000\024" +
    "\052\uff00\056\uff00\114\uff00\115\uff00\150\uff00\243\uff00\314" +
    "\uff00\u010c\uff00\u0111\uff00\001\002\000\022\052\uff14\056\uff14" +
    "\115\uff14\150\uff14\243\uff14\314\uff14\u010c\uff14\u0111\uff14\001" +
    "\002\000\022\052\ufef9\056\ufef9\115\ufef9\150\276\243\ufef9" +
    "\314\ufef9\u010c\ufefb\u0111\ufefb\001\002\000\014\052\u018b\056" +
    "\ufef1\115\u0189\243\u018d\314\u018c\001\002\000\006\u010c\uff0c" +
    "\u0111\uff0c\001\002\000\022\052\ufef9\056\ufef9\115\ufef9\150" +
    "\276\243\ufef9\314\ufef9\u010c\ufefb\u0111\ufefb\001\002\000\010" +
    "\215\345\220\346\u0110\uff28\001\002\000\026\052\ufef3\056" +
    "\ufef3\115\ufef3\126\307\150\ufef3\212\310\243\ufef3\314\ufef3" +
    "\u010c\ufef3\u0111\ufef3\001\002\000\004\157\u0195\001\002\000" +
    "\004\157\u0194\001\002\000\026\052\ufee5\056\ufee5\115\ufee5" +
    "\126\ufee5\150\ufee5\212\ufee5\243\ufee5\314\ufee5\u010c\ufee5\u0111" +
    "\ufee5\001\002\000\004\056\u018f\001\002\000\006\u010e\200" +
    "\u0127\201\001\002\000\032\052\ufeef\056\ufeef\115\ufeef\150" +
    "\ufeef\215\ufeef\220\ufeef\237\ufeef\243\ufeef\314\ufeef\u010c\ufeef" +
    "\u0110\341\u0111\ufeef\001\002\000\030\052\ufeed\056\ufeed\115" +
    "\ufeed\150\ufeed\215\ufeed\220\ufeed\237\343\243\ufeed\314\ufeed" +
    "\u010c\ufeed\u0111\ufeed\001\002\000\026\052\uff28\056\uff28\115" +
    "\uff28\150\uff28\215\345\220\346\243\uff28\314\uff28\u010c\uff28" +
    "\u0111\uff28\001\002\000\022\052\ufef7\056\ufef7\115\ufef7\150" +
    "\ufef7\243\ufef7\314\ufef7\u010c\ufef7\u0111\ufef7\001\002\000\026" +
    "\052\ufee6\056\ufee6\115\ufee6\126\ufee6\150\ufee6\212\ufee6\243" +
    "\ufee6\314\ufee6\u010c\ufee6\u0111\ufee6\001\002\000\004\056\ufef2" +
    "\001\002\000\022\052\ufef8\056\ufef8\115\ufef8\150\ufef8\243" +
    "\ufef8\314\ufef8\u010c\ufef8\u0111\ufef8\001\002\000\004\u0110\u0198" +
    "\001\002\000\040\215\u0101\220\uff7d\326\uff7d\327\uff7d\330" +
    "\uff7d\331\uff7d\332\uff7d\u010e\uff7d\u0110\u0103\u0117\uff7d\u0124\uff7d" +
    "\u0127\uff7d\u0129\uff7d\u012a\uff7d\u012b\uff7d\001\002\000\004\u0111" +
    "\u019a\001\002\000\022\052\ufef6\056\ufef6\115\ufef6\150\ufef6" +
    "\243\ufef6\314\ufef6\u010c\ufef6\u0111\ufef6\001\002\000\006\u010c" +
    "\ufefc\u0111\ufefc\001\002\000\022\052\ufef9\056\ufef9\115\ufef9" +
    "\150\276\243\ufef9\314\ufef9\u010c\ufefb\u0111\ufefb\001\002\000" +
    "\006\u010c\uff0a\u0111\uff0a\001\002\000\016\052\ufefa\056\ufefa" +
    "\115\ufefa\233\u019f\243\ufefa\314\ufefa\001\002\000\014\220" +
    "\u01a5\u0124\u01a6\u0129\u01a3\u012a\u01a2\u012b\u01a1\001\002\000\006" +
    "\u010c\uff10\u0111\uff10\001\002\000\032\052\uff09\056\uff09\113" +
    "\uff09\114\uff09\115\uff09\150\uff09\215\uff09\220\uff09\243\uff09" +
    "\314\uff09\u010c\uff09\u0111\uff09\001\002\000\032\052\uff08\056" +
    "\uff08\113\uff08\114\uff08\115\uff08\150\uff08\215\uff08\220\uff08" +
    "\243\uff08\314\uff08\u010c\uff08\u0111\uff08\001\002\000\032\052" +
    "\uff06\056\uff06\113\uff06\114\uff06\115\uff06\150\uff06\215\uff06" +
    "\220\uff06\243\uff06\314\uff06\u010c\uff06\u0111\uff06\001\002\000" +
    "\032\052\uff18\056\uff18\113\u01a7\114\uff18\115\uff18\150\uff18" +
    "\215\uff18\220\uff18\243\uff18\314\uff18\u010c\uff18\u0111\uff18\001" +
    "\002\000\032\052\uff05\056\uff05\113\uff05\114\uff05\115\uff05" +
    "\150\uff05\215\uff05\220\uff05\243\uff05\314\uff05\u010c\uff05\u0111" +
    "\uff05\001\002\000\032\052\uff07\056\uff07\113\uff07\114\uff07" +
    "\115\uff07\150\uff07\215\uff07\220\uff07\243\uff07\314\uff07\u010c" +
    "\uff07\u0111\uff07\001\002\000\032\052\uff11\056\uff11\114\uff11" +
    "\115\uff11\150\uff11\215\uff11\220\uff11\243\uff11\314\uff11\u010c" +
    "\uff11\u0110\u01ac\u0111\uff11\001\002\000\030\052\uff28\056\uff28" +
    "\114\uff28\115\uff28\150\uff28\215\345\220\346\243\uff28\314" +
    "\uff28\u010c\uff28\u0111\uff28\001\002\000\024\052\uff13\056\uff13" +
    "\114\u0184\115\uff13\150\uff13\243\uff13\314\uff13\u010c\uff13\u0111" +
    "\uff13\001\002\000\022\052\ufef9\056\ufef9\115\ufef9\150\276" +
    "\243\ufef9\314\ufef9\u010c\ufefb\u0111\ufefb\001\002\000\006\u010c" +
    "\ufefd\u0111\ufefd\001\002\000\004\u0129\u01ae\001\002\000\030" +
    "\052\uff19\056\uff19\114\uff19\115\uff19\150\uff19\215\uff19\220" +
    "\uff19\243\uff19\314\uff19\u010c\uff19\u0111\uff19\001\002\000\004" +
    "\u010c\u01af\001\002\000\004\u0129\u01b0\001\002\000\004\u0111" +
    "\u01b1\001\002\000\030\052\uff12\056\uff12\114\uff12\115\uff12" +
    "\150\uff12\215\uff12\220\uff12\243\uff12\314\uff12\u010c\uff12\u0111" +
    "\uff12\001\002\000\006\u010c\uff0b\u0111\uff0b\001\002\000\030" +
    "\052\uff28\056\uff28\114\uff28\115\uff28\150\uff28\215\345\220" +
    "\346\243\uff28\314\uff28\u010c\uff28\u0111\uff28\001\002\000\024" +
    "\052\uff13\056\uff13\114\u0184\115\uff13\150\uff13\243\uff13\314" +
    "\uff13\u010c\uff13\u0111\uff13\001\002\000\022\052\ufef9\056\ufef9" +
    "\115\ufef9\150\276\243\ufef9\314\ufef9\u010c\ufefb\u0111\ufefb\001" +
    "\002\000\006\u010c\uff0d\u0111\uff0d\001\002\000\034\046\uff1b" +
    "\052\uff1b\056\uff1b\113\uff1b\114\uff1b\115\uff1b\150\uff1b\215" +
    "\uff1b\220\uff1b\243\uff1b\314\uff1b\u010c\uff1b\u0111\uff1b\001\002" +
    "\000\004\u012b\u01ba\001\002\000\036\046\uffe3\052\uffe3\056" +
    "\uffe3\113\uffe3\114\uffe3\115\uffe3\134\uffe3\150\uffe3\215\uffe3" +
    "\220\uffe3\243\uffe3\314\uffe3\u010c\uffe3\u0111\uffe3\001\002\000" +
    "\006\u010c\u01bb\u0111\uffc0\001\002\000\004\u012b\u01be\001\002" +
    "\000\004\u0111\u01bd\001\002\000\036\046\uffc3\052\uffc3\056" +
    "\uffc3\113\uffc3\114\uffc3\115\uffc3\134\uffc3\150\uffc3\215\uffc3" +
    "\220\uffc3\243\uffc3\314\uffc3\u010c\uffc3\u0111\uffc3\001\002\000" +
    "\004\u0111\uffc1\001\002\000\004\u010f\u01c0\001\002\000\040" +
    "\046\uffe1\052\uffe1\056\uffe1\113\uffe1\114\uffe1\115\uffe1\134" +
    "\uffe1\150\uffe1\215\uffe1\220\uffe1\243\uffe1\314\uffe1\u010c\uffe1" +
    "\u0110\uffe1\u0111\uffe1\001\002\000\014\052\ufefa\056\ufefa\115" +
    "\ufefa\243\ufefa\314\ufefa\001\002\000\010\126\307\212\310" +
    "\u0110\ufef3\001\002\000\004\u0110\312\001\002\000\006\u010c" +
    "\ufed9\u0111\ufed9\001\002\000\022\052\ufef9\115\ufef9\132\275" +
    "\150\276\243\ufef9\314\ufef9\u010e\200\u0127\201\001\002\000" +
    "\004\u0111\u01c7\001\002\000\010\237\u01c9\325\uff2b\u010b\uff2b" +
    "\001\002\000\006\325\uff2d\u010b\uff2d\001\002\000\004\314" +
    "\u01ca\001\002\000\006\325\uff2c\u010b\uff2c\001\002\000\006" +
    "\u010c\u01c5\u0111\uff1d\001\002\000\004\u0111\uff1e\001\002\000" +
    "\004\132\u01ce\001\002\000\006\u010e\200\u0127\201\001\002" +
    "\000\004\237\u01d0\001\002\000\006\u010e\200\u0127\201\001" +
    "\002\000\004\u0110\u01d3\001\002\000\014\237\uff30\304\uff30" +
    "\323\u01de\325\uff30\u010b\uff30\001\002\000\006\u010e\200\u0127" +
    "\201\001\002\000\002\001\002\000\004\u0111\u01d6\001\002" +
    "\000\014\237\uff35\304\uff35\323\uff35\325\uff35\u010b\uff35\001" +
    "\002\000\006\u010c\u01d8\u0111\uff32\001\002\000\006\u010e\200" +
    "\u0127\201\001\002\000\004\u0111\uff34\001\002\000\002\001" +
    "\002\000\006\u010c\u01d8\u0111\uff32\001\002\000\004\u0111\uff33" +
    "\001\002\000\012\237\uff9f\304\u01e0\325\uff9f\u010b\uff9f\001" +
    "\002\000\002\001\002\000\012\237\uff31\304\uff31\325\uff31" +
    "\u010b\uff31\001\002\000\040\215\u0101\220\uff7d\326\uff7d\327" +
    "\uff7d\330\uff7d\331\uff7d\332\uff7d\u010e\uff7d\u0110\u0103\u0117\uff7d" +
    "\u0124\uff7d\u0127\uff7d\u0129\uff7d\u012a\uff7d\u012b\uff7d\001\002\000" +
    "\010\237\u01e2\325\uff2e\u010b\uff2e\001\002\000\006\u010e\200" +
    "\u0127\201\001\002\000\006\325\uff38\u010b\uff38\001\002\000" +
    "\004\u0110\u01e5\001\002\000\006\u010e\200\u0127\201\001\002" +
    "\000\004\u0111\u01e7\001\002\000\006\325\uff2f\u010b\uff2f\001" +
    "\002\000\010\237\uffa0\325\uffa0\u010b\uffa0\001\002\000\006" +
    "\325\uff5e\u010b\uff5e\001\002\000\012\134\uff5a\237\u01ec\325" +
    "\uff5a\u010b\uff5a\001\002\000\006\325\uff5d\u010b\uff5d\001\002" +
    "\000\006\314\u01f1\u0110\uff56\001\002\000\010\134\u01ef\325" +
    "\uff58\u010b\uff58\001\002\000\006\325\uff5c\u010b\uff5c\001\002" +
    "\000\006\u010e\200\u0127\201\001\002\000\006\325\uff59\u010b" +
    "\uff59\001\002\000\004\u0110\uff57\001\002\000\004\u0110\u01f4" +
    "\001\002\000\012\134\uff54\325\uff54\u010b\uff54\u010c\u021f\001" +
    "\002\000\006\372\u01f8\373\u01f7\001\002\000\010\134\uff5b" +
    "\325\uff5b\u010b\uff5b\001\002\000\004\u0123\u01f9\001\002\000" +
    "\004\u0123\uff51\001\002\000\004\u0123\uff52\001\002\000\004" +
    "\u0124\u01fa\001\002\000\004\u010c\u01fb\001\002\000\006\040" +
    "\u01fe\371\u01fc\001\002\000\004\u0123\uff50\001\002\000\004" +
    "\u0123\u01ff\001\002\000\004\u0123\uff4f\001\002\000\004\u0124" +
    "\u0200\001\002\000\006\u010c\u0201\u0111\uff4d\001\002\000\010" +
    "\374\u020a\375\u0208\376\u0206\001\002\000\004\u0111\u0203\001" +
    "\002\000\012\134\uff53\325\uff53\u010b\uff53\u010c\uff53\001\002" +
    "\000\006\u010c\uff4c\u0111\uff4c\001\002\000\006\u010c\u0201\u0111" +
    "\uff4d\001\002\000\004\u0123\u0219\001\002\000\006\u010c\uff4b" +
    "\u0111\uff4b\001\002\000\004\u0123\u0213\001\002\000\006\u010c" +
    "\uff4a\u0111\uff4a\001\002\000\004\u0123\u020b\001\002\000\004" +
    "\u012b\u020c\001\002\000\016\333\u0210\334\u0211\335\u020f\336" +
    "\u0212\u010c\uff47\u0111\uff47\001\002\000\006\u010c\uff48\u0111\uff48" +
    "\001\002\000\006\u010c\uff49\u0111\uff49\001\002\000\006\u010c" +
    "\uff43\u0111\uff43\001\002\000\006\u010c\uff46\u0111\uff46\001\002" +
    "\000\006\u010c\uff44\u0111\uff44\001\002\000\006\u010c\uff45\u0111" +
    "\uff45\001\002\000\004\u012b\u0214\001\002\000\020\333\u0210" +
    "\334\u0211\335\u020f\336\u0212\377\u0218\u010c\uff3e\u0111\uff3e\001" +
    "\002\000\006\u010c\uff42\u0111\uff42\001\002\000\006\u010c\uff40" +
    "\u0111\uff40\001\002\000\006\u010c\uff41\u0111\uff41\001\002\000" +
    "\006\u010c\uff3f\u0111\uff3f\001\002\000\004\u012b\u021a\001\002" +
    "\000\020\333\u0210\334\u0211\335\u020f\336\u0212\u010a\u021d\u010c" +
    "\uff3a\u0111\uff3a\001\002\000\006\u010c\uff3c\u0111\uff3c\001\002" +
    "\000\006\u010c\uff3d\u0111\uff3d\001\002\000\006\u010c\uff3b\u0111" +
    "\uff3b\001\002\000\004\u0111\uff4e\001\002\000\004\u0110\u01f4" +
    "\001\002\000\010\134\uff55\325\uff55\u010b\uff55\001\002\000" +
    "\004\002\001\001\002\000\016\002\ufffe\003\017\167\014" +
    "\230\025\257\021\263\016\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0221\000\034\002\006\003\005\005\010\006\017\027" +
    "\014\137\023\273\021\302\012\304\022\306\004\352\011" +
    "\u0101\007\u0109\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\140\253\141\262\142\245\166\247\167\261" +
    "\170\256\176\250\324\252\352\246\001\001\000\002\001" +
    "\001\000\016\030\163\031\156\033\170\035\164\036\162" +
    "\040\167\001\001\000\004\010\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\031\u0104\025\u0106\030\u0108" +
    "\027\001\001\000\006\024\060\u0102\071\001\001\000\002" +
    "\001\001\000\004\u0107\037\001\001\000\002\001\001\000" +
    "\004\u0105\032\001\001\000\002\001\001\000\004\021\034" +
    "\001\001\000\004\u0105\035\001\001\000\002\001\001\000" +
    "\010\021\031\u0104\025\u0108\040\001\001\000\002\001\001" +
    "\000\004\u0107\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0103\135\001\001\000\004\024\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\310\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\310\106\001\001\000\002\001\001\000\004\310" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\310\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\310\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0103\123\001" +
    "\001\000\002\001\001\000\006\021\133\120\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\310" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\310\142\001\001\000\002\001\001\000\004\310\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\310\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\155\003\005\005\010" +
    "\006\017\027\014\137\023\273\021\302\012\304\022\306" +
    "\004\352\011\u0101\007\u0109\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\173\271" +
    "\237\001\001\000\006\020\173\271\226\001\001\000\006" +
    "\020\173\271\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\173\271\216\001\001" +
    "\000\006\020\173\271\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\175\014\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\207\001\001\000\004\032\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\175\014\205\001\001\000\004" +
    "\032\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\211\012\212\001\001\000\004\013\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\215\001" +
    "\001\000\002\001\001\000\006\011\211\012\217\001\001" +
    "\000\004\034\220\001\001\000\002\001\001\000\006\011" +
    "\211\012\222\001\001\000\004\034\223\001\001\000\002" +
    "\001\001\000\004\011\225\001\001\000\002\001\001\000" +
    "\006\011\227\041\230\001\001\000\002\001\001\000\004" +
    "\042\232\001\001\000\006\011\227\041\233\001\001\000" +
    "\002\001\001\000\004\042\234\001\001\000\002\001\001" +
    "\000\006\011\175\014\236\001\001\000\002\001\001\000" +
    "\004\011\240\001\001\000\004\037\242\001\001\000\004" +
    "\011\243\001\001\000\002\001\001\000\004\037\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u01e9\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u01e8" +
    "\001\001\000\002\001\001\000\004\226\u01cc\001\001\000" +
    "\006\011\175\014\266\001\001\000\006\011\211\012\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\276\201\273\206\270\224\277\236" +
    "\271\244\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\202\u01c5\001\001\000\004\011" +
    "\u01c1\001\001\000\004\011\u01c0\001\001\000\010\022\u0170" +
    "\023\u016f\024\u016e\001\001\000\004\237\303\001\001\000" +
    "\004\200\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\226\305\001\001\000\004\240" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\312\001\001\000\004\076\313\001" +
    "\001\000\004\243\314\001\001\000\002\001\001\000\004" +
    "\011\316\001\001\000\004\076\317\001\001\000\004\243" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\226\323\001\001\000\004\240\324\001\001\000\002\001" +
    "\001\000\004\241\326\001\001\000\002\001\001\000\004" +
    "\011\330\001\001\000\004\242\331\001\001\000\002\001" +
    "\001\000\004\011\333\001\001\000\004\242\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\211\012" +
    "\337\001\001\000\004\230\341\001\001\000\004\011\373" +
    "\001\001\000\004\231\343\001\001\000\004\232\361\001" +
    "\001\000\004\200\346\001\001\000\004\203\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\204\354\001\001" +
    "\000\004\205\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\233\372" +
    "\001\001\000\004\231\371\001\001\000\004\233\363\001" +
    "\001\000\002\001\001\000\004\234\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\377\061" +
    "\u0101\001\001\000\022\011\u0112\016\u0110\021\u010d\046\u010c" +
    "\050\u0116\052\u0114\053\u0113\063\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\377\061\u0103\001\001" +
    "\000\002\001\001\000\006\062\u0105\066\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\377\061\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\056\u0142\064\u014d\065\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u013d" +
    "\001\001\000\002\001\001\000\004\051\u0136\001\001\000" +
    "\006\062\u0135\066\u0107\001\001\000\004\047\u012e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\u0112\016\u0110\021\u010d\046\u0128\050\u0116\052\u0114" +
    "\053\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\u0112\016\u0120\054\u011f\310\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\u0112\016\u0120\054\u0127\310" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\u0112\016\u0120\054\u012b\310\u0122\001" +
    "\001\000\002\001\001\000\012\011\u0112\016\u0120\054\u012d" +
    "\310\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\u0112\016\u0110\021\u010d\050\u0133\052\u0114\053\u0113" +
    "\001\001\000\016\011\u0112\016\u0110\021\u010d\050\u0131\052" +
    "\u0114\053\u0113\001\001\000\004\047\u0132\001\001\000\002" +
    "\001\001\000\004\047\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\u0112\016\u0110" +
    "\021\u010d\052\u013b\053\u0113\001\001\000\014\011\u0112\016" +
    "\u0110\021\u010d\052\u0139\053\u0113\001\001\000\004\051\u013a" +
    "\001\001\000\002\001\001\000\004\051\u013c\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\175\014\u013f" +
    "\001\001\000\002\001\001\000\012\011\u0112\016\u0120\054" +
    "\u0141\310\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\u0112\016\u0110\021\u010d\046\u015b\050\u0116\052" +
    "\u0114\053\u0113\001\001\000\020\011\u0112\016\u0110\021\u010d" +
    "\046\u015a\050\u0116\052\u0114\053\u0113\001\001\000\020\011" +
    "\u0112\016\u0110\021\u010d\046\u0159\050\u0116\052\u0114\053\u0113" +
    "\001\001\000\020\011\u0112\016\u0110\021\u010d\046\u0158\050" +
    "\u0116\052\u0114\053\u0113\001\001\000\020\011\u0112\016\u0110" +
    "\021\u010d\046\u0157\050\u0116\052\u0114\053\u0113\001\001\000" +
    "\020\011\u0112\016\u0110\021\u010d\046\u0156\050\u0116\052\u0114" +
    "\053\u0113\001\001\000\020\011\u0112\016\u0110\021\u010d\046" +
    "\u0155\050\u0116\052\u0114\053\u0113\001\001\000\020\011\u0112" +
    "\016\u0110\021\u010d\046\u0154\050\u0116\052\u0114\053\u0113\001" +
    "\001\000\020\011\u0112\016\u0110\021\u010d\046\u0153\050\u0116" +
    "\052\u0114\053\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\u0112\016\u0110\021\u010d\046\u0152\050\u0116" +
    "\052\u0114\053\u0113\001\001\000\004\056\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u016a\001" +
    "\001\000\002\001\001\000\020\011\u0112\016\u0110\021\u010d" +
    "\046\u015f\050\u0116\052\u0114\053\u0113\001\001\000\002\001" +
    "\001\000\020\011\u0112\016\u0110\021\u010d\046\u0161\050\u0116" +
    "\052\u0114\053\u0113\001\001\000\002\001\001\000\020\011" +
    "\u0112\016\u0110\021\u010d\046\u0163\050\u0116\052\u0114\053\u0113" +
    "\001\001\000\004\055\u0165\001\001\000\020\011\u0112\016" +
    "\u0110\021\u010d\046\u0167\050\u0116\052\u0114\053\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\u016c\001\001\000\002\001\001\000\004\024" +
    "\u01be\001\001\000\002\001\001\000\004\025\u01b8\001\001" +
    "\000\004\207\u0172\001\001\000\004\011\u01b6\001\001\000" +
    "\012\214\u017a\215\u0179\217\u0178\224\u0176\001\001\000\004" +
    "\213\u01b2\001\001\000\006\223\u01b1\224\u0185\001\001\000" +
    "\004\011\u019d\001\001\000\010\225\u019b\227\u018d\235\u0189" +
    "\001\001\000\002\001\001\000\004\220\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\212\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\221\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\223\u0186\224" +
    "\u0185\001\001\000\010\225\u0187\227\u018d\235\u0189\001\001" +
    "\000\002\001\001\000\006\223\u019a\224\u0185\001\001\000" +
    "\004\200\u0196\001\001\000\004\226\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\211\012\u018f\001\001\000\004\230\u0190" +
    "\001\001\000\004\231\u0191\001\001\000\004\200\u0192\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\377\061" +
    "\u0198\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\223\u019c\224\u0185\001\001\000\002\001" +
    "\001\000\004\222\u019f\001\001\000\004\216\u01a3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\210\u01a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\213\u01ac\001\001\000\004\200" +
    "\u01a8\001\001\000\004\212\u01a9\001\001\000\006\223\u01aa" +
    "\224\u0185\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\200" +
    "\u01b3\001\001\000\004\212\u01b4\001\001\000\006\223\u01b5" +
    "\224\u0185\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u01bb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\226\u01c2\001\001\000\004\240\u01c3\001" +
    "\001\000\002\001\001\000\016\011\276\201\u01ca\206\270" +
    "\224\277\236\271\244\272\001\001\000\002\001\001\000" +
    "\004\177\u01c7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\202\u01cb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u01ce\001\001\000\002" +
    "\001\001\000\006\011\175\014\u01d0\001\001\000\004\171" +
    "\u01d1\001\001\000\004\174\u01dc\001\001\000\006\011\u01d3" +
    "\172\u01d4\001\001\000\004\076\u01d6\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\173\u01d8\001\001\000\004" +
    "\011\u01d9\001\001\000\002\001\001\000\004\076\u01da\001" +
    "\001\000\004\173\u01db\001\001\000\002\001\001\000\004" +
    "\070\u01e0\001\001\000\004\111\u01de\001\001\000\002\001" +
    "\001\000\006\056\377\061\u01e7\001\001\000\004\175\u01e2" +
    "\001\001\000\004\011\u01e3\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01e5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\143\u01ea\144\u01ec\001\001\000\002\001\001\000\004" +
    "\146\u01f1\001\001\000\004\145\u01ed\001\001\000\002\001" +
    "\001\000\004\011\u01ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\147\u01f4\150\u01f2\001\001\000\002\001" +
    "\001\000\004\151\u01f5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\152\u01fc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\153\u0201\001\001\000\012\155\u0204\156\u0203" +
    "\161\u0206\164\u0208\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\153\u021d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\157\u020d" +
    "\160\u020c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\162\u0214\001\001\000\006\160\u0215\163" +
    "\u0216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\160" +
    "\u021a\165\u021b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\147\u021f\150" +
    "\u01f2\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\u0222\003\005\005\010\006\017\027\014\137\023\273" +
    "\021\302\012\304\022\306\004\352\011\u0101\007\u0109\003" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Er = "";
    private Symbol s;    

    public Symbol getS(){
    	return this.s;
    }

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol s){
  	this.s=s; 
 	List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens (" + idsNames.toString() + ")\n\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens (" + idsNames.toString() + ")\n\n");   
    }
    
    public String symbl_name_from_id(int id){
	Field[] fields = getSymbolContainer().getFields();
	for(Field f : fields){
            try {
		if (f.getInt(null)==id)
                    return f.getName();
            } catch (IllegalArgumentException e) {
                //e.printStackTrace();
            } catch (IllegalAccessException e) {
                //e.printStackTrace();
            }
	}
	return "invalid symbol id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	int parse_state = ((Symbol)stack.peek()).parse_state ;
	short[] row = action_tab[parse_state];
	for (int i = 0; i<row.length; i+=2){
	    if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
	}
	return ret;
    }
    
    private boolean validate_expected_symbol(int id){
	short lhs,rhs_size;
	int act;
	try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;){
                /* look up the action from the current state (on top of stack) */
		act = get_action(vstack.top(), id);

                /* if its an error, we fail */
		if (act == 0) return false;

                /* > 0 encodes a shift */
		if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);
                    /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
		}
                    /* < 0 encodes a reduce */
		else{
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

		    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
		}
            }
	} catch (Exception e) {
            e.printStackTrace();
	}
	return true;
    }

    protected static final int _error_sync_size(){
	return 1;
    }

    public String obtenerErrores(){
        return Er;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // Use ::= USE Identificador 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            TablaSimbolos.cerrarAmbitoActual();
            RESULT = new SimboloTabla(); 
            RESULT.setNombre(e.toString());           
            RESULT.setTipoDeclaracion("Ambito");
            TablaSimbolos.nuevoAmbito(e.toString());
            RESULT.setAmbito(TablaSimbolos.getAmbitoActual());
            TablaSimbolos.add(RESULT);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Use",263, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // DeclareDefinition7 ::= DeclareDefinition3 DeclareDefinition1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition7",262, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DeclareDefinition6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition6",261, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // DeclareDefinition6 ::= Coma DeclareDefinition7 DeclareDefinition6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition6",261, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DeclareDefinition5 ::= DeclareDefinition7 DeclareDefinition6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition5",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // DeclareDefinition4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition4",259, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DeclareDefinition4 ::= Coma Var DeclareDefinition4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition4",259, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // DeclareDefinition3 ::= Var DeclareDefinition4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition3",258, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // DeclareDefinition2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition2",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // DeclareDefinition2 ::= Igual InsertTipo1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition2",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // DeclareDefinition1 ::= TipoDeDato3 DeclareDefinition2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition1",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // DeclareDefinition1 ::= AS TipoDeDato3 DeclareDefinition2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition1",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // DeclareDefinition ::= DECLARE DeclareDefinition5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // IndexTabla ::= INDEX ID ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexTabla",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ConstraintTabla5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla5",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ConstraintTabla5 ::= Coma ID OrderBy2 ConstraintTabla5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla5",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ConstraintTabla4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla4",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ConstraintTabla4 ::= Coma ID ConstraintTabla4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla4",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ConstraintTabla3 ::= Aparentesis ID ConstraintTabla4 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla3",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ConstraintTabla2 ::= Aparentesis ID OrderBy2 ConstraintTabla5 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla2",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ConstraintTabla1 ::= CHECK TableElement1 Aparentesis Condicion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ConstraintTabla1 ::= FOREIGN KEY ConstraintTabla3 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 TableElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ConstraintTabla1 ::= UNIQUE ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ConstraintTabla1 ::= PRIMARY KEY ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ConstraintTabla ::= ConstraintColumna1 ConstraintTabla1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ConstraintColumna10 ::= UNIQUE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna10",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ConstraintColumna10 ::= PRIMARY KEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna10",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ConstraintColumna9 ::= DEFAULT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna9",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ConstraintColumna9 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna9",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ConstraintColumna8 ::= SET ConstraintColumna9 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna8",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ConstraintColumna8 ::= CASCADE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna8",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ConstraintColumna7 ::= UPDATE ConstraintColumna8 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna7",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ConstraintColumna7 ::= DELETE ConstraintColumna8 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna7",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ConstraintColumna6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna6",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ConstraintColumna6 ::= ON ConstraintColumna7 ConstraintColumna6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna6",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ConstraintColumna5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna5",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ConstraintColumna5 ::= Aparentesis ID Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna5",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ConstraintColumna4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna4",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ConstraintColumna4 ::= FOREIGN KEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna4",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ConstraintColumna3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ConstraintColumna3 ::= NONCLUSTERED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ConstraintColumna3 ::= CLUSTERED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ConstraintColumna2 ::= CHECK TableElement1 Aparentesis Condicion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ConstraintColumna2 ::= ConstraintColumna4 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 TableElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ConstraintColumna2 ::= ConstraintColumna10 ConstraintColumna3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ConstraintColumna1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna1",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ConstraintColumna1 ::= CONSTRAINT ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna1",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ConstraintColumna ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ConstraintColumna ::= ConstraintColumna1 ConstraintColumna2 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // DefinicionColumna12 ::= DEFAULT DefinicionColumna8 DefinicionColumna2 TableElement1 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna12",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // DefinicionColumna11 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // DefinicionColumna11 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // DefinicionColumna11 ::= NOT NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // DefinicionColumna10 ::= FOR REPLICATION DefinicionColumna11 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna10",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // DefinicionColumna10 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna10",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // DefinicionColumna9 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna9",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // DefinicionColumna9 ::= NOT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna9",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // DefinicionColumna8 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // DefinicionColumna8 ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // DefinicionColumna8 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // DefinicionColumna8 ::= Float 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // DefinicionColumna8 ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // DefinicionColumna7 ::= ConstraintColumna1 ConstraintColumna2 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // DefinicionColumna7 ::= ROWGUIDCOL ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // DefinicionColumna7 ::= DefinicionColumna9 DefinicionColumna10 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // DefinicionColumna7 ::= IDENTITY DefinicionColumna5 TableElement1 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // DefinicionColumna6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // DefinicionColumna6 ::= DefinicionColumna7 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // DefinicionColumna6 ::= CONSTRAINT ID DefinicionColumna12 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // DefinicionColumna5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna5",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // DefinicionColumna5 ::= Aparentesis Bit Coma Bit Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna5",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // DefinicionColumna4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna4",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // DefinicionColumna4 ::= ROWGUIDCOL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna4",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // DefinicionColumna3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // DefinicionColumna3 ::= NOT NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // DefinicionColumna3 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // DefinicionColumna2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna2",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // DefinicionColumna2 ::= IDENTITY DefinicionColumna5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna2",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // DefinicionColumna1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna1",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // DefinicionColumna1 ::= COLLATE ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna1",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // DefinicionColumna ::= ID TipoDeDato DefinicionColumna1 DefinicionColumna6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TableElement3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement3",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TableElement3 ::= Coma TableElement2 TableElement3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement3",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TableElement2 ::= IndexTabla 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TableElement2 ::= ConstraintTabla 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TableElement2 ::= DefinicionColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TableElement6 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement6",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TableElement5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TableElement5 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TableElement5 ::= NOT TableElement6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TableElement4 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement4",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TableElement4 ::= FOR REPLICATION TableElement5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement4",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TableElement1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TableElement1 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TableElement1 ::= NOT TableElement4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TableOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableOption",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TableOption ::= ON PRIMARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableOption",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateTable ::= TABLE IDL3 Aparentesis TableElement2 TableElement3 Cparentesis TableOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OnOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOption",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OnOption ::= ON ID Aparentesis ID Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOption",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // IndexInclude ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexInclude",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // IndexInclude ::= INCLUDE ListaColumnas 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexInclude",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // IndexColumna2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna2",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // IndexColumna2 ::= Coma ID OrderBy2 IndexColumna2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna2",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // IndexColumna1 ::= ID OrderBy2 IndexColumna2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna1",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // IndexColumna ::= Aparentesis IndexColumna1 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CreateIndex1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex1",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CreateIndex1 ::= UNIQUE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex1",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // CreateIndex ::= CreateIndex1 ConstraintColumna3 INDEX ID ON IDL3 IndexColumna IndexInclude Where OnOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CreateView ::= VIEW IDL1 AS Select 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FileGrowth1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FileGrowth1 ::= Porce 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FileGrowth1 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FileGrowth ::= FILEGROWTH Igual Integer FileGrowth1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MaxSize2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // MaxSize2 ::= UNLIMITED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // MaxSize2 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MaxSize1 ::= Integer MaxSize2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize1",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // MaxSize ::= MAXSIZE Igual MaxSize1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Size2 ::= TB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Size2 ::= GB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Size2 ::= MB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Size2 ::= KB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Size1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size1",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Size1 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size1",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Size ::= SIZE Igual Integer Size1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DefinitionOption ::= FileGrowth 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DefinitionOption ::= MaxSize 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DefinitionOption ::= Size 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DefinitionOptions ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOptions",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DefinitionOptions ::= Coma DefinitionOption DefinitionOptions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOptions",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FileName ::= FILE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileName",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FileName ::= FILENAME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileName",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DefinitionName ::= NAMES 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionName",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DefinitionName ::= NAME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionName",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Definition ::= Aparentesis DefinitionName Igual Varchar Coma FileName Igual Varchar DefinitionOptions Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definition",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Definitions ::= Definition 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definitions",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Definitions ::= Definition Coma Definitions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definitions",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Primary ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Primary ::= PRIMARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CollateDataBase ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CollateDataBase",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CollateDataBase ::= COLLATE ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CollateDataBase",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CreateDataBase2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase2",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CreateDataBase2 ::= ON Primary Definitions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase2",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CreateDataBase1 ::= CreateDataBase2 CollateDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase1",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CreateDataBase ::= DATABASE ID CreateDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CreateUser ::= USER ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Create1 ::= CreateIndex 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Create1 ::= CreateView 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Create1 ::= CreateUser 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Create1 ::= CreateDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Create1 ::= CreateTable 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Create1 ::= Function 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Create1 ::= Procedure 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Create ::= CREATE Create1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // AlterTableDrop5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop5",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // AlterTableDrop5 ::= IFExists 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop5",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DropIndex2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DropIndex2 ::= Coma DropIndex1 DropIndex2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DropIndex1 ::= ID ON IDL3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex1",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DropIndex ::= INDEX AlterTableDrop5 DropIndex1 DropIndex2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DropDataBase1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase1",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DropDataBase1 ::= Coma ID DropDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase1",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DropDataBase ::= DATABASE AlterTableDrop5 ID DropDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DropUser ::= USER AlterTableDrop5 ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DropView1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DropView1 ::= Coma IDL1 DropView1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DropView ::= VIEW AlterTableDrop5 IDL1 DropView1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DropTable1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable1",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DropTable1 ::= Coma IDL3 DropTable1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable1",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DropTable ::= TABLE AlterTableDrop5 IDL3 DropTable1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DropOptions ::= DropIndex 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DropOptions ::= DropDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DropOptions ::= DropView 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DropOptions ::= DropUser 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DropOptions ::= DropTable 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Drop ::= DROP DropOptions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Not ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Not ::= NOT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Operaciones ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Operaciones ::= Coma Operacion Operaciones 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Operacion6 ::= Mul Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion6",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Operacion6 ::= Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion6",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Operacion6 ::= IDL5 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion6",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Operacion5 ::= COUNT Aparentesis Operacion6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Operacion5 ::= MAX Aparentesis Operacion6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Operacion5 ::= MIN Aparentesis Operacion6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Operacion5 ::= AVG Aparentesis Operacion6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Operacion5 ::= SUM Aparentesis Operacion6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Operacion5 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Operacion5 ::= Var 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Operacion5 ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Operacion5 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Operacion5 ::= Float 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Operacion5 ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Operacion5 ::= IDL5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Operacion3 ::= Operacion5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion3",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Operacion3 ::= Aparentesis Operacion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion3",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Operacion4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Operacion4 ::= Div Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Operacion4 ::= Mul Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Operacion1 ::= Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion1",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Operacion2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Operacion2 ::= Resta Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Operacion2 ::= Suma Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Operacion ::= Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AsElement1 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AsElement1 ::= ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AsElement ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AsElement ::= AsElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AsElement ::= AS AsElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Where ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Where ::= WHERE Condicion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Condicion5 ::= OR 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion5",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condicion5 ::= AND 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion5",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LikeOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LikeOption",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LikeOption ::= Porce 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LikeOption",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condicion4 ::= Not LIKE LikeOption Varchar LikeOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condicion4 ::= Not BETWEEN Operacion AND Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Condicion4 ::= Not IN Aparentesis Operacion Operaciones Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Condicion3 ::= Condicion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condicion3 ::= IS Not NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condicion3 ::= Igual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condicion3 ::= Exclamacion Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condicion3 ::= Dbarra Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condicion3 ::= Dampersand Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion3 ::= Diferente Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condicion3 ::= Digual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Condicion3 ::= MayorIgual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condicion3 ::= Mayor Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condicion3 ::= MenorIgual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion3 ::= Menor Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion2 ::= Operacion Condicion3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condicion1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion1 ::= Condicion5 Condicion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Not Condicion2 Condicion1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= Aparentesis Condicion Cparentesis Condicion1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InsertTipo1 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InsertTipo1 ::= Var 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InsertTipo1 ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InsertTipo1 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InsertTipo1 ::= Float 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InsertTipo1 ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsertTipo1 ::= DEFAULT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TipoDeDato4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato4",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TipoDeDato4 ::= Coma Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato4",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TipoDeDato2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TipoDeDato2 ::= Aparentesis Integer TipoDeDato4 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TipoDeDato3 ::= VARBINARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TipoDeDato3 ::= IMAGE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TipoDeDato3 ::= BINARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TipoDeDato3 ::= NVARCHAR Aparentesis MAX Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TipoDeDato3 ::= NVARCHAR Aparentesis Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TipoDeDato3 ::= NTEXT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TipoDeDato3 ::= NCHAR Aparentesis Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TipoDeDato3 ::= VARCHAR Aparentesis MAX Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TipoDeDato3 ::= VARCHAR Aparentesis Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TipoDeDato3 ::= TEXT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TipoDeDato3 ::= CHAR Aparentesis Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoDeDato3 ::= TIME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TipoDeDato3 ::= SMALLDATETIME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TipoDeDato3 ::= DATETIMEOFFSET 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TipoDeDato3 ::= DATETIME2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TipoDeDato3 ::= DATETIME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TipoDeDato3 ::= DATE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TipoDeDato3 ::= REAL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TipoDeDato3 ::= FLOAT Aparentesis Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TipoDeDato3 ::= FLOAT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TipoDeDato3 ::= SMALLMONEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoDeDato3 ::= NUMERIC Aparentesis Number Coma Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoDeDato3 ::= MONEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoDeDato3 ::= DECIMAL Aparentesis Number Coma Number Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoDeDato3 ::= BIT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TipoDeDato3 ::= TINYINT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TipoDeDato3 ::= SMALLINT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoDeDato3 ::= INT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TipoDeDato3 ::= BIGINT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoDeDato1 ::= Acorchete TipoDeDato3 Ccorchete 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato1",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TipoDeDato1 ::= TipoDeDato3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato1",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoDeDato ::= TipoDeDato1 TipoDeDato2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Var ::= Arroba Identificador 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
          if(!TablaSimbolos.buscarIdentificador(e.toString(), "Variable")){
            RESULT = new SimboloTabla(); 
            RESULT.setNombre(e.toString());
            RESULT.setAmbito(TablaSimbolos.getAmbitoActual());
            RESULT.setTipoDeclaracion("Variable");
            TablaSimbolos.add(RESULT);
          } 
          else{
            
          }          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFExists ::= IF EXISTS 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFExists",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDL6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL6",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDL6 ::= Punto IDL3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL6",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDL5 ::= ID IDL6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL5",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDL4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL4",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDL4 ::= Punto IDL1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL4",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDL3 ::= ID IDL4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL3",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDL2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDL2 ::= Punto ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDL1 ::= ID IDL2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL1",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ID ::= Identificador 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID ::= Acorchete Identificador Ccorchete 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Fin ::= GO 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Fin",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Fin ::= PuntoYComa 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Fin",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentenciasTCL ::= Save 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SentenciasTCL ::= Commit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SentenciasTCL ::= Rollback 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SentenciasTCL ::= Transact 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SentenciasDDL ::= Drop 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasDDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SentenciasDDL ::= Create 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasDDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inicio2 ::= Use 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inicio2 ::= DeclareDefinition 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inicio2 ::= Function 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio2 ::= SentenciasTCL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inicio2 ::= SentenciasDDL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio1 ::= error Fin Inicio1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio1 ::= Inicio2 Fin Inicio1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla start_val = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

