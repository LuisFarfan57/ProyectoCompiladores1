
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 20 21:23:54 CST 2019
//----------------------------------------------------

package AnalisiSemanticoSQL;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 20 21:23:54 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\004\000\002\013\004\000\002\013\002\000" +
    "\002\014\004\000\002\015\004\000\002\015\002\000\002" +
    "\020\004\000\002\303\003\000\002\303\003\000\002\021" +
    "\004\000\002\u0107\003\000\002\u0108\003\000\002\u0108\005" +
    "\000\002\u010a\003\000\002\u010a\003\000\002\u010a\003\000" +
    "\002\u010a\003\000\002\u010a\003\000\002\u010a\010\000\002" +
    "\u010a\003\000\002\u010a\010\000\002\u010a\003\000\002\u010a" +
    "\003\000\002\u010a\006\000\002\u010a\003\000\002\u010a\003" +
    "\000\002\u010a\003\000\002\u010a\003\000\002\u010a\003\000" +
    "\002\u010a\003\000\002\u010a\003\000\002\u010a\006\000\002" +
    "\u010a\003\000\002\u010a\006\000\002\u010a\006\000\002\u010a" +
    "\006\000\002\u010a\003\000\002\u010a\006\000\002\u010a\006" +
    "\000\002\u010a\003\000\002\u010a\003\000\002\u010a\003\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\054\006\000\002\054\005\000\002\055\004" +
    "\000\002\055\002\000\002\056\004\000\002\057\004\000" +
    "\002\057\004\000\002\057\004\000\002\057\004\000\002" +
    "\057\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\004\000\002\057\004\000\002\057\004\000\002\057\005" +
    "\000\002\057\003\000\002\060\010\000\002\060\007\000" +
    "\002\060\007\000\002\062\003\000\002\062\002\000\002" +
    "\061\003\000\002\061\003\000\002\063\004\000\002\063" +
    "\002\000\002\037\004\000\002\037\003\000\002\037\002" +
    "\000\002\040\003\000\002\040\003\000\002\041\004\000" +
    "\002\042\005\000\002\042\005\000\002\042\002\000\002" +
    "\043\004\000\002\044\005\000\002\044\005\000\002\044" +
    "\002\000\002\045\005\000\002\045\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\050\005\000\002\050\002\000\002\051\003\000\002\051" +
    "\002\000\002\022\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\006\000\002\025\005\000\002\025\002\000\002" +
    "\026\006\000\002\027\005\000\002\027\002\000\002\030" +
    "\005\000\002\031\006\000\002\032\005\000\002\032\002" +
    "\000\002\033\006\000\002\034\005\000\002\035\005\000" +
    "\002\035\002\000\002\264\003\000\002\264\002\000\002" +
    "\132\004\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\133\003" +
    "\000\002\133\003\000\002\134\004\000\002\135\005\000" +
    "\002\136\004\000\002\137\005\000\002\137\002\000\002" +
    "\140\004\000\002\140\002\000\002\141\003\000\002\141" +
    "\002\000\002\142\005\000\002\142\003\000\002\143\014" +
    "\000\002\144\003\000\002\144\003\000\002\145\003\000" +
    "\002\145\003\000\002\146\005\000\002\146\002\000\002" +
    "\150\003\000\002\150\003\000\002\150\003\000\002\151" +
    "\006\000\002\152\003\000\002\152\002\000\002\153\003" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\154\005\000\002\155\004\000\002\156\003\000\002" +
    "\156\003\000\002\156\002\000\002\157\006\000\002\160" +
    "\003\000\002\160\003\000\002\160\002\000\002\161\006" +
    "\000\002\162\014\000\002\163\003\000\002\163\002\000" +
    "\002\164\005\000\002\165\005\000\002\166\006\000\002" +
    "\166\002\000\002\167\004\000\002\167\002\000\002\170" +
    "\007\000\002\170\002\000\002\171\011\000\002\172\004" +
    "\000\002\172\002\000\002\173\004\000\002\173\003\000" +
    "\002\173\002\000\002\176\005\000\002\176\003\000\002" +
    "\177\004\000\002\177\003\000\002\177\002\000\002\200" +
    "\003\000\002\174\003\000\002\174\003\000\002\174\003" +
    "\000\002\175\005\000\002\175\002\000\002\201\006\000" +
    "\002\202\004\000\002\202\002\000\002\203\004\000\002" +
    "\203\002\000\002\204\003\000\002\204\004\000\002\204" +
    "\002\000\002\205\003\000\002\205\002\000\002\206\007" +
    "\000\002\206\002\000\002\207\005\000\002\207\003\000" +
    "\002\207\002\000\002\210\007\000\002\210\006\000\002" +
    "\210\004\000\002\210\005\000\002\211\003\000\002\211" +
    "\003\000\002\211\003\000\002\211\003\000\002\211\003" +
    "\000\002\212\003\000\002\212\002\000\002\213\003\000" +
    "\002\213\005\000\002\214\004\000\002\214\003\000\002" +
    "\214\002\000\002\215\010\000\002\216\005\000\002\216" +
    "\002\000\002\217\004\000\002\217\002\000\002\220\004" +
    "\000\002\220\010\000\002\220\007\000\002\221\003\000" +
    "\002\221\003\000\002\221\002\000\002\222\004\000\002" +
    "\222\002\000\002\223\005\000\002\223\002\000\002\224" +
    "\005\000\002\224\002\000\002\225\004\000\002\225\004" +
    "\000\002\226\003\000\002\226\004\000\002\227\003\000" +
    "\002\227\003\000\002\230\004\000\002\230\003\000\002" +
    "\231\004\000\002\232\006\000\002\232\005\000\002\232" +
    "\012\000\002\232\007\000\002\233\007\000\002\234\006" +
    "\000\002\235\005\000\002\235\002\000\002\236\006\000" +
    "\002\236\002\000\002\237\006\000\002\374\004\000\002" +
    "\375\005\000\002\375\004\000\002\376\004\000\002\376" +
    "\002\000\002\377\004\000\002\u0101\004\000\002\u0102\005" +
    "\000\002\u0102\002\000\002\u0105\006\000\002\u0106\003\000" +
    "\002\u0106\003\000\002\u0106\003\000\002\u0104\004\000\002" +
    "\266\005\000\002\267\004\000\002\267\002\000\002\270" +
    "\005\000\002\270\002\000\002\271\003\000\002\271\002" +
    "\000\002\272\003\000\002\272\003\000\002\273\003\000" +
    "\002\273\003\000\002\274\003\000\002\274\003\000\002" +
    "\274\002\000\002\275\005\000\002\276\003\000\002\276" +
    "\002\000\002\277\004\000\002\300\004\000\002\300\002" +
    "\000\002\301\005\000\002\302\004\000\002\302\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0218\000\026\002\ufffe\003\023\065\017\106\015\122" +
    "\006\142\016\167\020\230\030\257\025\263\022\001\002" +
    "\000\006\325\ufff9\u010b\ufff9\001\002\000\006\325\ufff3\u010b" +
    "\ufff3\001\002\000\006\216\u0204\221\u0202\001\002\000\006" +
    "\325\156\u010b\154\001\002\000\004\002\u0216\001\002\000" +
    "\006\325\ufffa\u010b\ufffa\001\002\000\006\325\ufffd\u010b\ufffd" +
    "\001\002\000\006\325\ufffb\u010b\ufffb\001\002\000\006\325" +
    "\ufff5\u010b\ufff5\001\002\000\006\216\u0204\221\u0202\001\002" +
    "\000\012\216\u0204\221\u0202\325\ufec4\u010b\ufec4\001\002\000" +
    "\006\216\u0204\221\u0202\001\002\000\022\126\uff43\132\uff43" +
    "\174\261\212\uff43\217\254\243\257\262\256\273\260\001" +
    "\002\000\006\325\ufff7\u010b\ufff7\001\002\000\014\132\162" +
    "\174\170\217\161\262\163\273\167\001\002\000\006\325" +
    "\156\u010b\154\001\002\000\006\325\ufffc\u010b\ufffc\001\002" +
    "\000\004\u0127\153\001\002\000\006\325\ufff6\u010b\ufff6\001" +
    "\002\000\006\325\ufff4\u010b\ufff4\001\002\000\004\u0117\033" +
    "\001\002\000\006\325\ufff8\u010b\ufff8\001\002\000\006\325" +
    "\ufee5\u010b\ufee5\001\002\000\004\u0127\152\001\002\000\070" +
    "\051\060\337\051\340\045\341\064\342\074\344\050\345" +
    "\042\346\071\347\055\350\062\351\073\352\053\353\046" +
    "\354\054\355\043\356\066\357\065\360\052\361\072\362" +
    "\061\363\056\364\076\365\075\366\044\367\047\370\063" +
    "\u0129\070\001\002\000\072\051\ufedd\337\ufedd\340\ufedd\341" +
    "\ufedd\342\ufedd\344\ufedd\345\ufedd\346\ufedd\347\ufedd\350\ufedd" +
    "\351\ufedd\352\ufedd\353\ufedd\354\ufedd\355\ufedd\356\ufedd\357" +
    "\ufedd\360\ufedd\361\ufedd\362\ufedd\363\ufedd\364\ufedd\365\ufedd" +
    "\366\ufedd\367\ufedd\370\ufedd\u010c\036\u0129\ufedd\001\002\000" +
    "\004\u0117\033\001\002\000\070\051\ufedf\337\ufedf\340\ufedf" +
    "\341\ufedf\342\ufedf\344\ufedf\345\ufedf\346\ufedf\347\ufedf\350" +
    "\ufedf\351\ufedf\352\ufedf\353\ufedf\354\ufedf\355\ufedf\356\ufedf" +
    "\357\ufedf\360\ufedf\361\ufedf\362\ufedf\363\ufedf\364\ufedf\365" +
    "\ufedf\366\ufedf\367\ufedf\370\ufedf\u0129\ufedf\001\002\000\072" +
    "\051\ufedd\337\ufedd\340\ufedd\341\ufedd\342\ufedd\344\ufedd\345" +
    "\ufedd\346\ufedd\347\ufedd\350\ufedd\351\ufedd\352\ufedd\353\ufedd" +
    "\354\ufedd\355\ufedd\356\ufedd\357\ufedd\360\ufedd\361\ufedd\362" +
    "\ufedd\363\ufedd\364\ufedd\365\ufedd\366\ufedd\367\ufedd\370\ufedd" +
    "\u010c\036\u0129\ufedd\001\002\000\070\051\ufede\337\ufede\340" +
    "\ufede\341\ufede\342\ufede\344\ufede\345\ufede\346\ufede\347\ufede" +
    "\350\ufede\351\ufede\352\ufede\353\ufede\354\ufede\355\ufede\356" +
    "\ufede\357\ufede\360\ufede\361\ufede\362\ufede\363\ufede\364\ufede" +
    "\365\ufede\366\ufede\367\ufede\370\ufede\u0129\ufede\001\002\000" +
    "\046\046\uffdb\052\uffdb\056\uffdb\113\uffdb\114\uffdb\115\uffdb" +
    "\134\uffdb\150\uffdb\215\uffdb\220\uffdb\243\uffdb\314\uffdb\325" +
    "\uffdb\u010b\uffdb\u010c\uffdb\u010f\uffdb\u0111\uffdb\u0123\uffdb\001\002" +
    "\000\046\046\uffd2\052\uffd2\056\uffd2\113\uffd2\114\uffd2\115" +
    "\uffd2\134\uffd2\150\uffd2\215\uffd2\220\uffd2\243\uffd2\314\uffd2" +
    "\325\uffd2\u010b\uffd2\u010c\uffd2\u010f\uffd2\u0111\uffd2\u0123\uffd2\001" +
    "\002\000\046\046\uffc7\052\uffc7\056\uffc7\113\uffc7\114\uffc7" +
    "\115\uffc7\134\uffc7\150\uffc7\215\uffc7\220\uffc7\243\uffc7\314" +
    "\uffc7\325\uffc7\u010b\uffc7\u010c\uffc7\u010f\uffc7\u0111\uffc7\u0123\uffc7" +
    "\001\002\000\046\046\uffe0\052\uffe0\056\uffe0\113\uffe0\114" +
    "\uffe0\115\uffe0\134\uffe0\150\uffe0\215\uffe0\220\uffe0\243\uffe0" +
    "\314\uffe0\325\uffe0\u010b\uffe0\u010c\uffe0\u010f\uffe0\u0111\uffe0\u0123" +
    "\uffe0\001\002\000\046\046\uffd4\052\uffd4\056\uffd4\113\uffd4" +
    "\114\uffd4\115\uffd4\134\uffd4\150\uffd4\215\uffd4\220\uffd4\243" +
    "\uffd4\314\uffd4\325\uffd4\u010b\uffd4\u010c\uffd4\u010f\uffd4\u0111\uffd4" +
    "\u0123\uffd4\001\002\000\046\046\uffc6\052\uffc6\056\uffc6\113" +
    "\uffc6\114\uffc6\115\uffc6\134\uffc6\150\uffc6\215\uffc6\220\uffc6" +
    "\243\uffc6\314\uffc6\325\uffc6\u010b\uffc6\u010c\uffc6\u010f\uffc6\u0111" +
    "\uffc6\u0123\uffc6\001\002\000\004\u0110\145\001\002\000\046" +
    "\046\uffe1\052\uffe1\056\uffe1\113\uffe1\114\uffe1\115\uffe1\134" +
    "\uffe1\150\uffe1\215\uffe1\220\uffe1\243\uffe1\314\uffe1\325\uffe1" +
    "\u010b\uffe1\u010c\uffe1\u010f\uffe1\u0111\uffe1\u0123\uffe1\001\002\000" +
    "\004\u0110\142\001\002\000\046\046\uffd5\052\uffd5\056\uffd5" +
    "\113\uffd5\114\uffd5\115\uffd5\134\uffd5\150\uffd5\215\uffd5\220" +
    "\uffd5\243\uffd5\314\uffd5\325\uffd5\u010b\uffd5\u010c\uffd5\u010f\uffd5" +
    "\u0111\uffd5\u0123\uffd5\001\002\000\046\046\uffd3\052\uffd3\056" +
    "\uffd3\113\uffd3\114\uffd3\115\uffd3\134\uffd3\150\uffd3\215\uffd3" +
    "\220\uffd3\243\uffd3\314\uffd3\325\uffd3\u010b\uffd3\u010c\uffd3\u010f" +
    "\uffd3\u0111\uffd3\u0123\uffd3\001\002\000\046\046\uffd9\052\uffd9" +
    "\056\uffd9\113\uffd9\114\uffd9\115\uffd9\134\uffd9\150\uffd9\215" +
    "\uffd9\220\uffd9\243\uffd9\314\uffd9\325\uffd9\u010b\uffd9\u010c\uffd9" +
    "\u010f\uffd9\u0111\uffd9\u0123\uffd9\001\002\000\004\u0110\137\001" +
    "\002\000\010\325\ufee1\u010b\ufee1\u0123\125\001\002\000\066" +
    "\337\051\340\045\341\064\342\074\344\050\345\042\346" +
    "\071\347\055\350\062\351\073\352\053\353\046\354\054" +
    "\355\043\356\066\357\065\360\052\361\072\362\061\363" +
    "\056\364\076\365\075\366\044\367\047\370\063\u0129\070" +
    "\001\002\000\004\u0110\116\001\002\000\050\046\uffd8\052" +
    "\uffd8\056\uffd8\113\uffd8\114\uffd8\115\uffd8\134\uffd8\150\uffd8" +
    "\215\uffd8\220\uffd8\243\uffd8\314\uffd8\325\uffd8\u010b\uffd8\u010c" +
    "\uffd8\u010f\uffd8\u0110\113\u0111\uffd8\u0123\uffd8\001\002\000\046" +
    "\046\uffc5\052\uffc5\056\uffc5\113\uffc5\114\uffc5\115\uffc5\134" +
    "\uffc5\150\uffc5\215\uffc5\220\uffc5\243\uffc5\314\uffc5\325\uffc5" +
    "\u010b\uffc5\u010c\uffc5\u010f\uffc5\u0111\uffc5\u0123\uffc5\001\002\000" +
    "\046\046\uffdf\052\uffdf\056\uffdf\113\uffdf\114\uffdf\115\uffdf" +
    "\134\uffdf\150\uffdf\215\uffdf\220\uffdf\243\uffdf\314\uffdf\325" +
    "\uffdf\u010b\uffdf\u010c\uffdf\u010f\uffdf\u0111\uffdf\u0123\uffdf\001\002" +
    "\000\046\046\uffd0\052\uffd0\056\uffd0\113\uffd0\114\uffd0\115" +
    "\uffd0\134\uffd0\150\uffd0\215\uffd0\220\uffd0\243\uffd0\314\uffd0" +
    "\325\uffd0\u010b\uffd0\u010c\uffd0\u010f\uffd0\u0111\uffd0\u0123\uffd0\001" +
    "\002\000\046\046\uffd1\052\uffd1\056\uffd1\113\uffd1\114\uffd1" +
    "\115\uffd1\134\uffd1\150\uffd1\215\uffd1\220\uffd1\243\uffd1\314" +
    "\uffd1\325\uffd1\u010b\uffd1\u010c\uffd1\u010f\uffd1\u0111\uffd1\u0123\uffd1" +
    "\001\002\000\006\325\ufee0\u010b\ufee0\001\002\000\046\046" +
    "\uffdd\052\uffdd\056\uffdd\113\uffdd\114\uffdd\115\uffdd\134\uffdd" +
    "\150\uffdd\215\uffdd\220\uffdd\243\uffdd\314\uffdd\325\uffdd\u010b" +
    "\uffdd\u010c\uffdd\u010f\uffdd\u0111\uffdd\u0123\uffdd\001\002\000\004" +
    "\u0110\106\001\002\000\046\046\uffce\052\uffce\056\uffce\113" +
    "\uffce\114\uffce\115\uffce\134\uffce\150\uffce\215\uffce\220\uffce" +
    "\243\uffce\314\uffce\325\uffce\u010b\uffce\u010c\uffce\u010f\uffce\u0111" +
    "\uffce\u0123\uffce\001\002\000\046\046\uffd6\052\uffd6\056\uffd6" +
    "\113\uffd6\114\uffd6\115\uffd6\134\uffd6\150\uffd6\215\uffd6\220" +
    "\uffd6\243\uffd6\314\uffd6\325\uffd6\u010b\uffd6\u010c\uffd6\u010f\uffd6" +
    "\u0111\uffd6\u0123\uffd6\001\002\000\046\046\uffde\052\uffde\056" +
    "\uffde\113\uffde\114\uffde\115\uffde\134\uffde\150\uffde\215\uffde" +
    "\220\uffde\243\uffde\314\uffde\325\uffde\u010b\uffde\u010c\uffde\u010f" +
    "\uffde\u0111\uffde\u0123\uffde\001\002\000\004\u0110\077\001\002" +
    "\000\046\046\uffca\052\uffca\056\uffca\113\uffca\114\uffca\115" +
    "\uffca\134\uffca\150\uffca\215\uffca\220\uffca\243\uffca\314\uffca" +
    "\325\uffca\u010b\uffca\u010c\uffca\u010f\uffca\u0111\uffca\u0123\uffca\001" +
    "\002\000\010\331\103\u0129\102\u012d\100\001\002\000\006" +
    "\u010c\uffe7\u0111\uffe7\001\002\000\004\u0111\105\001\002\000" +
    "\006\u010c\uffe6\u0111\uffe6\001\002\000\004\u0111\104\001\002" +
    "\000\046\046\uffc8\052\uffc8\056\uffc8\113\uffc8\114\uffc8\115" +
    "\uffc8\134\uffc8\150\uffc8\215\uffc8\220\uffc8\243\uffc8\314\uffc8" +
    "\325\uffc8\u010b\uffc8\u010c\uffc8\u010f\uffc8\u0111\uffc8\u0123\uffc8\001" +
    "\002\000\046\046\uffc9\052\uffc9\056\uffc9\113\uffc9\114\uffc9" +
    "\115\uffc9\134\uffc9\150\uffc9\215\uffc9\220\uffc9\243\uffc9\314" +
    "\uffc9\325\uffc9\u010b\uffc9\u010c\uffc9\u010f\uffc9\u0111\uffc9\u0123\uffc9" +
    "\001\002\000\006\u0129\102\u012d\100\001\002\000\004\u010c" +
    "\110\001\002\000\006\u0129\102\u012d\100\001\002\000\004" +
    "\u0111\112\001\002\000\046\046\uffda\052\uffda\056\uffda\113" +
    "\uffda\114\uffda\115\uffda\134\uffda\150\uffda\215\uffda\220\uffda" +
    "\243\uffda\314\uffda\325\uffda\u010b\uffda\u010c\uffda\u010f\uffda\u0111" +
    "\uffda\u0123\uffda\001\002\000\006\u0129\102\u012d\100\001\002" +
    "\000\004\u0111\115\001\002\000\046\046\uffd7\052\uffd7\056" +
    "\uffd7\113\uffd7\114\uffd7\115\uffd7\134\uffd7\150\uffd7\215\uffd7" +
    "\220\uffd7\243\uffd7\314\uffd7\325\uffd7\u010b\uffd7\u010c\uffd7\u010f" +
    "\uffd7\u0111\uffd7\u0123\uffd7\001\002\000\010\331\120\u0129\102" +
    "\u012d\100\001\002\000\004\u0111\122\001\002\000\004\u0111" +
    "\121\001\002\000\046\046\uffcc\052\uffcc\056\uffcc\113\uffcc" +
    "\114\uffcc\115\uffcc\134\uffcc\150\uffcc\215\uffcc\220\uffcc\243" +
    "\uffcc\314\uffcc\325\uffcc\u010b\uffcc\u010c\uffcc\u010f\uffcc\u0111\uffcc" +
    "\u0123\uffcc\001\002\000\046\046\uffcd\052\uffcd\056\uffcd\113" +
    "\uffcd\114\uffcd\115\uffcd\134\uffcd\150\uffcd\215\uffcd\220\uffcd" +
    "\243\uffcd\314\uffcd\325\uffcd\u010b\uffcd\u010c\uffcd\u010f\uffcd\u0111" +
    "\uffcd\u0123\uffcd\001\002\000\010\325\ufee1\u010b\ufee1\u0123\125" +
    "\001\002\000\006\325\ufee4\u010b\ufee4\001\002\000\020\220" +
    "\130\233\131\u0117\033\u0124\132\u0129\133\u012c\126\u012d\127" +
    "\001\002\000\006\325\uffc2\u010b\uffc2\001\002\000\006\325" +
    "\uffc3\u010b\uffc3\001\002\000\006\325\uffbe\u010b\uffbe\001\002" +
    "\000\006\325\uffc4\u010b\uffc4\001\002\000\006\325\uffc1\u010b" +
    "\uffc1\001\002\000\006\325\uffc0\u010b\uffc0\001\002\000\006" +
    "\325\uffbf\u010b\uffbf\001\002\000\006\325\ufee2\u010b\ufee2\001" +
    "\002\000\006\325\ufee3\u010b\ufee3\001\002\000\006\u0129\102" +
    "\u012d\100\001\002\000\004\u0111\141\001\002\000\046\046" +
    "\uffcb\052\uffcb\056\uffcb\113\uffcb\114\uffcb\115\uffcb\134\uffcb" +
    "\150\uffcb\215\uffcb\220\uffcb\243\uffcb\314\uffcb\325\uffcb\u010b" +
    "\uffcb\u010c\uffcb\u010f\uffcb\u0111\uffcb\u0123\uffcb\001\002\000\006" +
    "\u0129\102\u012d\100\001\002\000\004\u0111\144\001\002\000" +
    "\046\046\uffcf\052\uffcf\056\uffcf\113\uffcf\114\uffcf\115\uffcf" +
    "\134\uffcf\150\uffcf\215\uffcf\220\uffcf\243\uffcf\314\uffcf\325" +
    "\uffcf\u010b\uffcf\u010c\uffcf\u010f\uffcf\u0111\uffcf\u0123\uffcf\001\002" +
    "\000\006\u0129\102\u012d\100\001\002\000\004\u010c\147\001" +
    "\002\000\006\u0129\102\u012d\100\001\002\000\004\u0111\151" +
    "\001\002\000\046\046\uffdc\052\uffdc\056\uffdc\113\uffdc\114" +
    "\uffdc\115\uffdc\134\uffdc\150\uffdc\215\uffdc\220\uffdc\243\uffdc" +
    "\314\uffdc\325\uffdc\u010b\uffdc\u010c\uffdc\u010f\uffdc\u0111\uffdc\u0123" +
    "\uffdc\001\002\000\156\042\uffe5\051\uffe5\070\uffe5\127\uffe5" +
    "\151\uffe5\170\uffe5\215\uffe5\237\uffe5\264\uffe5\312\uffe5\325" +
    "\uffe5\337\uffe5\340\uffe5\341\uffe5\342\uffe5\344\uffe5\345\uffe5" +
    "\346\uffe5\347\uffe5\350\uffe5\351\uffe5\352\uffe5\353\uffe5\354" +
    "\uffe5\355\uffe5\356\uffe5\357\uffe5\360\uffe5\361\uffe5\362\uffe5" +
    "\363\uffe5\364\uffe5\365\uffe5\366\uffe5\367\uffe5\370\uffe5\u0106" +
    "\uffe5\u0107\uffe5\u0108\uffe5\u0109\uffe5\u010b\uffe5\u010c\uffe5\u0111\uffe5" +
    "\u011a\uffe5\u011b\uffe5\u011c\uffe5\u011d\uffe5\u011e\uffe5\u011f\uffe5\u0120" +
    "\uffe5\u0121\uffe5\u0122\uffe5\u0123\uffe5\u0129\uffe5\001\002\000\006" +
    "\325\ufed8\u010b\ufed8\001\002\000\026\002\ufff2\003\ufff2\065" +
    "\ufff2\106\ufff2\122\ufff2\142\ufff2\167\ufff2\230\ufff2\257\ufff2" +
    "\263\ufff2\001\002\000\026\002\ufffe\003\023\065\017\106" +
    "\015\122\006\142\016\167\020\230\030\257\025\263\022" +
    "\001\002\000\026\002\ufff1\003\ufff1\065\ufff1\106\ufff1\122" +
    "\ufff1\142\ufff1\167\ufff1\230\ufff1\257\ufff1\263\ufff1\001\002" +
    "\000\004\002\uffff\001\002\000\006\325\uff88\u010b\uff88\001" +
    "\002\000\010\124\174\u010e\uff74\u0127\uff74\001\002\000\010" +
    "\124\174\u010e\uff74\u0127\uff74\001\002\000\010\124\174\u010e" +
    "\uff74\u0127\uff74\001\002\000\006\325\uff85\u010b\uff85\001\002" +
    "\000\006\325\uff89\u010b\uff89\001\002\000\006\325\uff87\u010b" +
    "\uff87\001\002\000\010\124\174\u010e\uff74\u0127\uff74\001\002" +
    "\000\010\124\174\u010e\uff74\u0127\uff74\001\002\000\006\325" +
    "\uff84\u010b\uff84\001\002\000\006\325\uff86\u010b\uff86\001\002" +
    "\000\006\u010e\201\u0127\202\001\002\000\004\316\176\001" +
    "\002\000\006\u010e\uff75\u0127\uff75\001\002\000\006\u010e\uffe8" +
    "\u0127\uffe8\001\002\000\072\042\uffe9\070\uffe9\127\uffe9\151" +
    "\uffe9\170\uffe9\215\uffe9\237\uffe9\264\uffe9\325\uffe9\u0106\uffe9" +
    "\u0107\uffe9\u0108\uffe9\u0109\uffe9\u010b\uffe9\u010c\uffe9\u010d\212\u0110" +
    "\uffe9\u0111\uffe9\u011a\uffe9\u011b\uffe9\u011c\uffe9\u011d\uffe9\u011e\uffe9" +
    "\u011f\uffe9\u0120\uffe9\u0121\uffe9\u0122\uffe9\u0123\uffe9\001\002\000" +
    "\010\325\uff81\u010b\uff81\u010c\206\001\002\000\004\u0127\203" +
    "\001\002\000\220\042\uffef\046\uffef\051\uffef\052\uffef\056" +
    "\uffef\070\uffef\113\uffef\114\uffef\115\uffef\126\uffef\127\uffef" +
    "\134\uffef\150\uffef\151\uffef\170\uffef\212\uffef\215\uffef\220" +
    "\uffef\233\uffef\237\uffef\243\uffef\264\uffef\312\uffef\314\uffef" +
    "\325\uffef\337\uffef\340\uffef\341\uffef\342\uffef\344\uffef\345" +
    "\uffef\346\uffef\347\uffef\350\uffef\351\uffef\352\uffef\353\uffef" +
    "\354\uffef\355\uffef\356\uffef\357\uffef\360\uffef\361\uffef\362" +
    "\uffef\363\uffef\364\uffef\365\uffef\366\uffef\367\uffef\370\uffef" +
    "\u0106\uffef\u0107\uffef\u0108\uffef\u0109\uffef\u010b\uffef\u010c\uffef\u010d" +
    "\uffef\u010e\uffef\u0110\uffef\u0111\uffef\u011a\uffef\u011b\uffef\u011c\uffef" +
    "\u011d\uffef\u011e\uffef\u011f\uffef\u0120\uffef\u0121\uffef\u0122\uffef\u0123" +
    "\uffef\u0129\uffef\001\002\000\004\u010f\204\001\002\000\220" +
    "\042\ufff0\046\ufff0\051\ufff0\052\ufff0\056\ufff0\070\ufff0\113" +
    "\ufff0\114\ufff0\115\ufff0\126\ufff0\127\ufff0\134\ufff0\150\ufff0" +
    "\151\ufff0\170\ufff0\212\ufff0\215\ufff0\220\ufff0\233\ufff0\237" +
    "\ufff0\243\ufff0\264\ufff0\312\ufff0\314\ufff0\325\ufff0\337\ufff0" +
    "\340\ufff0\341\ufff0\342\ufff0\344\ufff0\345\ufff0\346\ufff0\347" +
    "\ufff0\350\ufff0\351\ufff0\352\ufff0\353\ufff0\354\ufff0\355\ufff0" +
    "\356\ufff0\357\ufff0\360\ufff0\361\ufff0\362\ufff0\363\ufff0\364" +
    "\ufff0\365\ufff0\366\ufff0\367\ufff0\370\ufff0\u0106\ufff0\u0107\ufff0" +
    "\u0108\ufff0\u0109\ufff0\u010b\ufff0\u010c\ufff0\u010d\ufff0\u010e\ufff0\u0110" +
    "\ufff0\u0111\ufff0\u011a\ufff0\u011b\ufff0\u011c\ufff0\u011d\ufff0\u011e\ufff0" +
    "\u011f\ufff0\u0120\ufff0\u0121\ufff0\u0122\ufff0\u0123\ufff0\u0129\ufff0\001" +
    "\002\000\006\325\uff83\u010b\uff83\001\002\000\006\u010e\201" +
    "\u0127\202\001\002\000\010\325\uff81\u010b\uff81\u010c\206\001" +
    "\002\000\006\325\uff82\u010b\uff82\001\002\000\070\042\uffeb" +
    "\070\uffeb\127\uffeb\151\uffeb\170\uffeb\215\uffeb\237\uffeb\264" +
    "\uffeb\325\uffeb\u0106\uffeb\u0107\uffeb\u0108\uffeb\u0109\uffeb\u010b\uffeb" +
    "\u010c\uffeb\u0110\uffeb\u0111\uffeb\u011a\uffeb\u011b\uffeb\u011c\uffeb\u011d" +
    "\uffeb\u011e\uffeb\u011f\uffeb\u0120\uffeb\u0121\uffeb\u0122\uffeb\u0123\uffeb" +
    "\001\002\000\006\u010e\201\u0127\202\001\002\000\112\042" +
    "\uffec\051\uffec\052\uffec\056\uffec\070\uffec\115\uffec\127\uffec" +
    "\150\uffec\151\uffec\170\uffec\215\uffec\220\uffec\237\uffec\243" +
    "\uffec\264\uffec\314\uffec\325\uffec\u0106\uffec\u0107\uffec\u0108\uffec" +
    "\u0109\uffec\u010b\uffec\u010c\uffec\u010d\216\u0110\uffec\u0111\uffec\u011a" +
    "\uffec\u011b\uffec\u011c\uffec\u011d\uffec\u011e\uffec\u011f\uffec\u0120\uffec" +
    "\u0121\uffec\u0122\uffec\u0123\uffec\001\002\000\070\042\uffea\070" +
    "\uffea\127\uffea\151\uffea\170\uffea\215\uffea\237\uffea\264\uffea" +
    "\325\uffea\u0106\uffea\u0107\uffea\u0108\uffea\u0109\uffea\u010b\uffea\u010c" +
    "\uffea\u0110\uffea\u0111\uffea\u011a\uffea\u011b\uffea\u011c\uffea\u011d\uffea" +
    "\u011e\uffea\u011f\uffea\u0120\uffea\u0121\uffea\u0122\uffea\u0123\uffea\001" +
    "\002\000\110\042\uffee\051\uffee\052\uffee\056\uffee\070\uffee" +
    "\115\uffee\127\uffee\150\uffee\151\uffee\170\uffee\215\uffee\220" +
    "\uffee\237\uffee\243\uffee\264\uffee\314\uffee\325\uffee\u0106\uffee" +
    "\u0107\uffee\u0108\uffee\u0109\uffee\u010b\uffee\u010c\uffee\u0110\uffee\u0111" +
    "\uffee\u011a\uffee\u011b\uffee\u011c\uffee\u011d\uffee\u011e\uffee\u011f\uffee" +
    "\u0120\uffee\u0121\uffee\u0122\uffee\u0123\uffee\001\002\000\006\u010e" +
    "\201\u0127\202\001\002\000\110\042\uffed\051\uffed\052\uffed" +
    "\056\uffed\070\uffed\115\uffed\127\uffed\150\uffed\151\uffed\170" +
    "\uffed\215\uffed\220\uffed\237\uffed\243\uffed\264\uffed\314\uffed" +
    "\325\uffed\u0106\uffed\u0107\uffed\u0108\uffed\u0109\uffed\u010b\uffed\u010c" +
    "\uffed\u0110\uffed\u0111\uffed\u011a\uffed\u011b\uffed\u011c\uffed\u011d\uffed" +
    "\u011e\uffed\u011f\uffed\u0120\uffed\u0121\uffed\u0122\uffed\u0123\uffed\001" +
    "\002\000\006\u010e\201\u0127\202\001\002\000\010\325\uff7e" +
    "\u010b\uff7e\u010c\223\001\002\000\006\325\uff80\u010b\uff80\001" +
    "\002\000\006\u010e\201\u0127\202\001\002\000\010\325\uff7e" +
    "\u010b\uff7e\u010c\223\001\002\000\006\325\uff7f\u010b\uff7f\001" +
    "\002\000\006\u010e\201\u0127\202\001\002\000\006\325\uff7d" +
    "\u010b\uff7d\001\002\000\006\u010e\201\u0127\202\001\002\000" +
    "\004\237\237\001\002\000\010\325\uff76\u010b\uff76\u010c\233" +
    "\001\002\000\006\u010e\201\u0127\202\001\002\000\006\325" +
    "\uff79\u010b\uff79\001\002\000\010\325\uff76\u010b\uff76\u010c\233" +
    "\001\002\000\006\325\uff77\u010b\uff77\001\002\000\006\u010e" +
    "\201\u0127\202\001\002\000\010\325\uff78\u010b\uff78\u010c\uff78" +
    "\001\002\000\006\u010e\201\u0127\202\001\002\000\010\325" +
    "\uff7a\u010b\uff7a\u010c\243\001\002\000\006\u010e\201\u0127\202" +
    "\001\002\000\006\325\uff7c\u010b\uff7c\001\002\000\010\325" +
    "\uff7a\u010b\uff7a\u010c\243\001\002\000\006\325\uff7b\u010b\uff7b" +
    "\001\002\000\006\325\uff6f\u010b\uff6f\001\002\000\006\325" +
    "\uff71\u010b\uff71\001\002\000\006\325\uff6d\u010b\uff6d\001\002" +
    "\000\006\325\uff70\u010b\uff70\001\002\000\006\325\uff72\u010b" +
    "\uff72\001\002\000\006\u010e\201\u0127\202\001\002\000\006" +
    "\325\uff73\u010b\uff73\001\002\000\006\u010e\201\u0127\202\001" +
    "\002\000\010\126\uff44\132\uff44\212\uff44\001\002\000\006" +
    "\u010e\201\u0127\202\001\002\000\006\u010e\201\u0127\202\001" +
    "\002\000\010\126\267\132\uff00\212\266\001\002\000\006" +
    "\325\uff6c\u010b\uff6c\001\002\000\006\325\uff6e\u010b\uff6e\001" +
    "\002\000\004\132\270\001\002\000\026\052\uff01\056\uff01" +
    "\115\uff01\132\uff01\150\uff01\243\uff01\314\uff01\u010c\uff01\u0110" +
    "\uff01\u0111\uff01\001\002\000\026\052\uff02\056\uff02\115\uff02" +
    "\132\uff02\150\uff02\243\uff02\314\uff02\u010c\uff02\u0110\uff02\u0111" +
    "\uff02\001\002\000\006\u010e\201\u0127\202\001\002\000\004" +
    "\237\272\001\002\000\006\u010e\201\u0127\202\001\002\000" +
    "\004\u0110\275\001\002\000\014\237\uff3d\304\uff3d\323\310" +
    "\325\uff3d\u010b\uff3d\001\002\000\006\u010e\201\u0127\202\001" +
    "\002\000\002\001\002\000\004\u0111\300\001\002\000\014" +
    "\237\uff42\304\uff42\323\uff42\325\uff42\u010b\uff42\001\002\000" +
    "\006\u010c\302\u0111\uff3f\001\002\000\006\u010e\201\u0127\202" +
    "\001\002\000\004\u0111\uff41\001\002\000\002\001\002\000" +
    "\006\u010c\302\u0111\uff3f\001\002\000\004\u0111\uff40\001\002" +
    "\000\012\237\uffa4\304\312\325\uffa4\u010b\uffa4\001\002\000" +
    "\002\001\002\000\012\237\uff3e\304\uff3e\325\uff3e\u010b\uff3e" +
    "\001\002\000\026\215\323\220\uff8a\u010e\uff8a\u0110\325\u0117" +
    "\uff8a\u0124\uff8a\u0127\uff8a\u0129\uff8a\u012c\uff8a\u012d\uff8a\001\002" +
    "\000\010\237\314\325\uff3b\u010b\uff3b\001\002\000\006\u010e" +
    "\201\u0127\202\001\002\000\006\325\uff45\u010b\uff45\001\002" +
    "\000\004\u0110\317\001\002\000\006\u010e\201\u0127\202\001" +
    "\002\000\004\u0111\321\001\002\000\006\325\uff3c\u010b\uff3c" +
    "\001\002\000\024\220\341\u010e\201\u0110\335\u0117\033\u0124" +
    "\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002\000\032" +
    "\070\uff8b\127\uff8b\170\uff8b\220\uff8b\u010e\uff8b\u0110\uff8b\u0117" +
    "\uff8b\u0124\uff8b\u0127\uff8b\u0129\uff8b\u012c\uff8b\u012d\uff8b\001\002" +
    "\000\010\237\uffa5\325\uffa5\u010b\uffa5\001\002\000\026\215" +
    "\323\220\uff8a\u010e\uff8a\u0110\325\u0117\uff8a\u0124\uff8a\u0127\uff8a" +
    "\u0129\uff8a\u012c\uff8a\u012d\uff8a\001\002\000\004\u0111\327\001" +
    "\002\000\016\042\331\237\uffba\264\333\325\uffba\u010b\uffba" +
    "\u0111\uffba\001\002\000\012\237\uffbd\325\uffbd\u010b\uffbd\u0111" +
    "\uffbd\001\002\000\026\215\uffa7\220\uffa7\u010e\uffa7\u0110\uffa7" +
    "\u0117\uffa7\u0124\uffa7\u0127\uffa7\u0129\uffa7\u012c\uffa7\u012d\uffa7\001" +
    "\002\000\026\215\323\220\uff8a\u010e\uff8a\u0110\325\u0117\uff8a" +
    "\u0124\uff8a\u0127\uff8a\u0129\uff8a\u012c\uff8a\u012d\uff8a\001\002\000" +
    "\026\215\uffa6\220\uffa6\u010e\uffa6\u0110\uffa6\u0117\uffa6\u0124\uffa6" +
    "\u0127\uffa6\u0129\uffa6\u012c\uffa6\u012d\uffa6\001\002\000\012\237" +
    "\uffbb\325\uffbb\u010b\uffbb\u0111\uffbb\001\002\000\024\220\341" +
    "\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c" +
    "\337\u012d\340\001\002\000\066\042\uff94\070\uff94\127\uff94" +
    "\151\uff94\170\uff94\215\uff94\237\uff94\264\uff94\325\uff94\u0106" +
    "\uff94\u0107\uff94\u0108\uff94\u0109\uff94\u010b\uff94\u010c\uff94\u0111\uff94" +
    "\u011a\uff94\u011b\uff94\u011c\uff94\u011d\uff94\u011e\uff94\u011f\uff94\u0120" +
    "\uff94\u0121\uff94\u0122\uff94\u0123\uff94\001\002\000\066\042\uff92" +
    "\070\uff92\127\uff92\151\uff92\170\uff92\215\uff92\237\uff92\264" +
    "\uff92\325\uff92\u0106\uff92\u0107\uff92\u0108\uff92\u0109\uff92\u010b\uff92" +
    "\u010c\uff92\u0111\uff92\u011a\uff92\u011b\uff92\u011c\uff92\u011d\uff92\u011e" +
    "\uff92\u011f\uff92\u0120\uff92\u0121\uff92\u0122\uff92\u0123\uff92\001\002" +
    "\000\066\042\uff93\070\uff93\127\uff93\151\uff93\170\uff93\215" +
    "\uff93\237\uff93\264\uff93\325\uff93\u0106\uff93\u0107\uff93\u0108\uff93" +
    "\u0109\uff93\u010b\uff93\u010c\uff93\u0111\uff93\u011a\uff93\u011b\uff93\u011c" +
    "\uff93\u011d\uff93\u011e\uff93\u011f\uff93\u0120\uff93\u0121\uff93\u0122\uff93" +
    "\u0123\uff93\001\002\000\066\042\uff8e\070\uff8e\127\uff8e\151" +
    "\uff8e\170\uff8e\215\uff8e\237\uff8e\264\uff8e\325\uff8e\u0106\uff8e" +
    "\u0107\uff8e\u0108\uff8e\u0109\uff8e\u010b\uff8e\u010c\uff8e\u0111\uff8e\u011a" +
    "\uff8e\u011b\uff8e\u011c\uff8e\u011d\uff8e\u011e\uff8e\u011f\uff8e\u0120\uff8e" +
    "\u0121\uff8e\u0122\uff8e\u0123\uff8e\001\002\000\066\042\uff91\070" +
    "\uff91\127\uff91\151\uff91\170\uff91\215\uff91\237\uff91\264\uff91" +
    "\325\uff91\u0106\uff91\u0107\uff91\u0108\uff91\u0109\uff91\u010b\uff91\u010c" +
    "\uff91\u0111\uff91\u011a\uff91\u011b\uff91\u011c\uff91\u011d\uff91\u011e\uff91" +
    "\u011f\uff91\u0120\uff91\u0121\uff91\u0122\uff91\u0123\uff91\001\002\000" +
    "\066\042\uff90\070\uff90\127\uff90\151\uff90\170\uff90\215\uff90" +
    "\237\uff90\264\uff90\325\uff90\u0106\uff90\u0107\uff90\u0108\uff90\u0109" +
    "\uff90\u010b\uff90\u010c\uff90\u0111\uff90\u011a\uff90\u011b\uff90\u011c\uff90" +
    "\u011d\uff90\u011e\uff90\u011f\uff90\u0120\uff90\u0121\uff90\u0122\uff90\u0123" +
    "\uff90\001\002\000\066\042\uff95\070\uff95\127\uff95\151\uff95" +
    "\170\uff95\215\uff95\237\uff95\264\uff95\325\uff95\u0106\uff95\u0107" +
    "\uff95\u0108\uff95\u0109\uff95\u010b\uff95\u010c\uff95\u0111\uff95\u011a\uff95" +
    "\u011b\uff95\u011c\uff95\u011d\uff95\u011e\uff95\u011f\uff95\u0120\uff95\u0121" +
    "\uff95\u0122\uff95\u0123\uff95\001\002\000\066\042\uff97\070\uff97" +
    "\127\uff97\151\uff97\170\uff97\215\uff97\237\uff97\264\uff97\325" +
    "\uff97\u0106\uff97\u0107\uff97\u0108\u011e\u0109\u011f\u010b\uff97\u010c\uff97" +
    "\u0111\uff97\u011a\uff97\u011b\uff97\u011c\uff97\u011d\uff97\u011e\uff97\u011f" +
    "\uff97\u0120\uff97\u0121\uff97\u0122\uff97\u0123\uff97\001\002\000\040" +
    "\070\uff8a\127\uff8a\151\377\170\uff8a\215\323\u011a\363\u011b" +
    "\364\u011c\370\u011d\367\u011e\366\u011f\372\u0120\365\u0121\373" +
    "\u0122\376\u0123\371\001\002\000\016\042\331\237\uffba\264" +
    "\333\325\uffba\u010b\uffba\u0111\uffba\001\002\000\062\042\uff9b" +
    "\070\uff9b\127\uff9b\151\uff9b\170\uff9b\215\uff9b\237\uff9b\264" +
    "\uff9b\325\uff9b\u0106\354\u0107\353\u010b\uff9b\u010c\uff9b\u0111\uff9b" +
    "\u011a\uff9b\u011b\uff9b\u011c\uff9b\u011d\uff9b\u011e\uff9b\u011f\uff9b\u0120" +
    "\uff9b\u0121\uff9b\u0122\uff9b\u0123\uff9b\001\002\000\066\042\uff8f" +
    "\070\uff8f\127\uff8f\151\uff8f\170\uff8f\215\uff8f\237\uff8f\264" +
    "\uff8f\325\uff8f\u0106\uff8f\u0107\uff8f\u0108\uff8f\u0109\uff8f\u010b\uff8f" +
    "\u010c\uff8f\u0111\uff8f\u011a\uff8f\u011b\uff8f\u011c\uff8f\u011d\uff8f\u011e" +
    "\uff8f\u011f\uff8f\u0120\uff8f\u0121\uff8f\u0122\uff8f\u0123\uff8f\001\002" +
    "\000\056\042\uff9e\070\uff9e\127\uff9e\151\uff9e\170\uff9e\215" +
    "\uff9e\237\uff9e\264\uff9e\325\uff9e\u010b\uff9e\u010c\uff9e\u0111\uff9e" +
    "\u011a\uff9e\u011b\uff9e\u011c\uff9e\u011d\uff9e\u011e\uff9e\u011f\uff9e\u0120" +
    "\uff9e\u0121\uff9e\u0122\uff9e\u0123\uff9e\001\002\000\024\220\341" +
    "\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c" +
    "\337\u012d\340\001\002\000\024\220\341\u010e\201\u0110\335" +
    "\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001" +
    "\002\000\062\042\uff9b\070\uff9b\127\uff9b\151\uff9b\170\uff9b" +
    "\215\uff9b\237\uff9b\264\uff9b\325\uff9b\u0106\354\u0107\353\u010b" +
    "\uff9b\u010c\uff9b\u0111\uff9b\u011a\uff9b\u011b\uff9b\u011c\uff9b\u011d\uff9b" +
    "\u011e\uff9b\u011f\uff9b\u0120\uff9b\u0121\uff9b\u0122\uff9b\u0123\uff9b\001" +
    "\002\000\056\042\uff9d\070\uff9d\127\uff9d\151\uff9d\170\uff9d" +
    "\215\uff9d\237\uff9d\264\uff9d\325\uff9d\u010b\uff9d\u010c\uff9d\u0111" +
    "\uff9d\u011a\uff9d\u011b\uff9d\u011c\uff9d\u011d\uff9d\u011e\uff9d\u011f\uff9d" +
    "\u0120\uff9d\u0121\uff9d\u0122\uff9d\u0123\uff9d\001\002\000\062\042" +
    "\uff9b\070\uff9b\127\uff9b\151\uff9b\170\uff9b\215\uff9b\237\uff9b" +
    "\264\uff9b\325\uff9b\u0106\354\u0107\353\u010b\uff9b\u010c\uff9b\u0111" +
    "\uff9b\u011a\uff9b\u011b\uff9b\u011c\uff9b\u011d\uff9b\u011e\uff9b\u011f\uff9b" +
    "\u0120\uff9b\u0121\uff9b\u0122\uff9b\u0123\uff9b\001\002\000\056\042" +
    "\uff9c\070\uff9c\127\uff9c\151\uff9c\170\uff9c\215\uff9c\237\uff9c" +
    "\264\uff9c\325\uff9c\u010b\uff9c\u010c\uff9c\u0111\uff9c\u011a\uff9c\u011b" +
    "\uff9c\u011c\uff9c\u011d\uff9c\u011e\uff9c\u011f\uff9c\u0120\uff9c\u0121\uff9c" +
    "\u0122\uff9c\u0123\uff9c\001\002\000\012\237\uffbc\325\uffbc\u010b" +
    "\uffbc\u0111\uffbc\001\002\000\010\070\u010e\127\u010d\170\u010c" +
    "\001\002\000\024\220\341\u010e\201\u0110\335\u0117\033\u0124" +
    "\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002\000\024" +
    "\220\341\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129" +
    "\343\u012c\337\u012d\340\001\002\000\024\220\341\u010e\201" +
    "\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d" +
    "\340\001\002\000\024\220\341\u010e\201\u0110\335\u0117\033" +
    "\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002\000" +
    "\024\220\341\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202" +
    "\u0129\343\u012c\337\u012d\340\001\002\000\024\220\341\u010e" +
    "\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337" +
    "\u012d\340\001\002\000\024\220\341\u010e\201\u0110\335\u0117" +
    "\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002" +
    "\000\024\220\341\u010e\201\u0110\335\u0117\033\u0124\342\u0127" +
    "\202\u0129\343\u012c\337\u012d\340\001\002\000\024\220\341" +
    "\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c" +
    "\337\u012d\340\001\002\000\016\042\uffad\237\uffad\264\uffad" +
    "\325\uffad\u010b\uffad\u0111\uffad\001\002\000\016\042\uffb9\237" +
    "\uffb9\264\uffb9\325\uffb9\u010b\uffb9\u0111\uffb9\001\002\000\024" +
    "\220\341\u010e\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129" +
    "\343\u012c\337\u012d\340\001\002\000\006\215\323\220\uff8a" +
    "\001\002\000\004\220\u0101\001\002\000\016\042\uffae\237" +
    "\uffae\264\uffae\325\uffae\u010b\uffae\u0111\uffae\001\002\000\016" +
    "\042\uffb0\237\uffb0\264\uffb0\325\uffb0\u010b\uffb0\u0111\uffb0\001" +
    "\002\000\016\042\uffb1\237\uffb1\264\uffb1\325\uffb1\u010b\uffb1" +
    "\u0111\uffb1\001\002\000\016\042\uffb3\237\uffb3\264\uffb3\325" +
    "\uffb3\u010b\uffb3\u0111\uffb3\001\002\000\016\042\uffaf\237\uffaf" +
    "\264\uffaf\325\uffaf\u010b\uffaf\u0111\uffaf\001\002\000\016\042" +
    "\uffb6\237\uffb6\264\uffb6\325\uffb6\u010b\uffb6\u0111\uffb6\001\002" +
    "\000\016\042\uffb5\237\uffb5\264\uffb5\325\uffb5\u010b\uffb5\u0111" +
    "\uffb5\001\002\000\016\042\uffb4\237\uffb4\264\uffb4\325\uffb4" +
    "\u010b\uffb4\u0111\uffb4\001\002\000\016\042\uffb2\237\uffb2\264" +
    "\uffb2\325\uffb2\u010b\uffb2\u0111\uffb2\001\002\000\016\042\uffb7" +
    "\237\uffb7\264\uffb7\325\uffb7\u010b\uffb7\u0111\uffb7\001\002\000" +
    "\016\042\uffb8\237\uffb8\264\uffb8\325\uffb8\u010b\uffb8\u0111\uffb8" +
    "\001\002\000\006\u010a\u0119\u0124\uffa8\001\002\000\004\u0110" +
    "\u0112\001\002\000\024\220\341\u010e\201\u0110\335\u0117\033" +
    "\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002\000" +
    "\004\042\u0110\001\002\000\024\220\341\u010e\201\u0110\335" +
    "\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001" +
    "\002\000\016\042\uffab\237\uffab\264\uffab\325\uffab\u010b\uffab" +
    "\u0111\uffab\001\002\000\024\220\341\u010e\201\u0110\335\u0117" +
    "\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002" +
    "\000\006\u010c\u0114\u0111\uff8c\001\002\000\024\220\341\u010e" +
    "\201\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337" +
    "\u012d\340\001\002\000\004\u0111\u0116\001\002\000\016\042" +
    "\uffac\237\uffac\264\uffac\325\uffac\u010b\uffac\u0111\uffac\001\002" +
    "\000\006\u010c\u0114\u0111\uff8c\001\002\000\004\u0111\uff8d\001" +
    "\002\000\020\042\uffa9\237\uffa9\264\uffa9\325\uffa9\u010b\uffa9" +
    "\u0111\uffa9\u0124\uffa9\001\002\000\004\u0124\u011b\001\002\000" +
    "\020\042\uffa8\237\uffa8\264\uffa8\325\uffa8\u010a\u0119\u010b\uffa8" +
    "\u0111\uffa8\001\002\000\016\042\uffaa\237\uffaa\264\uffaa\325" +
    "\uffaa\u010b\uffaa\u0111\uffaa\001\002\000\062\042\uff9a\070\uff9a" +
    "\127\uff9a\151\uff9a\170\uff9a\215\uff9a\237\uff9a\264\uff9a\325" +
    "\uff9a\u0106\uff9a\u0107\uff9a\u010b\uff9a\u010c\uff9a\u0111\uff9a\u011a\uff9a" +
    "\u011b\uff9a\u011c\uff9a\u011d\uff9a\u011e\uff9a\u011f\uff9a\u0120\uff9a\u0121" +
    "\uff9a\u0122\uff9a\u0123\uff9a\001\002\000\024\220\341\u010e\201" +
    "\u0110\335\u0117\033\u0124\342\u0127\202\u0129\343\u012c\337\u012d" +
    "\340\001\002\000\024\220\341\u010e\201\u0110\335\u0117\033" +
    "\u0124\342\u0127\202\u0129\343\u012c\337\u012d\340\001\002\000" +
    "\066\042\uff97\070\uff97\127\uff97\151\uff97\170\uff97\215\uff97" +
    "\237\uff97\264\uff97\325\uff97\u0106\uff97\u0107\uff97\u0108\u011e\u0109" +
    "\u011f\u010b\uff97\u010c\uff97\u0111\uff97\u011a\uff97\u011b\uff97\u011c\uff97" +
    "\u011d\uff97\u011e\uff97\u011f\uff97\u0120\uff97\u0121\uff97\u0122\uff97\u0123" +
    "\uff97\001\002\000\062\042\uff98\070\uff98\127\uff98\151\uff98" +
    "\170\uff98\215\uff98\237\uff98\264\uff98\325\uff98\u0106\uff98\u0107" +
    "\uff98\u010b\uff98\u010c\uff98\u0111\uff98\u011a\uff98\u011b\uff98\u011c\uff98" +
    "\u011d\uff98\u011e\uff98\u011f\uff98\u0120\uff98\u0121\uff98\u0122\uff98\u0123" +
    "\uff98\001\002\000\066\042\uff97\070\uff97\127\uff97\151\uff97" +
    "\170\uff97\215\uff97\237\uff97\264\uff97\325\uff97\u0106\uff97\u0107" +
    "\uff97\u0108\u011e\u0109\u011f\u010b\uff97\u010c\uff97\u0111\uff97\u011a\uff97" +
    "\u011b\uff97\u011c\uff97\u011d\uff97\u011e\uff97\u011f\uff97\u0120\uff97\u0121" +
    "\uff97\u0122\uff97\u0123\uff97\001\002\000\062\042\uff99\070\uff99" +
    "\127\uff99\151\uff99\170\uff99\215\uff99\237\uff99\264\uff99\325" +
    "\uff99\u0106\uff99\u0107\uff99\u010b\uff99\u010c\uff99\u0111\uff99\u011a\uff99" +
    "\u011b\uff99\u011c\uff99\u011d\uff99\u011e\uff99\u011f\uff99\u0120\uff99\u0121" +
    "\uff99\u0122\uff99\u0123\uff99\001\002\000\004\u0111\u0125\001\002" +
    "\000\066\042\uff96\070\uff96\127\uff96\151\uff96\170\uff96\215" +
    "\uff96\237\uff96\264\uff96\325\uff96\u0106\uff96\u0107\uff96\u0108\uff96" +
    "\u0109\uff96\u010b\uff96\u010c\uff96\u0111\uff96\u011a\uff96\u011b\uff96\u011c" +
    "\uff96\u011d\uff96\u011e\uff96\u011f\uff96\u0120\uff96\u0121\uff96\u0122\uff96" +
    "\u0123\uff96\001\002\000\004\u0110\u0127\001\002\000\022\052" +
    "\uff06\115\uff06\132\u012c\150\u012d\243\uff06\314\uff06\u010e\201" +
    "\u0127\202\001\002\000\006\u010c\uff2e\u0111\uff2e\001\002\000" +
    "\006\u010c\uff2d\u0111\uff2d\001\002\000\006\u010c\uff2c\u0111\uff2c" +
    "\001\002\000\006\u010c\u01bf\u0111\uff2a\001\002\000\006\u010e" +
    "\201\u0127\202\001\002\000\006\u010e\201\u0127\202\001\002" +
    "\000\070\337\051\340\045\341\064\342\074\344\050\345" +
    "\042\346\071\347\055\350\062\351\073\352\053\353\046" +
    "\354\054\355\043\356\066\357\065\360\052\361\072\362" +
    "\061\363\056\364\076\365\075\366\044\367\047\370\063" +
    "\u010e\u016f\u0129\070\001\002\000\012\052\u0130\115\u0131\243" +
    "\u0134\314\u0132\001\002\000\004\157\u0152\001\002\000\010" +
    "\215\u0143\220\u0144\u0110\uff35\001\002\000\004\157\u0140\001" +
    "\002\000\006\u010c\ufef1\u0111\ufef1\001\002\000\010\126\267" +
    "\212\266\u0110\uff00\001\002\000\004\u0110\u0137\001\002\000" +
    "\006\u010c\ufeef\u0111\ufeef\001\002\000\006\u010e\201\u0127\202" +
    "\001\002\000\002\001\002\000\006\u010c\u013b\u0111\ufee7\001" +
    "\002\000\004\u0111\u013f\001\002\000\006\u010e\201\u0127\202" +
    "\001\002\000\002\001\002\000\006\u010c\u013b\u0111\ufee7\001" +
    "\002\000\004\u0111\ufee8\001\002\000\006\u010c\ufeec\u0111\ufeec" +
    "\001\002\000\010\126\267\212\266\u0110\uff00\001\002\000" +
    "\004\u0110\u0137\001\002\000\006\u010c\ufef0\u0111\ufef0\001\002" +
    "\000\006\046\u0149\220\u014b\001\002\000\026\052\uff36\056" +
    "\uff36\114\uff36\115\uff36\150\uff36\243\uff36\314\uff36\u010c\uff36" +
    "\u0110\uff36\u0111\uff36\001\002\000\004\u0110\u0146\001\002\000" +
    "\026\215\323\220\uff8a\u010e\uff8a\u0110\325\u0117\uff8a\u0124\uff8a" +
    "\u0127\uff8a\u0129\uff8a\u012c\uff8a\u012d\uff8a\001\002\000\004\u0111" +
    "\u0148\001\002\000\006\u010c\ufeed\u0111\ufeed\001\002\000\004" +
    "\061\u014c\001\002\000\026\052\uff37\056\uff37\114\uff37\115" +
    "\uff37\150\uff37\243\uff37\314\uff37\u010c\uff37\u0110\uff37\u0111\uff37" +
    "\001\002\000\026\052\uff33\056\uff33\114\uff33\115\uff33\150" +
    "\uff33\243\uff33\314\uff33\u010c\uff33\u0110\uff33\u0111\uff33\001\002" +
    "\000\032\052\uff30\056\uff30\114\uff30\115\uff30\150\uff30\215" +
    "\u014d\220\u014f\243\uff30\314\uff30\u010c\uff30\u0110\uff30\u0111\uff30" +
    "\001\002\000\004\220\u0151\001\002\000\026\052\uff34\056" +
    "\uff34\114\uff34\115\uff34\150\uff34\243\uff34\314\uff34\u010c\uff34" +
    "\u0110\uff34\u0111\uff34\001\002\000\026\052\uff31\056\uff31\114" +
    "\uff31\115\uff31\150\uff31\243\uff31\314\uff31\u010c\uff31\u0110\uff31" +
    "\u0111\uff31\001\002\000\026\052\uff32\056\uff32\114\uff32\115" +
    "\uff32\150\uff32\243\uff32\314\uff32\u010c\uff32\u0110\uff32\u0111\uff32" +
    "\001\002\000\026\052\uff2f\056\uff2f\114\uff2f\115\uff2f\150" +
    "\uff2f\243\uff2f\314\uff2f\u010c\uff2f\u0110\uff2f\u0111\uff2f\001\002" +
    "\000\004\u0110\u0154\001\002\000\004\056\u015b\001\002\000" +
    "\006\u010e\201\u0127\202\001\002\000\006\u010c\u0157\u0111\ufee9" +
    "\001\002\000\004\u0111\u015a\001\002\000\006\u010e\201\u0127" +
    "\202\001\002\000\006\u010c\u0157\u0111\ufee9\001\002\000\004" +
    "\u0111\ufeea\001\002\000\004\056\ufeeb\001\002\000\006\u010e" +
    "\201\u0127\202\001\002\000\016\215\ufefc\220\ufefc\237\ufefc" +
    "\u010c\ufefc\u0110\u015d\u0111\ufefc\001\002\000\006\u010e\201\u0127" +
    "\202\001\002\000\014\215\ufefa\220\ufefa\237\u015f\u010c\ufefa" +
    "\u0111\ufefa\001\002\000\006\236\u0162\251\u0164\001\002\000" +
    "\012\215\u0143\220\u0144\u010c\uff35\u0111\uff35\001\002\000\006" +
    "\u010c\ufeee\u0111\ufeee\001\002\000\006\107\u0167\152\u0166\001" +
    "\002\000\030\052\ufefa\056\ufefa\115\ufefa\150\ufefa\215\ufefa" +
    "\220\ufefa\237\u015f\243\ufefa\314\ufefa\u010c\ufefa\u0111\ufefa\001" +
    "\002\000\006\107\u0167\152\u0166\001\002\000\030\052\ufef8" +
    "\056\ufef8\115\ufef8\150\ufef8\215\ufef8\220\ufef8\237\ufef8\243" +
    "\ufef8\314\ufef8\u010c\ufef8\u0111\ufef8\001\002\000\006\220\u016a" +
    "\233\u0168\001\002\000\030\052\ufef7\056\ufef7\115\ufef7\150" +
    "\ufef7\215\ufef7\220\ufef7\237\ufef7\243\ufef7\314\ufef7\u010c\ufef7" +
    "\u0111\ufef7\001\002\000\030\052\ufef4\056\ufef4\115\ufef4\150" +
    "\ufef4\215\ufef4\220\ufef4\237\ufef4\243\ufef4\314\ufef4\u010c\ufef4" +
    "\u0111\ufef4\001\002\000\030\052\ufef6\056\ufef6\115\ufef6\150" +
    "\ufef6\215\ufef6\220\ufef6\237\ufef6\243\ufef6\314\ufef6\u010c\ufef6" +
    "\u0111\ufef6\001\002\000\030\052\ufef5\056\ufef5\115\ufef5\150" +
    "\ufef5\215\ufef5\220\ufef5\237\ufef5\243\ufef5\314\ufef5\u010c\ufef5" +
    "\u0111\ufef5\001\002\000\026\052\ufefb\056\ufefb\115\ufefb\150" +
    "\ufefb\215\ufefb\220\ufefb\243\ufefb\314\ufefb\u010c\ufefb\u0111\ufefb" +
    "\001\002\000\030\052\ufef9\056\ufef9\115\ufef9\150\ufef9\215" +
    "\ufef9\220\ufef9\237\ufef9\243\ufef9\314\ufef9\u010c\ufef9\u0111\ufef9" +
    "\001\002\000\004\u0111\u016e\001\002\000\030\052\ufefd\056" +
    "\ufefd\115\ufefd\150\ufefd\215\ufefd\220\ufefd\237\ufefd\243\ufefd" +
    "\314\ufefd\u010c\ufefd\u0111\ufefd\001\002\000\066\337\051\340" +
    "\045\341\064\342\074\344\050\345\042\346\071\347\055" +
    "\350\062\351\073\352\053\353\046\354\054\355\043\356" +
    "\066\357\065\360\052\361\072\362\061\363\056\364\076" +
    "\365\075\366\044\367\047\370\063\u0129\070\001\002\000" +
    "\036\046\uffe3\052\uffe3\056\uffe3\113\uffe3\114\uffe3\115\uffe3" +
    "\134\uffe3\150\uffe3\215\uffe3\220\uffe3\243\uffe3\314\uffe3\u010c" +
    "\uffe3\u0111\uffe3\001\002\000\036\046\uffe4\052\uffe4\056\uffe4" +
    "\113\uffe4\114\uffe4\115\uffe4\134\uffe4\150\uffe4\215\uffe4\220" +
    "\uffe4\243\uffe4\314\uffe4\u010c\uffe4\u0111\uffe4\001\002\000\036" +
    "\046\uff27\052\uff27\056\uff27\113\uff27\114\uff27\115\uff27\134" +
    "\u0173\150\uff27\215\uff27\220\uff27\243\uff27\314\uff27\u010c\uff27" +
    "\u0111\uff27\001\002\000\006\u010e\201\u0127\202\001\002\000" +
    "\034\046\uff10\052\uff06\056\uff06\113\u0175\114\u0176\115\uff06" +
    "\150\u0178\215\u0179\220\uff10\243\uff06\314\uff06\u010c\uff1b\u0111" +
    "\uff1b\001\002\000\032\052\uff1e\056\uff1e\114\uff1e\115\uff1e" +
    "\150\uff1e\215\uff1e\220\uff1e\243\uff1e\314\uff1e\u010c\uff1e\u0110" +
    "\u01ab\u0111\uff1e\001\002\000\022\052\uff06\056\uff06\115\uff06" +
    "\150\u012d\243\uff06\314\uff06\u010c\uff08\u0111\uff08\001\002\000" +
    "\014\052\u018c\056\ufefe\115\u018a\243\u018e\314\u018d\001\002" +
    "\000\006\u010e\201\u0127\202\001\002\000\006\046\uff11\220" +
    "\uff11\001\002\000\006\046\u017e\220\u017f\001\002\000\006" +
    "\u010c\uff1c\u0111\uff1c\001\002\000\006\u010c\uff29\u0111\uff29\001" +
    "\002\000\024\052\uff20\056\uff20\114\u0185\115\uff20\150\uff20" +
    "\243\uff20\314\uff20\u010c\uff20\u0111\uff20\001\002\000\004\061" +
    "\u0180\001\002\000\024\052\uff0f\056\uff0f\114\uff0f\115\uff0f" +
    "\150\uff0f\243\uff0f\314\uff0f\u010c\uff0f\u0111\uff0f\001\002\000" +
    "\030\052\uff0b\056\uff0b\114\uff0b\115\uff0b\150\uff0b\215\u0181" +
    "\220\u0182\243\uff0b\314\uff0b\u010c\uff0b\u0111\uff0b\001\002\000" +
    "\004\220\u0184\001\002\000\024\052\uff0c\056\uff0c\114\uff0c" +
    "\115\uff0c\150\uff0c\243\uff0c\314\uff0c\u010c\uff0c\u0111\uff0c\001" +
    "\002\000\024\052\uff0e\056\uff0e\114\uff0e\115\uff0e\150\uff0e" +
    "\243\uff0e\314\uff0e\u010c\uff0e\u0111\uff0e\001\002\000\024\052" +
    "\uff0d\056\uff0d\114\uff0d\115\uff0d\150\uff0d\243\uff0d\314\uff0d" +
    "\u010c\uff0d\u0111\uff0d\001\002\000\022\052\uff21\056\uff21\115" +
    "\uff21\150\uff21\243\uff21\314\uff21\u010c\uff21\u0111\uff21\001\002" +
    "\000\022\052\uff06\056\uff06\115\uff06\150\u012d\243\uff06\314" +
    "\uff06\u010c\uff08\u0111\uff08\001\002\000\014\052\u018c\056\ufefe" +
    "\115\u018a\243\u018e\314\u018d\001\002\000\006\u010c\uff19\u0111" +
    "\uff19\001\002\000\022\052\uff06\056\uff06\115\uff06\150\u012d" +
    "\243\uff06\314\uff06\u010c\uff08\u0111\uff08\001\002\000\010\215" +
    "\u0143\220\u0144\u0110\uff35\001\002\000\026\052\uff00\056\uff00" +
    "\115\uff00\126\267\150\uff00\212\266\243\uff00\314\uff00\u010c" +
    "\uff00\u0111\uff00\001\002\000\004\157\u0196\001\002\000\004" +
    "\157\u0195\001\002\000\026\052\ufef2\056\ufef2\115\ufef2\126" +
    "\ufef2\150\ufef2\212\ufef2\243\ufef2\314\ufef2\u010c\ufef2\u0111\ufef2" +
    "\001\002\000\004\056\u0190\001\002\000\006\u010e\201\u0127" +
    "\202\001\002\000\032\052\ufefc\056\ufefc\115\ufefc\150\ufefc" +
    "\215\ufefc\220\ufefc\237\ufefc\243\ufefc\314\ufefc\u010c\ufefc\u0110" +
    "\u015d\u0111\ufefc\001\002\000\030\052\ufefa\056\ufefa\115\ufefa" +
    "\150\ufefa\215\ufefa\220\ufefa\237\u015f\243\ufefa\314\ufefa\u010c" +
    "\ufefa\u0111\ufefa\001\002\000\026\052\uff35\056\uff35\115\uff35" +
    "\150\uff35\215\u0143\220\u0144\243\uff35\314\uff35\u010c\uff35\u0111" +
    "\uff35\001\002\000\022\052\uff04\056\uff04\115\uff04\150\uff04" +
    "\243\uff04\314\uff04\u010c\uff04\u0111\uff04\001\002\000\026\052" +
    "\ufef3\056\ufef3\115\ufef3\126\ufef3\150\ufef3\212\ufef3\243\ufef3" +
    "\314\ufef3\u010c\ufef3\u0111\ufef3\001\002\000\004\056\ufeff\001" +
    "\002\000\022\052\uff05\056\uff05\115\uff05\150\uff05\243\uff05" +
    "\314\uff05\u010c\uff05\u0111\uff05\001\002\000\004\u0110\u0199\001" +
    "\002\000\026\215\323\220\uff8a\u010e\uff8a\u0110\325\u0117\uff8a" +
    "\u0124\uff8a\u0127\uff8a\u0129\uff8a\u012c\uff8a\u012d\uff8a\001\002\000" +
    "\004\u0111\u019b\001\002\000\022\052\uff03\056\uff03\115\uff03" +
    "\150\uff03\243\uff03\314\uff03\u010c\uff03\u0111\uff03\001\002\000" +
    "\006\u010c\uff09\u0111\uff09\001\002\000\016\052\uff07\056\uff07" +
    "\115\uff07\233\u019e\243\uff07\314\uff07\001\002\000\014\220" +
    "\u01a4\u0124\u01a5\u0129\u01a2\u012c\u01a1\u012d\u01a0\001\002\000\006" +
    "\u010c\uff1d\u0111\uff1d\001\002\000\032\052\uff16\056\uff16\113" +
    "\uff16\114\uff16\115\uff16\150\uff16\215\uff16\220\uff16\243\uff16" +
    "\314\uff16\u010c\uff16\u0111\uff16\001\002\000\032\052\uff15\056" +
    "\uff15\113\uff15\114\uff15\115\uff15\150\uff15\215\uff15\220\uff15" +
    "\243\uff15\314\uff15\u010c\uff15\u0111\uff15\001\002\000\032\052" +
    "\uff13\056\uff13\113\uff13\114\uff13\115\uff13\150\uff13\215\uff13" +
    "\220\uff13\243\uff13\314\uff13\u010c\uff13\u0111\uff13\001\002\000" +
    "\032\052\uff25\056\uff25\113\u01a6\114\uff25\115\uff25\150\uff25" +
    "\215\uff25\220\uff25\243\uff25\314\uff25\u010c\uff25\u0111\uff25\001" +
    "\002\000\032\052\uff12\056\uff12\113\uff12\114\uff12\115\uff12" +
    "\150\uff12\215\uff12\220\uff12\243\uff12\314\uff12\u010c\uff12\u0111" +
    "\uff12\001\002\000\032\052\uff14\056\uff14\113\uff14\114\uff14" +
    "\115\uff14\150\uff14\215\uff14\220\uff14\243\uff14\314\uff14\u010c" +
    "\uff14\u0111\uff14\001\002\000\032\052\uff1e\056\uff1e\114\uff1e" +
    "\115\uff1e\150\uff1e\215\uff1e\220\uff1e\243\uff1e\314\uff1e\u010c" +
    "\uff1e\u0110\u01ab\u0111\uff1e\001\002\000\030\052\uff35\056\uff35" +
    "\114\uff35\115\uff35\150\uff35\215\u0143\220\u0144\243\uff35\314" +
    "\uff35\u010c\uff35\u0111\uff35\001\002\000\024\052\uff20\056\uff20" +
    "\114\u0185\115\uff20\150\uff20\243\uff20\314\uff20\u010c\uff20\u0111" +
    "\uff20\001\002\000\022\052\uff06\056\uff06\115\uff06\150\u012d" +
    "\243\uff06\314\uff06\u010c\uff08\u0111\uff08\001\002\000\006\u010c" +
    "\uff0a\u0111\uff0a\001\002\000\004\u0129\u01ad\001\002\000\030" +
    "\052\uff26\056\uff26\114\uff26\115\uff26\150\uff26\215\uff26\220" +
    "\uff26\243\uff26\314\uff26\u010c\uff26\u0111\uff26\001\002\000\004" +
    "\u010c\u01ae\001\002\000\004\u0129\u01af\001\002\000\004\u0111" +
    "\u01b0\001\002\000\030\052\uff1f\056\uff1f\114\uff1f\115\uff1f" +
    "\150\uff1f\215\uff1f\220\uff1f\243\uff1f\314\uff1f\u010c\uff1f\u0111" +
    "\uff1f\001\002\000\022\052\uff06\056\uff06\115\uff06\150\u012d" +
    "\243\uff06\314\uff06\u010c\uff08\u0111\uff08\001\002\000\006\u010c" +
    "\uff17\u0111\uff17\001\002\000\006\u010c\uff18\u0111\uff18\001\002" +
    "\000\030\052\uff35\056\uff35\114\uff35\115\uff35\150\uff35\215" +
    "\u0143\220\u0144\243\uff35\314\uff35\u010c\uff35\u0111\uff35\001\002" +
    "\000\024\052\uff20\056\uff20\114\u0185\115\uff20\150\uff20\243" +
    "\uff20\314\uff20\u010c\uff20\u0111\uff20\001\002\000\022\052\uff06" +
    "\056\uff06\115\uff06\150\u012d\243\uff06\314\uff06\u010c\uff08\u0111" +
    "\uff08\001\002\000\006\u010c\uff1a\u0111\uff1a\001\002\000\034" +
    "\046\uff28\052\uff28\056\uff28\113\uff28\114\uff28\115\uff28\150" +
    "\uff28\215\uff28\220\uff28\243\uff28\314\uff28\u010c\uff28\u0111\uff28" +
    "\001\002\000\004\u010f\u01ba\001\002\000\036\046\uffe2\052" +
    "\uffe2\056\uffe2\113\uffe2\114\uffe2\115\uffe2\134\uffe2\150\uffe2" +
    "\215\uffe2\220\uffe2\243\uffe2\314\uffe2\u010c\uffe2\u0111\uffe2\001" +
    "\002\000\014\052\uff07\056\uff07\115\uff07\243\uff07\314\uff07" +
    "\001\002\000\010\126\267\212\266\u0110\uff00\001\002\000" +
    "\004\u0110\u0137\001\002\000\006\u010c\ufee6\u0111\ufee6\001\002" +
    "\000\022\052\uff06\115\uff06\132\u012c\150\u012d\243\uff06\314" +
    "\uff06\u010e\201\u0127\202\001\002\000\004\u0111\u01c1\001\002" +
    "\000\010\237\u01c3\325\uff38\u010b\uff38\001\002\000\006\325" +
    "\uff3a\u010b\uff3a\001\002\000\004\314\u01c4\001\002\000\006" +
    "\325\uff39\u010b\uff39\001\002\000\006\u010c\u01bf\u0111\uff2a\001" +
    "\002\000\004\u0111\uff2b\001\002\000\004\051\u01c8\001\002" +
    "\000\002\001\002\000\006\325\uff46\u010b\uff46\001\002\000" +
    "\006\325\uff6b\u010b\uff6b\001\002\000\012\134\uff67\237\u01cd" +
    "\325\uff67\u010b\uff67\001\002\000\006\325\uff6a\u010b\uff6a\001" +
    "\002\000\006\314\u01d2\u0110\uff63\001\002\000\010\134\u01d0" +
    "\325\uff65\u010b\uff65\001\002\000\006\325\uff69\u010b\uff69\001" +
    "\002\000\006\u010e\201\u0127\202\001\002\000\006\325\uff66" +
    "\u010b\uff66\001\002\000\004\u0110\uff64\001\002\000\004\u0110" +
    "\u01d5\001\002\000\012\134\uff61\325\uff61\u010b\uff61\u010c\u0200" +
    "\001\002\000\006\372\u01d9\373\u01d8\001\002\000\010\134" +
    "\uff68\325\uff68\u010b\uff68\001\002\000\004\u0123\u01da\001\002" +
    "\000\004\u0123\uff5e\001\002\000\004\u0123\uff5f\001\002\000" +
    "\004\u0124\u01db\001\002\000\004\u010c\u01dc\001\002\000\006" +
    "\040\u01df\371\u01de\001\002\000\004\u0123\u01e0\001\002\000" +
    "\004\u0123\uff5d\001\002\000\004\u0123\uff5c\001\002\000\004" +
    "\u0124\u01e1\001\002\000\006\u010c\u01e2\u0111\uff5a\001\002\000" +
    "\010\374\u01eb\375\u01e9\376\u01e7\001\002\000\004\u0111\u01e4" +
    "\001\002\000\012\134\uff60\325\uff60\u010b\uff60\u010c\uff60\001" +
    "\002\000\006\u010c\uff59\u0111\uff59\001\002\000\006\u010c\u01e2" +
    "\u0111\uff5a\001\002\000\004\u0123\u01fa\001\002\000\006\u010c" +
    "\uff58\u0111\uff58\001\002\000\004\u0123\u01f4\001\002\000\006" +
    "\u010c\uff57\u0111\uff57\001\002\000\004\u0123\u01ec\001\002\000" +
    "\004\u012d\u01ed\001\002\000\016\333\u01f1\334\u01f2\335\u01f0" +
    "\336\u01f3\u010c\uff54\u0111\uff54\001\002\000\006\u010c\uff55\u0111" +
    "\uff55\001\002\000\006\u010c\uff56\u0111\uff56\001\002\000\006" +
    "\u010c\uff50\u0111\uff50\001\002\000\006\u010c\uff53\u0111\uff53\001" +
    "\002\000\006\u010c\uff51\u0111\uff51\001\002\000\006\u010c\uff52" +
    "\u0111\uff52\001\002\000\004\u012d\u01f5\001\002\000\020\333" +
    "\u01f1\334\u01f2\335\u01f0\336\u01f3\377\u01f9\u010c\uff4b\u0111\uff4b" +
    "\001\002\000\006\u010c\uff4f\u0111\uff4f\001\002\000\006\u010c" +
    "\uff4d\u0111\uff4d\001\002\000\006\u010c\uff4e\u0111\uff4e\001\002" +
    "\000\006\u010c\uff4c\u0111\uff4c\001\002\000\004\u012d\u01fb\001" +
    "\002\000\020\333\u01f1\334\u01f2\335\u01f0\336\u01f3\u010a\u01fe" +
    "\u010c\uff47\u0111\uff47\001\002\000\006\u010c\uff49\u0111\uff49\001" +
    "\002\000\006\u010c\uff4a\u0111\uff4a\001\002\000\006\u010c\uff48" +
    "\u0111\uff48\001\002\000\004\u0111\uff5b\001\002\000\004\u0110" +
    "\u01d5\001\002\000\010\134\uff62\325\uff62\u010b\uff62\001\002" +
    "\000\014\325\ufecf\u010b\ufecf\u010e\ufecf\u0117\ufecf\u0127\ufecf\001" +
    "\002\000\014\325\ufed5\u010b\ufed5\u010e\201\u0117\033\u0127\202" +
    "\001\002\000\014\325\ufed0\u010b\ufed0\u010e\ufed0\u0117\ufed0\u0127" +
    "\ufed0\001\002\000\010\312\ufece\325\ufece\u010b\ufece\001\002" +
    "\000\010\312\u0209\325\ufed3\u010b\ufed3\001\002\000\006\325" +
    "\ufed7\u010b\ufed7\001\002\000\010\312\ufecd\325\ufecd\u010b\ufecd" +
    "\001\002\000\004\023\u020b\001\002\000\006\325\ufed6\u010b" +
    "\ufed6\001\002\000\010\325\ufed1\u010b\ufed1\u0124\u020d\001\002" +
    "\000\006\325\ufed4\u010b\ufed4\001\002\000\006\325\ufed2\u010b" +
    "\ufed2\001\002\000\006\325\ufec6\u010b\ufec6\001\002\000\014" +
    "\325\ufeca\u010b\ufeca\u010e\201\u0117\033\u0127\202\001\002\000" +
    "\006\325\ufecc\u010b\ufecc\001\002\000\006\325\ufec5\u010b\ufec5" +
    "\001\002\000\006\325\ufecb\u010b\ufecb\001\002\000\014\325" +
    "\ufec7\u010b\ufec7\u010e\201\u0117\033\u0127\202\001\002\000\006" +
    "\325\ufec8\u010b\ufec8\001\002\000\006\325\ufec9\u010b\ufec9\001" +
    "\002\000\004\002\001\001\002\000\026\002\ufffe\003\023" +
    "\065\017\106\015\122\006\142\016\167\020\230\030\257" +
    "\025\263\022\001\002\000\004\002\000\001\002\000\010" +
    "\u010e\201\u0117\033\u0127\202\001\002\000\006\325\ufec3\u010b" +
    "\ufec3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0218\000\034\002\007\003\006\005\011\006\023\022" +
    "\020\132\030\266\025\275\013\277\026\301\004\345\012" +
    "\374\010\u0104\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\272\u0218\001\001\000\004\010\u0216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\272\u0212\001\001" +
    "\000\006\272\u020e\300\u020d\001\001\000\004\272\u0202\001" +
    "\001\000\024\133\254\134\263\135\246\161\250\162\262" +
    "\163\261\171\251\317\252\345\247\001\001\000\002\001" +
    "\001\000\016\023\164\024\157\026\171\030\165\031\163" +
    "\033\170\001\001\000\004\010\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\034\377\031\u0101\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\375\066" +
    "\u010a\056\001\001\000\004\u0102\036\001\001\000\004\021" +
    "\037\001\001\000\002\001\001\000\004\u0102\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\376\135\001\001\000\004\u010a" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\303\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\303\106\001\001\000\002\001\001\000\004\303\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\303\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\303" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\376\123\001\001\000" +
    "\002\001\001\000\006\021\133\113\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\303\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\303\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\303" +
    "\145\001\001\000\002\001\001\000\004\303\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\156\003\006" +
    "\005\011\006\023\022\020\132\030\266\025\275\013\277" +
    "\026\301\004\345\012\374\010\u0104\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\174\264\240\001\001\000\006\020\174\264\227\001\001" +
    "\000\006\020\174\264\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\174\264\217" +
    "\001\001\000\006\020\174\264\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\176\014\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\210\001\001\000\004\025\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\176\014\206\001\001" +
    "\000\004\025\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\212\012\213\001\001\000\004\013\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\216\001\001\000\002\001\001\000\006\011\212\012\220" +
    "\001\001\000\004\027\221\001\001\000\002\001\001\000" +
    "\006\011\212\012\223\001\001\000\004\027\224\001\001" +
    "\000\002\001\001\000\004\011\226\001\001\000\002\001" +
    "\001\000\006\011\230\034\231\001\001\000\002\001\001" +
    "\000\004\035\233\001\001\000\006\011\230\034\234\001" +
    "\001\000\002\001\001\000\004\035\235\001\001\000\002" +
    "\001\001\000\006\011\176\014\237\001\001\000\002\001" +
    "\001\000\004\011\241\001\001\000\004\032\243\001\001" +
    "\000\004\011\244\001\001\000\002\001\001\000\004\032" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u01ca\001\001\000\002\001\001\000\004" +
    "\011\u01c9\001\001\000\002\001\001\000\006\011\212\012" +
    "\u01c6\001\001\000\006\011\176\014\u0125\001\001\000\004" +
    "\221\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\270\001\001\000\002\001\001\000\006\011\176\014" +
    "\272\001\001\000\004\164\273\001\001\000\004\167\306" +
    "\001\001\000\006\011\275\165\276\001\001\000\004\071" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\166\302\001\001\000\004\011\303\001\001\000\002\001" +
    "\001\000\004\071\304\001\001\000\004\166\305\001\001" +
    "\000\002\001\001\000\004\063\312\001\001\000\004\104" +
    "\310\001\001\000\002\001\001\000\006\051\321\054\323" +
    "\001\001\000\004\170\314\001\001\000\004\011\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\176\014\335\021\350\041\345\043\347\045\344\046\343" +
    "\056\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\321\054\325\001\001\000\002\001\001\000\006" +
    "\055\327\061\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\321\054\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\176\014\335\021\350\041" +
    "\u0123\043\347\045\344\046\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u011c\001\001\000\010\051\361\057\374\060\373\001" +
    "\001\000\006\055\360\061\331\001\001\000\004\042\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\176\014\335\021\350\043\356\045\344\046\343\001\001" +
    "\000\016\011\176\014\335\021\350\043\354\045\344\046" +
    "\343\001\001\000\004\042\355\001\001\000\002\001\001" +
    "\000\004\042\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\176\014\335\021\350" +
    "\041\u010a\043\347\045\344\046\343\001\001\000\020\011" +
    "\176\014\335\021\350\041\u0109\043\347\045\344\046\343" +
    "\001\001\000\020\011\176\014\335\021\350\041\u0108\043" +
    "\347\045\344\046\343\001\001\000\020\011\176\014\335" +
    "\021\350\041\u0107\043\347\045\344\046\343\001\001\000" +
    "\020\011\176\014\335\021\350\041\u0106\043\347\045\344" +
    "\046\343\001\001\000\020\011\176\014\335\021\350\041" +
    "\u0105\043\347\045\344\046\343\001\001\000\020\011\176" +
    "\014\335\021\350\041\u0104\043\347\045\344\046\343\001" +
    "\001\000\020\011\176\014\335\021\350\041\u0103\043\347" +
    "\045\344\046\343\001\001\000\020\011\176\014\335\021" +
    "\350\041\u0102\043\347\045\344\046\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\176\014\335\021" +
    "\350\041\u0101\043\347\045\344\046\343\001\001\000\004" +
    "\051\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u0119\001\001\000\002\001\001\000\020\011" +
    "\176\014\335\021\350\041\u010e\043\347\045\344\046\343" +
    "\001\001\000\002\001\001\000\020\011\176\014\335\021" +
    "\350\041\u0110\043\347\045\344\046\343\001\001\000\002" +
    "\001\001\000\020\011\176\014\335\021\350\041\u0112\043" +
    "\347\045\344\046\343\001\001\000\004\050\u0114\001\001" +
    "\000\020\011\176\014\335\021\350\041\u0116\043\347\045" +
    "\344\046\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\176\014\335\021" +
    "\350\045\u0121\046\343\001\001\000\014\011\176\014\335" +
    "\021\350\045\u011f\046\343\001\001\000\004\044\u0120\001" +
    "\001\000\002\001\001\000\004\044\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\u012d\174\u012a\201\u0127\217\u012e\231\u0128" +
    "\237\u0129\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\175\u01bf\001\001\000\004\011\u01bb" +
    "\001\001\000\004\011\u01ba\001\001\000\010\u0107\u0171\u0108" +
    "\u0170\u010a\u016f\001\001\000\004\232\u0132\001\001\000\002" +
    "\001\001\000\004\173\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\221\u0134\001\001\000\004\233\u0135" +
    "\001\001\000\002\001\001\000\004\011\u0137\001\001\000" +
    "\004\071\u0138\001\001\000\004\236\u0139\001\001\000\002" +
    "\001\001\000\004\011\u013b\001\001\000\004\071\u013c\001" +
    "\001\000\004\236\u013d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\221\u0140\001\001\000\004\233\u0141\001" +
    "\001\000\002\001\001\000\004\176\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\321\054\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\177\u014d\001" +
    "\001\000\004\200\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\234" +
    "\u0152\001\001\000\002\001\001\000\004\011\u0154\001\001" +
    "\000\004\235\u0155\001\001\000\002\001\001\000\004\011" +
    "\u0157\001\001\000\004\235\u0158\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\212\012\u015b\001\001\000" +
    "\004\223\u015d\001\001\000\004\011\u016c\001\001\000\004" +
    "\224\u015f\001\001\000\004\225\u0162\001\001\000\004\173" +
    "\u0160\001\001\000\002\001\001\000\004\226\u016b\001\001" +
    "\000\004\224\u016a\001\001\000\004\226\u0164\001\001\000" +
    "\002\001\001\000\004\227\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u010a\u01b8\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\202\u0173\001\001\000\004\011\u01b7" +
    "\001\001\000\012\207\u017b\210\u017a\212\u0179\217\u0176\001" +
    "\001\000\004\206\u01b3\001\001\000\006\216\u01b2\217\u0186" +
    "\001\001\000\010\220\u01b0\222\u018e\230\u018a\001\001\000" +
    "\004\011\u019c\001\001\000\002\001\001\000\004\213\u017c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\205" +
    "\u0185\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\214\u0182\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\216\u0187\217\u0186\001\001\000\010\220\u0188\222\u018e\230" +
    "\u018a\001\001\000\002\001\001\000\006\216\u019b\217\u0186" +
    "\001\001\000\004\173\u0197\001\001\000\004\221\u0196\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\212\012\u0190\001\001\000" +
    "\004\223\u0191\001\001\000\004\224\u0192\001\001\000\004" +
    "\173\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\321\054\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\215\u019e\001\001\000\004" +
    "\211\u01a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\203\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\206\u01ab\001" +
    "\001\000\004\173\u01a7\001\001\000\004\205\u01a8\001\001" +
    "\000\006\216\u01a9\217\u0186\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\216" +
    "\u01b1\217\u0186\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\173\u01b4\001\001\000\004\205\u01b5\001\001\000" +
    "\006\216\u01b6\217\u0186\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\221\u01bc\001\001\000\004\233\u01bd\001\001" +
    "\000\002\001\001\000\016\011\u012d\174\u01c4\201\u0127\217" +
    "\u012e\231\u0128\237\u0129\001\001\000\002\001\001\000\004" +
    "\172\u01c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\175\u01c5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u01c8\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\136\u01cb\137\u01cd\001\001" +
    "\000\002\001\001\000\004\141\u01d2\001\001\000\004\140" +
    "\u01ce\001\001\000\002\001\001\000\004\011\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\142\u01d5\143" +
    "\u01d3\001\001\000\002\001\001\000\004\144\u01d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\u01dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\146\u01e2\001\001" +
    "\000\012\150\u01e5\151\u01e4\154\u01e7\157\u01e9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\146\u01fe\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\152\u01ee\153\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\155\u01f5\001" +
    "\001\000\006\153\u01f6\156\u01f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\153\u01fb\160\u01fc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\142\u0200\143\u01d3\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\u0204\021\u0207\267\u0206\273" +
    "\u0205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\270\u0209\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\271\u020b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\u020f\021\u0211\274\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\u0204\021" +
    "\u0207\273\u0213\276\u0214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\u0217\003\006\005" +
    "\011\006\023\022\020\132\030\266\025\275\013\277\026" +
    "\301\004\345\012\374\010\u0104\003\001\001\000\002\001" +
    "\001\000\010\011\u0204\021\u0207\273\u0219\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Er = "";
    private Symbol s;    

    public Symbol getS(){
    	return this.s;
    }

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public void syntax_error(Symbol s){
  	this.s=s; 
 	List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens (" + idsNames.toString() + ")\n\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        List<Integer> ids = expected_token_ids();
	LinkedList<String> idsNames = new LinkedList<String>();
	for (Integer esperado : ids){
            idsNames.add(symbl_name_from_id(esperado));
            idsNames.add(", ");
	}
       	Er = Er + ("Error de sintaxis en Token " + s.value + ", en columna " + (s.left+1) + ", en linea " + (s.right+1) + ", esperando tokens (" + idsNames.toString() + ")\n\n");   
    }
    
    public String symbl_name_from_id(int id){
	Field[] fields = getSymbolContainer().getFields();
	for(Field f : fields){
            try {
		if (f.getInt(null)==id)
                    return f.getName();
            } catch (IllegalArgumentException e) {
                //e.printStackTrace();
            } catch (IllegalAccessException e) {
                //e.printStackTrace();
            }
	}
	return "invalid symbol id";
    }

    public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	int parse_state = ((Symbol)stack.peek()).parse_state ;
	short[] row = action_tab[parse_state];
	for (int i = 0; i<row.length; i+=2){
	    if (row[i]==-1) continue;
            if (!validate_expected_symbol(row[i])) continue;
            ret.add(new Integer(row[i]));
	}
	return ret;
    }
    
    private boolean validate_expected_symbol(int id){
	short lhs,rhs_size;
	int act;
	try {
            virtual_parse_stack vstack = new virtual_parse_stack(stack);
            /* parse until we fail or get past the lookahead input */
            for (;;){
                /* look up the action from the current state (on top of stack) */
		act = get_action(vstack.top(), id);

                /* if its an error, we fail */
		if (act == 0) return false;

                /* > 0 encodes a shift */
		if (act > 0){
                    /* push the new state on the stack */
                    vstack.push(act-1);
                    /* advance simulated input, if we run off the end, we are done */
                    if (!advance_lookahead()) return true;
		}
                    /* < 0 encodes a reduce */
		else{
                    /* if this is a reduce with the start production we are done */
                    if ((-act)-1 == start_production())  return true;

		    /* get the lhs Symbol and the rhs size */
                    lhs = production_tab[(-act)-1][0];
                    rhs_size = production_tab[(-act)-1][1];
                    /* pop handle off the stack */
                    for (int i = 0; i < rhs_size; i++) vstack.pop();
                    vstack.push(get_reduce(vstack.top(), lhs));
		}
            }
	} catch (Exception e) {
            e.printStackTrace();
	}
	return true;
    }

    protected static final int _error_sync_size(){
	return 1;
    }

    public String obtenerErrores(){
        return Er;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // OrAlter ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // OrAlter ::= OR ALTER 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // Save ::= SAVE TransactName Name 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Save",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // Commit1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit1",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // Commit1 ::= TransactName Name1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit1",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // Commit ::= COMMIT Commit1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // Rollback1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // Rollback1 ::= Name 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // Rollback ::= ROLLBACK TransactName Rollback1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // Name1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name1",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // Name1 ::= Var 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name1",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // Name1 ::= ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name1",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // Name ::= Var 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // Name ::= ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TransactName ::= TRANSACTION 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TransactName",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TransactName ::= TRAN 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TransactName",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Transact3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact3",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // Transact3 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact3",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // Transact2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact2",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Transact2 ::= WITH MARK Transact3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact2",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Transact1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact1",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Transact1 ::= Name Transact2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact1",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Transact ::= BEGIN TransactName Transact1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Transact",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Use ::= USE Identificador 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            TablaSimbolos.cerrarAmbitoActual();
            RESULT = new SimboloTabla(); 
            RESULT.setNombre(e.toString());           
            RESULT.setTipoDeclaracion("Base de datos");
            TablaSimbolos.nuevoAmbito(e.toString());
            RESULT.setAmbito(TablaSimbolos.getAmbitoActual());
            TablaSimbolos.add(RESULT);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Use",258, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // SetDefinition1 ::= FALSE 
            {
              SimboloTabla RESULT =null;
		
                            if(!TablaSimbolos.getError()){
                              RESULT = new SimboloTabla();
                              RESULT.setValor("False");
                              RESULT.setTipo("Boolean");
                            }
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SetDefinition1",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // SetDefinition1 ::= TRUE 
            {
              SimboloTabla RESULT =null;
		
                            if(!TablaSimbolos.getError()){
                              RESULT = new SimboloTabla();
                              RESULT.setValor("True");
                              RESULT.setTipo("Boolean");
                            }
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SetDefinition1",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // SetDefinition1 ::= Operacion 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                if(!TablaSimbolos.getError()){
                                  RESULT = new SimboloTabla();
                                  RESULT.setValor(e.getValor());
                                  RESULT.setTipo(e.getTipo());
                                }
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SetDefinition1",260, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // SetDefinition ::= SET Var Igual SetDefinition1 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla valor = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                    if(!TablaSimbolos.getError()){
                                                      if(!e.yaExiste){
                                                        TablaSimbolos.ERROR("La variable " + e.getNombre() + " no existe en el ámbito actual");
                                                      }
                                                      else{
                                                        e.setValor(valor.getValor());
                                                        if(valor.getTipo().equals(valor.getTipo())){
                                                          e.setValor(valor.getValor());
                                                        }
                                                      }
                                                    }
                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SetDefinition",259, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // DeclareDefinition6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition6",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // DeclareDefinition6 ::= Coma Var DeclareDefinition6 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                      if(e.yaExiste){
                                                        TablaSimbolos.ERROR("La variable " + e.getNombre() + " ya existe en el ámbito actual");
                                                      }
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition6",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // DeclareDefinition5 ::= Var DeclareDefinition6 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                  if(e.yaExiste){
                                                    TablaSimbolos.ERROR("La variable " + e.getNombre() + " ya existe en el ámbito actual");
                                                  }
                                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition5",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // DeclareDefinition3 ::= DeclareDefinition5 DeclareDefinition1 
            {
              SimboloTabla RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla valor = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                  if(!TablaSimbolos.getError()){
                                                                      for (int i = 0; i<TablaSimbolos.listaTemporal.size(); i++) {
                                                                          TablaSimbolos.actualizarTipoValorSimbolo(TablaSimbolos.listaTemporal.get(i).getNombre(), 
                                                                            TablaSimbolos.listaTemporal.get(i).getAmbito(), valor.getTipo(), valor.getValor());
                                                                      }

                                                                      TablaSimbolos.listaTemporal.clear();
                                                                  }                                                                                                                                
                                                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition3",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // DeclareDefinition2 ::= 
            {
              SimboloTabla RESULT =null;
		
                                                  RESULT = new SimboloTabla();
                                                  RESULT = null;
                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition2",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // DeclareDefinition2 ::= Igual InsertTipo1 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                              RESULT = new SimboloTabla(); 
                                              RESULT = e;
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition2",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // DeclareDefinition1 ::= TipoDeDato3 DeclareDefinition2 
            {
              SimboloTabla RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla valor = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                        if(!TablaSimbolos.getError()){
                                                                        RESULT = new SimboloTabla();
                                                                        RESULT.setTipo(tipo);
                                                                        if(valor != null){
                                                                          if(valor.getTipo().equals("Default") || valor.getTipo().equals("Null")){
                                                                              switch(tipo){
                                                                                case "String":
                                                                                  RESULT.setValor("");
                                                                                  break;
                                                                                case "Integer":
                                                                                  RESULT.setValor("0");
                                                                                  break;
                                                                                case "Bit":
                                                                                  RESULT.setValor("False");
                                                                                  break;
                                                                                case "Float":
                                                                                  RESULT.setValor("0.0");
                                                                                  break;
                                                                              }
                                                                          }else if(tipo.equals(valor.getTipo())){
                                                                            RESULT.setValor(valor.getValor());                                                                                
                                                                          }
                                                                          else{
                                                                            TablaSimbolos.ERROR(tipo + " no es compatible con " + valor.getTipo());
                                                                            //Error
                                                                          }
                                                                        } 
                                                                      }
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition1",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // DeclareDefinition1 ::= AS TipoDeDato3 DeclareDefinition2 
            {
              SimboloTabla RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla valor = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                      if(!TablaSimbolos.getError()){
                                                                        RESULT = new SimboloTabla();
                                                                        RESULT.setTipo(tipo);
                                                                        if(valor != null){
                                                                          if(valor.getTipo().equals("Default") || valor.getTipo().equals("Null")){
                                                                              switch(tipo){
                                                                                case "String":
                                                                                  RESULT.setValor("");
                                                                                  break;
                                                                                case "Integer":
                                                                                  RESULT.setValor("0");
                                                                                  break;
                                                                                case "Bit":
                                                                                  RESULT.setValor("False");
                                                                                  break;
                                                                                case "Float":
                                                                                  RESULT.setValor("0.0");
                                                                                  break;
                                                                              }
                                                                          }else if(tipo.equals(valor.getTipo())){
                                                                            RESULT.setValor(valor.getValor());                                                                                
                                                                          }
                                                                          else{
                                                                            TablaSimbolos.ERROR(tipo + " no es compatible con " + valor.getTipo());
                                                                            //Error
                                                                          }
                                                                        } 
                                                                      }
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition1",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // DeclareDefinition ::= DECLARE DeclareDefinition3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclareDefinition",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // IndexTabla ::= INDEX ID ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexTabla",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ConstraintTabla5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla5",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ConstraintTabla5 ::= Coma ID OrderBy2 ConstraintTabla5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla5",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ConstraintTabla4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla4",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ConstraintTabla4 ::= Coma ID ConstraintTabla4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla4",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ConstraintTabla3 ::= Aparentesis ID ConstraintTabla4 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla3",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ConstraintTabla2 ::= Aparentesis ID OrderBy2 ConstraintTabla5 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla2",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ConstraintTabla1 ::= CHECK TableElement1 Aparentesis Condicion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ConstraintTabla1 ::= FOREIGN KEY ConstraintTabla3 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 TableElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ConstraintTabla1 ::= UNIQUE ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ConstraintTabla1 ::= PRIMARY KEY ConstraintColumna3 ConstraintTabla2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla1",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ConstraintTabla ::= ConstraintColumna1 ConstraintTabla1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintTabla",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ConstraintColumna10 ::= UNIQUE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna10",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ConstraintColumna10 ::= PRIMARY KEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna10",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ConstraintColumna9 ::= DEFAULT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna9",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ConstraintColumna9 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna9",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ConstraintColumna8 ::= SET ConstraintColumna9 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna8",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ConstraintColumna8 ::= CASCADE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna8",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ConstraintColumna7 ::= UPDATE ConstraintColumna8 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna7",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ConstraintColumna7 ::= DELETE ConstraintColumna8 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna7",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ConstraintColumna6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna6",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ConstraintColumna6 ::= ON ConstraintColumna7 ConstraintColumna6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna6",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ConstraintColumna5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna5",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ConstraintColumna5 ::= Aparentesis ID Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna5",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ConstraintColumna4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna4",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ConstraintColumna4 ::= FOREIGN KEY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna4",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ConstraintColumna3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ConstraintColumna3 ::= NONCLUSTERED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ConstraintColumna3 ::= CLUSTERED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna3",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ConstraintColumna2 ::= CHECK TableElement1 Aparentesis Condicion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ConstraintColumna2 ::= ConstraintColumna4 REFERENCES IDL1 ConstraintColumna5 ConstraintColumna6 TableElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ConstraintColumna2 ::= ConstraintColumna10 ConstraintColumna3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna2",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ConstraintColumna1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna1",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ConstraintColumna1 ::= CONSTRAINT ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna1",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ConstraintColumna ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ConstraintColumna ::= ConstraintColumna1 ConstraintColumna2 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstraintColumna",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // DefinicionColumna12 ::= DEFAULT DefinicionColumna8 DefinicionColumna2 TableElement1 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna12",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // DefinicionColumna11 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // DefinicionColumna11 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // DefinicionColumna11 ::= NOT NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna11",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // DefinicionColumna10 ::= FOR REPLICATION DefinicionColumna11 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna10",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // DefinicionColumna10 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna10",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // DefinicionColumna9 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna9",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // DefinicionColumna9 ::= NOT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna9",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // DefinicionColumna8 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // DefinicionColumna8 ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // DefinicionColumna8 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // DefinicionColumna8 ::= Float 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // DefinicionColumna8 ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna8",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // DefinicionColumna7 ::= ConstraintColumna1 ConstraintColumna2 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // DefinicionColumna7 ::= ROWGUIDCOL ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // DefinicionColumna7 ::= DefinicionColumna9 DefinicionColumna10 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // DefinicionColumna7 ::= IDENTITY DefinicionColumna5 TableElement1 DefinicionColumna4 ConstraintColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna7",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // DefinicionColumna6 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // DefinicionColumna6 ::= DefinicionColumna7 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // DefinicionColumna6 ::= CONSTRAINT ID DefinicionColumna12 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna6",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // DefinicionColumna5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna5",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // DefinicionColumna5 ::= Aparentesis Bit Coma Bit Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna5",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // DefinicionColumna4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna4",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DefinicionColumna4 ::= ROWGUIDCOL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna4",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // DefinicionColumna3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // DefinicionColumna3 ::= NOT NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // DefinicionColumna3 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna3",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // DefinicionColumna2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna2",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // DefinicionColumna2 ::= IDENTITY DefinicionColumna5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna2",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // DefinicionColumna1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna1",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // DefinicionColumna1 ::= COLLATE ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna1",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // DefinicionColumna ::= ID TipoDeDato DefinicionColumna1 DefinicionColumna6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinicionColumna",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TableElement3 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement3",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TableElement3 ::= Coma TableElement2 TableElement3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement3",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TableElement2 ::= IndexTabla 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TableElement2 ::= ConstraintTabla 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TableElement2 ::= DefinicionColumna 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement2",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TableElement6 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement6",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TableElement5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TableElement5 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TableElement5 ::= NOT TableElement6 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement5",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TableElement4 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement4",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TableElement4 ::= FOR REPLICATION TableElement5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement4",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TableElement1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TableElement1 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TableElement1 ::= NOT TableElement4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableElement1",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TableOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableOption",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TableOption ::= ON PRIMARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableOption",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // CreateTable ::= TABLE IDL3 Aparentesis TableElement2 TableElement3 Cparentesis TableOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OnOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOption",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OnOption ::= ON ID Aparentesis ID Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOption",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IndexInclude ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexInclude",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IndexInclude ::= INCLUDE ListaColumnas 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexInclude",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // IndexColumna2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna2",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // IndexColumna2 ::= Coma ID OrderBy2 IndexColumna2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna2",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // IndexColumna1 ::= ID OrderBy2 IndexColumna2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna1",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IndexColumna ::= Aparentesis IndexColumna1 Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IndexColumna",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CreateIndex1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex1",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CreateIndex1 ::= UNIQUE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex1",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CreateIndex ::= CreateIndex1 ConstraintColumna3 INDEX ID ON IDL3 IndexColumna IndexInclude Where OnOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CreateView ::= VIEW IDL1 AS Select 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FileGrowth1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FileGrowth1 ::= Porce 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FileGrowth1 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth1",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FileGrowth ::= FILEGROWTH Igual Integer FileGrowth1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGrowth",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // MaxSize2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // MaxSize2 ::= UNLIMITED 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // MaxSize2 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MaxSize1 ::= Integer MaxSize2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize1",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // MaxSize ::= MAXSIZE Igual MaxSize1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MaxSize",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Size2 ::= TB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Size2 ::= GB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Size2 ::= MB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Size2 ::= KB 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size2",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Size1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size1",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Size1 ::= Size2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size1",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Size ::= SIZE Igual Integer Size1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DefinitionOption ::= FileGrowth 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DefinitionOption ::= MaxSize 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DefinitionOption ::= Size 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOption",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DefinitionOptions ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOptions",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DefinitionOptions ::= Coma DefinitionOption DefinitionOptions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionOptions",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FileName ::= FILE 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileName",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FileName ::= FILENAME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileName",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DefinitionName ::= NAMES 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionName",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DefinitionName ::= NAME 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DefinitionName",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Definition ::= Aparentesis DefinitionName Igual Varchar Coma FileName Igual Varchar DefinitionOptions Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definition",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Definitions ::= Definition 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definitions",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Definitions ::= Definition Coma Definitions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Definitions",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Primary ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Primary ::= PRIMARY 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CollateDataBase ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CollateDataBase",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CollateDataBase ::= COLLATE ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CollateDataBase",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CreateDataBase2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase2",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CreateDataBase2 ::= ON Primary Definitions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase2",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CreateDataBase1 ::= CreateDataBase2 CollateDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase1",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CreateDataBase ::= DATABASE ID CreateDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDataBase",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CreateUser ::= USER ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Create1 ::= CreateIndex 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Create1 ::= CreateView 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Create1 ::= CreateUser 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Create1 ::= CreateDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Create1 ::= CreateTable 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Create1 ::= Function 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Create1 ::= Procedure 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create1",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Create ::= CREATE Create1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AlterTableDrop5 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop5",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AlterTableDrop5 ::= IFExists 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop5",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DropIndex2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DropIndex2 ::= Coma DropIndex1 DropIndex2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DropIndex1 ::= ID ON IDL3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DropIndex ::= INDEX AlterTableDrop5 DropIndex1 DropIndex2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DropDataBase1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase1",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DropDataBase1 ::= Coma ID DropDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase1",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DropDataBase ::= DATABASE AlterTableDrop5 ID DropDataBase1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDataBase",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DropUser ::= USER AlterTableDrop5 ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DropView1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView1",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DropView1 ::= Coma IDL1 DropView1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView1",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DropView ::= VIEW AlterTableDrop5 IDL1 DropView1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DropTable1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable1",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DropTable1 ::= Coma IDL3 DropTable1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable1",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DropTable ::= TABLE AlterTableDrop5 IDL3 DropTable1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DropOptions ::= DropIndex 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DropOptions ::= DropDataBase 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DropOptions ::= DropView 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DropOptions ::= DropUser 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DropOptions ::= DropTable 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropOptions",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Drop ::= DROP DropOptions 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Not ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Not ::= NOT 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Operaciones ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Operaciones ::= Coma Operacion Operaciones 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operaciones",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Operacion5 ::= NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Operacion5 ::= Var 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Operacion5 ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Operacion5 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Operacion5 ::= Float 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Operacion5 ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Operacion5 ::= IDL3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion5",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Operacion3 ::= Operacion5 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion3",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Operacion3 ::= Aparentesis Operacion Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion3",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Operacion4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Operacion4 ::= Div Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Operacion4 ::= Mul Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion4",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Operacion1 ::= Operacion3 Operacion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion1",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Operacion2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Operacion2 ::= Resta Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Operacion2 ::= Suma Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Operacion ::= Operacion1 Operacion2 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operacion",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AsElement1 ::= Varchar 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement1",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AsElement1 ::= ID 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement1",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AsElement ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AsElement ::= AsElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AsElement ::= AS AsElement1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsElement",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Where ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Where ::= WHERE Condicion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condicion5 ::= OR 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion5",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Condicion5 ::= AND 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion5",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LikeOption ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LikeOption",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LikeOption ::= Porce 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LikeOption",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condicion4 ::= Not LIKE LikeOption Varchar LikeOption 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condicion4 ::= Not BETWEEN Operacion AND Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condicion4 ::= Not IN Aparentesis Operacion Operaciones Cparentesis 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion4",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condicion3 ::= Condicion4 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion3 ::= IS Not NULL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condicion3 ::= Igual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Condicion3 ::= Exclamacion Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condicion3 ::= Dbarra Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condicion3 ::= Dampersand Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion3 ::= Diferente Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion3 ::= Digual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condicion3 ::= MayorIgual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion3 ::= Mayor Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion3 ::= MenorIgual Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion3 ::= Menor Operacion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion2 ::= Operacion Condicion3 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion2",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condicion1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion1",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion1 ::= Condicion5 Condicion 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion1",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= Not Condicion2 Condicion1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Aparentesis Condicion Cparentesis Condicion1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InsertTipo1 ::= NULL 
            {
              SimboloTabla RESULT =null;
		
                          RESULT = new SimboloTabla();
                          RESULT.setTipo("Null");
                     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsertTipo1 ::= Var 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        if(!e.yaExiste){
                          TablaSimbolos.ERROR("La variable " + e.getNombre() + " no existe en el ámbito actual");
                        }
                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsertTipo1 ::= Bit 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = new SimboloTabla();
                            RESULT.setTipo("Bit");
                            RESULT.setValor(e.toString());
                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InsertTipo1 ::= Varchar 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                              RESULT = new SimboloTabla();
                              RESULT.setTipo("String");
                              RESULT.setValor(e.toString());
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsertTipo1 ::= Float 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = new SimboloTabla();
                            RESULT.setTipo("Float");
                            RESULT.setValor(String.valueOf(e));
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InsertTipo1 ::= Integer 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = new SimboloTabla();
                            RESULT.setTipo("Integer");
                            RESULT.setValor(String.valueOf(e));
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsertTipo1 ::= DEFAULT 
            {
              SimboloTabla RESULT =null;
		 
                            RESULT = new SimboloTabla();
                            RESULT.setTipo("Default");
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertTipo1",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TipoDeDato3 ::= VARBINARY 
            {
              String RESULT =null;
		 
                              RESULT = "Integer";
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TipoDeDato3 ::= IMAGE 
            {
              String RESULT =null;
		 
                            RESULT = "String";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TipoDeDato3 ::= BINARY 
            {
              String RESULT =null;
		 
                            RESULT = "Integer";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TipoDeDato3 ::= NVARCHAR Aparentesis MAX Cparentesis 
            {
              String RESULT =null;
		 
                                                          RESULT = "String";                            
                                                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TipoDeDato3 ::= NVARCHAR Aparentesis Number Cparentesis 
            {
              String RESULT =null;
		 
                                                              RESULT = "String";                            
                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TipoDeDato3 ::= NTEXT 
            {
              String RESULT =null;
		 
                            RESULT = "String";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TipoDeDato3 ::= NCHAR Aparentesis Number Cparentesis 
            {
              String RESULT =null;
		 
                                                          RESULT = "String";                            
                                                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TipoDeDato3 ::= VARCHAR Aparentesis MAX Cparentesis 
            {
              String RESULT =null;
		 
                                                          RESULT = "String";                            
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TipoDeDato3 ::= VARCHAR Aparentesis Number Cparentesis 
            {
              String RESULT =null;
		 
                                                            RESULT = "String";                            
                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TipoDeDato3 ::= TEXT 
            {
              String RESULT =null;
		 
                              RESULT = "String";                            
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoDeDato3 ::= CHAR Aparentesis Number Cparentesis 
            {
              String RESULT =null;
		 
                                                          RESULT = "String";                            
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TipoDeDato3 ::= TIME 
            {
              String RESULT =null;
		 
                            RESULT = "String";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TipoDeDato3 ::= SMALLDATETIME 
            {
              String RESULT =null;
		 
                                    RESULT = "String";                            
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TipoDeDato3 ::= DATETIMEOFFSET 
            {
              String RESULT =null;
		 
                                    RESULT = "String";                            
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TipoDeDato3 ::= DATETIME2 
            {
              String RESULT =null;
		 
                              RESULT = "String";                            
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TipoDeDato3 ::= DATETIME 
            {
              String RESULT =null;
		 
                            RESULT = "String";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TipoDeDato3 ::= DATE 
            {
              String RESULT =null;
		 
                            RESULT = "String";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TipoDeDato3 ::= REAL 
            {
              String RESULT =null;
		 
                            RESULT = "Float";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TipoDeDato3 ::= FLOAT Aparentesis Number Cparentesis 
            {
              String RESULT =null;
		 
                                                          RESULT = "Float";                            
                                                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TipoDeDato3 ::= FLOAT 
            {
              String RESULT =null;
		 
                            RESULT = "Float";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoDeDato3 ::= SMALLMONEY 
            {
              String RESULT =null;
		 
                                RESULT = "Float";                            
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoDeDato3 ::= NUMERIC Aparentesis Number Coma Number Cparentesis 
            {
              String RESULT =null;
		 
                                                                        RESULT = "Big int";                            
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoDeDato3 ::= MONEY 
            {
              String RESULT =null;
		 
                            RESULT = "Float";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoDeDato3 ::= DECIMAL Aparentesis Number Coma Number Cparentesis 
            {
              String RESULT =null;
		 
                                                                        RESULT = "Float";
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TipoDeDato3 ::= Bit 
            {
              String RESULT =null;
		 
                            RESULT = "Bit";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TipoDeDato3 ::= TINYINT 
            {
              String RESULT =null;
		 
                            RESULT = "Integer";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoDeDato3 ::= SMALLINT 
            {
              String RESULT =null;
		 
                            RESULT = "Integer";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TipoDeDato3 ::= INT 
            {
              String RESULT =null;
		 
                            RESULT = "Integer";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoDeDato3 ::= BIGINT 
            {
              String RESULT =null;
		 
                            RESULT = "Integer";                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato3",264, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TipoDeDato1 ::= Acorchete TipoDeDato3 Ccorchete 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato1",262, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoDeDato1 ::= TipoDeDato3 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato1",262, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoDeDato ::= TipoDeDato1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDeDato",261, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var ::= Arroba Identificador 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
          
            if(!TablaSimbolos.buscarIdentificador(e.toString(), "Variable")){
              RESULT = new SimboloTabla(); 
              RESULT.setNombre(e.toString());
              RESULT.setAmbito(TablaSimbolos.getAmbitoActual());
              RESULT.setTipoDeclaracion("Variable");
              RESULT.yaExiste = false;
              TablaSimbolos.add(RESULT);
              TablaSimbolos.listaTemporal.add(RESULT);
            } 
            else{
              RESULT = new SimboloTabla();
              RESULT.setTipo(TablaSimbolos.obtenerTipoVariable(e.toString(), "Variable"));
              RESULT.setValor(TablaSimbolos.obtenerValorVariable(e.toString(), "Variable"));
              RESULT.setNombre(e.toString());
              RESULT.yaExiste = true;              
            }                              
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Number ::= Bit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Number ::= Integer 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Number",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFExists ::= IF EXISTS 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFExists",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDL4 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL4",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDL4 ::= Punto IDL1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL4",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDL3 ::= ID IDL4 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                        if(!TablaSimbolos.buscarIdentificador(e.getNombre(), "Base de datos")){
                          TablaSimbolos.ERROR("No existe la base de datos " + e.getNombre() + " en el ámbito actual");
                        }
                        else{
                          RESULT = new SimboloTabla();
                          RESULT.setNombre(e.getNombre());
                          RESULT.setTipoDeclaracion("Base de datos");
                        }                            
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL3",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDL2 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDL2 ::= Punto ID 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                      if(!TablaSimbolos.buscarIdentificador(e.getNombre(), "Columna")){
                        TablaSimbolos.ERROR("No existe la columna " + e.getNombre() + " en el ámbito actual");
                      }
                      else{
                        RESULT = new SimboloTabla();
                        RESULT.setNombre(e.getNombre());
                        RESULT.setTipoDeclaracion("Columna");
                      }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDL1 ::= ID IDL2 
            {
              SimboloTabla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla e = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                      if(!TablaSimbolos.buscarIdentificador(e.getNombre(), "Tabla")){
                        TablaSimbolos.ERROR("No existe la tabla " + e.getNombre() + " en el ámbito actual");
                      }
                      else{
                        RESULT = new SimboloTabla();
                        RESULT.setNombre(e.getNombre());
                        RESULT.setTipoDeclaracion("Tabla");
                      }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDL1",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ID ::= Identificador 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID ::= Acorchete Identificador Ccorchete 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Fin ::= GO 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Fin",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Fin ::= PuntoYComa 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Fin",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentenciasTCL ::= Save 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SentenciasTCL ::= Commit 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SentenciasTCL ::= Rollback 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SentenciasTCL ::= Transact 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasTCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SentenciasDDL ::= Drop 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasDDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SentenciasDDL ::= Create 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentenciasDDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inicio2 ::= Use 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inicio2 ::= DeclareDefinition 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inicio2 ::= Function 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio2 ::= SentenciasTCL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inicio2 ::= SentenciasDDL 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio1 ::= 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio1 ::= error Fin Inicio1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio1 ::= Inicio2 Fin Inicio1 
            {
              SimboloTabla RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio1",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		SimboloTabla start_val = (SimboloTabla)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

