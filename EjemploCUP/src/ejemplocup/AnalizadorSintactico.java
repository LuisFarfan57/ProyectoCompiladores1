
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 18:18:48 CST 2019
//----------------------------------------------------

package ejemplocup;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 18:18:48 CST 2019
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\004\000\002\345\003" +
    "\000\002\345\003\000\002\345\003\000\002\345\003\000" +
    "\002\345\003\000\002\345\003\000\002\345\003\000\002" +
    "\345\003\000\002\345\003\000\002\345\003\000\002\345" +
    "\003\000\002\345\003\000\002\345\003\000\002\345\003" +
    "\000\002\345\003\000\002\345\003\000\002\345\003\000" +
    "\002\345\003\000\002\005\004\000\002\006\005\000\002" +
    "\006\002\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\011\004\000\002\011\002\000\002\013\007" +
    "\000\002\013\002\000\002\014\003\000\002\014\002\000" +
    "\002\015\004\000\002\015\002\000\002\016\003\000\002" +
    "\016\003\000\002\016\002\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\017\005\000\002\020\005" +
    "\000\002\021\004\000\002\021\002\000\002\300\010\000" +
    "\002\300\006\000\002\300\014\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\004\000\002\024\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\002\000\002\032\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\002\000\002\031" +
    "\005\000\002\031\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\004\000\002\034\004\000\002\034\006\000" +
    "\002\034\006\000\002\035\004\000\002\035\002\000\002" +
    "\036\005\000\002\036\005\000\002\301\006\000\002\301" +
    "\005\000\002\361\003\000\002\361\003\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\302\004\000\002\302\003\000\002\040\004\000\002" +
    "\040\006\000\002\041\005\000\002\042\004\000\002\042" +
    "\002\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\003\000\002\046\002\000\002\047" +
    "\007\000\002\050\004\000\002\050\003\000\002\050\002" +
    "\000\002\303\010\000\002\303\002\000\002\051\005\000" +
    "\002\051\002\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\006" +
    "\000\002\055\007\000\002\056\003\000\002\056\002\000" +
    "\002\057\003\000\002\057\003\000\002\060\006\000\002" +
    "\061\006\000\002\062\006\000\002\063\007\000\002\064" +
    "\003\000\002\064\002\000\002\065\007\000\002\065\002" +
    "\000\002\066\004\000\002\066\002\000\002\067\004\000" +
    "\002\070\013\000\002\071\003\000\002\071\002\000\002" +
    "\072\005\000\002\072\002\000\002\073\004\000\002\074" +
    "\004\000\002\074\002\000\002\075\004\000\002\075\004" +
    "\000\002\076\004\000\002\076\002\000\002\077\010\000" +
    "\002\100\003\000\002\100\002\000\002\101\004\000\002" +
    "\101\002\000\002\102\013\000\002\104\004\000\002\104" +
    "\002\000\002\105\004\000\002\106\004\000\002\106\002" +
    "\000\002\107\004\000\002\110\004\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\112\004\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\114" +
    "\004\000\002\115\004\000\002\116\003\000\002\116\003" +
    "\000\002\117\004\000\002\120\005\000\002\121\004\000" +
    "\002\122\004\000\002\122\002\000\002\123\014\000\002" +
    "\124\004\000\002\124\002\000\002\125\004\000\002\125" +
    "\002\000\002\126\004\000\002\127\004\000\002\127\002" +
    "\000\002\130\003\000\002\130\002\000\002\131\005\000" +
    "\002\131\005\000\002\132\011\000\002\133\004\000\002" +
    "\133\002\000\002\134\005\000\002\134\002\000\002\135" +
    "\004\000\002\135\002\000\002\136\004\000\002\136\004" +
    "\000\002\137\004\000\002\137\002\000\002\140\005\000" +
    "\002\140\005\000\002\140\002\000\002\141\005\000\002" +
    "\142\004\000\002\142\002\000\002\143\005\000\002\144" +
    "\003\000\002\144\003\000\002\144\002\000\002\145\005" +
    "\000\002\146\004\000\002\146\006\000\002\146\006\000" +
    "\002\146\006\000\002\147\004\000\002\147\002\000\002" +
    "\150\005\000\002\150\005\000\002\150\005\000\002\150" +
    "\005\000\002\150\005\000\002\150\006\000\002\150\006" +
    "\000\002\151\004\000\002\151\002\000\002\152\003\000" +
    "\002\152\003\000\002\153\004\000\002\153\002\000\002" +
    "\154\005\000\002\154\005\000\002\155\003\000\002\155" +
    "\004\000\002\155\002\000\002\156\011\000\002\156\011" +
    "\000\002\156\011\000\002\156\010\000\002\156\007\000" +
    "\002\156\002\000\002\157\010\000\002\157\006\000\002" +
    "\160\003\000\002\160\002\000\002\161\006\000\002\161" +
    "\006\000\002\162\005\000\002\162\002\000\002\163\006" +
    "\000\002\163\006\000\002\164\005\000\002\165\003\000" +
    "\002\165\003\000\002\165\003\000\002\165\003\000\002" +
    "\165\003\000\002\166\010\000\002\167\004\000\002\167" +
    "\003\000\002\170\004\000\002\170\002\000\002\171\004" +
    "\000\002\171\002\000\002\172\004\000\002\172\002\000" +
    "\002\305\004\000\002\305\002\000\002\173\015\000\002" +
    "\174\003\000\002\174\002\000\002\175\003\000\002\175" +
    "\003\000\002\175\002\000\002\176\005\000\002\177\004" +
    "\000\002\177\002\000\002\200\006\000\002\200\002\000" +
    "\002\201\004\000\002\202\004\000\002\202\002\000\002" +
    "\203\004\000\002\203\002\000\002\204\007\000\002\205" +
    "\005\000\002\205\002\000\002\206\003\000\002\206\002" +
    "\000\002\207\004\000\002\207\002\000\002\210\004\000" +
    "\002\210\002\000\002\211\004\000\002\211\002\000\002" +
    "\364\011\000\002\364\002\000\002\365\007\000\002\365" +
    "\002\000\002\366\006\000\002\366\002\000\002\367\004" +
    "\000\002\367\002\000\002\212\004\000\002\213\004\000" +
    "\002\214\004\000\002\214\002\000\002\215\003\000\002" +
    "\215\002\000\002\220\011\000\002\221\004\000\002\221" +
    "\002\000\002\224\004\000\002\224\002\000\002\225\004" +
    "\000\002\226\004\000\002\226\002\000\002\227\005\000" +
    "\002\227\002\000\002\230\005\000\002\231\003\000\002" +
    "\231\003\000\002\231\003\000\002\231\003\000\002\232" +
    "\005\000\002\233\003\000\002\233\003\000\002\233\003" +
    "\000\002\234\006\000\002\235\003\000\002\235\004\000" +
    "\002\235\002\000\002\236\004\000\002\237\004\000\002" +
    "\240\003\000\002\240\003\000\002\241\004\000\002\241" +
    "\002\000\002\242\004\000\002\243\006\000\002\244\003" +
    "\000\002\244\003\000\002\245\003\000\002\245\003\000" +
    "\002\312\004\000\002\247\004\000\002\247\002\000\002" +
    "\250\005\000\002\251\003\000\002\251\003\000\002\252" +
    "\004\000\002\252\006\000\002\253\004\000\002\254\004" +
    "\000\002\254\002\000\002\255\007\000\002\260\005\000" +
    "\002\260\002\000\002\261\006\000\002\262\003\000\002" +
    "\262\003\000\002\263\005\000\002\264\003\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\003" +
    "\000\002\265\006\000\002\266\005\000\002\266\002\000" +
    "\002\267\006\000\002\270\005\000\002\270\002\000\002" +
    "\271\006\000\002\272\005\000\002\272\002\000\002\273" +
    "\006\000\002\274\006\000\002\275\004\000\002\275\005" +
    "\000\002\276\005\000\002\276\002\000\002\277\005\000" +
    "\002\277\002\000\002\004\006\000\002\351\004\000\002" +
    "\355\003\000\002\355\003\000\002\363\006\000\002\362" +
    "\007\000\002\342\004\000\002\343\003\000\002\343\002" +
    "\000\002\313\006\000\002\314\003\000\002\314\003\000" +
    "\002\314\002\000\002\315\005\000\002\316\004\000\002" +
    "\316\002\000\002\317\003\000\002\317\003\000\002\317" +
    "\002\000\002\320\006\000\002\360\003\000\002\360\002" +
    "\000\002\321\006\000\002\322\003\000\002\322\003\000" +
    "\002\324\015\000\002\325\003\000\002\325\003\000\002" +
    "\327\004\000\002\327\002\000\002\326\005\000\002\326" +
    "\002\000\002\330\010\000\002\331\003\000\002\331\002" +
    "\000\002\332\003\000\002\333\003\000\002\333\002\000" +
    "\002\334\004\000\002\335\003\000\002\335\002\000\002" +
    "\336\003\000\002\337\003\000\002\337\002\000\002\341" +
    "\004\000\002\306\003\000\002\306\002\000\002\307\003" +
    "\000\002\307\002\000\002\354\006\000\002\352\004\000" +
    "\002\352\004\000\002\352\002\000\002\353\004\000\002" +
    "\353\002\000\002\340\003\000\002\340\003\000\002\346" +
    "\020\000\002\356\003\000\002\356\002\000\002\357\003" +
    "\000\002\347\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u033b\000\050\002\uffff\003\026\031\016\064\017\111" +
    "\023\132\047\146\036\157\024\164\037\166\046\176\053" +
    "\213\040\253\010\254\032\262\015\275\013\307\041\334" +
    "\045\337\012\001\002\000\054\002\uffee\003\uffee\031\uffee" +
    "\064\uffee\111\uffee\116\uffee\132\uffee\146\uffee\157\uffee\164" +
    "\uffee\166\uffee\176\uffee\213\uffee\253\uffee\254\uffee\262\uffee" +
    "\275\uffee\307\uffee\320\uffee\334\uffee\337\uffee\001\002\000" +
    "\054\002\uffec\003\uffec\031\uffec\064\uffec\111\uffec\116\uffec" +
    "\132\uffec\146\uffec\157\uffec\164\uffec\166\uffec\176\uffec\213" +
    "\uffec\253\uffec\254\uffec\262\uffec\275\uffec\307\uffec\320\uffec" +
    "\334\uffec\337\uffec\001\002\000\054\002\ufffb\003\ufffb\031" +
    "\ufffb\064\ufffb\111\ufffb\116\ufffb\132\ufffb\146\ufffb\157\ufffb" +
    "\164\ufffb\166\ufffb\176\ufffb\213\ufffb\253\ufffb\254\ufffb\262" +
    "\ufffb\275\ufffb\307\ufffb\320\ufffb\334\ufffb\337\ufffb\001\002" +
    "\000\054\002\ufff3\003\ufff3\031\ufff3\064\ufff3\111\ufff3\116" +
    "\ufff3\132\ufff3\146\ufff3\157\ufff3\164\ufff3\166\ufff3\176\ufff3" +
    "\213\ufff3\253\ufff3\254\ufff3\262\ufff3\275\ufff3\307\ufff3\320" +
    "\ufff3\334\ufff3\337\ufff3\001\002\000\004\220\u033b\001\002" +
    "\000\054\002\ufffa\003\ufffa\031\ufffa\064\ufffa\111\ufffa\116" +
    "\ufffa\132\ufffa\146\ufffa\157\ufffa\164\ufffa\166\ufffa\176\ufffa" +
    "\213\ufffa\253\ufffa\254\ufffa\262\ufffa\275\ufffa\307\ufffa\320" +
    "\ufffa\334\ufffa\337\ufffa\001\002\000\004\u0167\ufe46\001\002" +
    "\000\006\237\u0209\u0167\uffe1\001\002\000\004\002\u02fc\001" +
    "\002\000\010\107\uffe1\237\u0209\u0167\uffe1\001\002\000\006" +
    "\031\016\157\024\001\002\000\012\156\u02ae\220\u02b1\243" +
    "\u02ad\317\u02b2\001\002\000\054\002\ufff6\003\ufff6\031\ufff6" +
    "\064\ufff6\111\ufff6\116\ufff6\132\ufff6\146\ufff6\157\ufff6\164" +
    "\ufff6\166\ufff6\176\ufff6\213\ufff6\253\ufff6\254\ufff6\262\ufff6" +
    "\275\ufff6\307\ufff6\320\ufff6\334\ufff6\337\ufff6\001\002\000" +
    "\054\002\ufff5\003\ufff5\031\ufff5\064\ufff5\111\ufff5\116\ufff5" +
    "\132\ufff5\146\ufff5\157\ufff5\164\ufff5\166\ufff5\176\ufff5\213" +
    "\ufff5\253\ufff5\254\ufff5\262\ufff5\275\ufff5\307\ufff5\320\ufff5" +
    "\334\ufff5\337\ufff5\001\002\000\004\002\000\001\002\000" +
    "\006\242\276\245\275\001\002\000\046\007\uff2d\031\uff2d" +
    "\061\u0206\136\uff2d\210\uff2d\237\uff2d\276\u0204\376\uff2d\u010c" +
    "\uff2d\u012b\uff2d\u0130\uff2d\u013b\uff2d\u013c\uff2d\u0165\uff2d\u0166\uff2d" +
    "\u0167\uff2d\u0168\uff2d\u0169\uff2d\001\002\000\054\002\uffef\003" +
    "\uffef\031\uffef\064\uffef\111\uffef\116\uffef\132\uffef\146\uffef" +
    "\157\uffef\164\uffef\166\uffef\176\uffef\213\uffef\253\uffef\254" +
    "\uffef\262\uffef\275\uffef\307\uffef\320\uffef\334\uffef\337\uffef" +
    "\001\002\000\050\002\uffff\003\026\031\016\064\017\111" +
    "\023\132\047\146\036\157\024\164\037\166\046\176\053" +
    "\213\040\253\010\254\032\262\015\275\013\307\041\334" +
    "\045\337\012\001\002\000\054\002\ufff4\003\ufff4\031\ufff4" +
    "\064\ufff4\111\ufff4\116\ufff4\132\ufff4\146\ufff4\157\ufff4\164" +
    "\ufff4\166\ufff4\176\ufff4\213\ufff4\253\ufff4\254\ufff4\262\ufff4" +
    "\275\ufff4\307\ufff4\320\ufff4\334\ufff4\337\ufff4\001\002\000" +
    "\054\002\ufff2\003\ufff2\031\ufff2\064\ufff2\111\ufff2\116\ufff2" +
    "\132\ufff2\146\ufff2\157\ufff2\164\ufff2\166\ufff2\176\ufff2\213" +
    "\ufff2\253\ufff2\254\ufff2\262\ufff2\275\ufff2\307\ufff2\320\ufff2" +
    "\334\ufff2\337\ufff2\001\002\000\054\002\ufff9\003\ufff9\031" +
    "\ufff9\064\ufff9\111\ufff9\116\ufff9\132\ufff9\146\ufff9\157\ufff9" +
    "\164\ufff9\166\ufff9\176\ufff9\213\ufff9\253\ufff9\254\ufff9\262" +
    "\ufff9\275\ufff9\307\ufff9\320\ufff9\334\ufff9\337\ufff9\001\002" +
    "\000\006\040\055\u0167\u01fc\001\002\000\004\u0167\066\001" +
    "\002\000\054\002\ufff8\003\ufff8\031\ufff8\064\ufff8\111\ufff8" +
    "\116\ufff8\132\ufff8\146\ufff8\157\ufff8\164\ufff8\166\ufff8\176" +
    "\ufff8\213\ufff8\253\ufff8\254\ufff8\262\ufff8\275\ufff8\307\ufff8" +
    "\320\ufff8\334\ufff8\337\ufff8\001\002\000\054\002\ufffc\003" +
    "\ufffc\031\ufffc\064\ufffc\111\ufffc\116\ufffc\132\ufffc\146\ufffc" +
    "\157\ufffc\164\ufffc\166\ufffc\176\ufffc\213\ufffc\253\ufffc\254" +
    "\ufffc\262\ufffc\275\ufffc\307\ufffc\320\ufffc\334\ufffc\337\ufffc" +
    "\001\002\000\006\242\276\245\275\001\002\000\006\172" +
    "\u01d8\u0167\uff74\001\002\000\032\060\ufec7\115\ufec7\152\ufef0" +
    "\156\ufef0\220\u0105\236\ufef0\243\u0100\267\u0102\306\u0101\310" +
    "\u0109\317\ufec7\346\ufec7\001\002\000\014\156\312\220\317" +
    "\243\313\306\314\317\316\001\002\000\054\002\ufff0\003" +
    "\ufff0\031\ufff0\064\ufff0\111\ufff0\116\ufff0\132\ufff0\146\ufff0" +
    "\157\ufff0\164\ufff0\166\ufff0\176\ufff0\213\ufff0\253\ufff0\254" +
    "\ufff0\262\ufff0\275\ufff0\307\ufff0\320\ufff0\334\ufff0\337\ufff0" +
    "\001\002\000\054\002\ufff1\003\ufff1\031\ufff1\064\ufff1\111" +
    "\ufff1\116\ufff1\132\ufff1\146\ufff1\157\ufff1\164\ufff1\166\ufff1" +
    "\176\ufff1\213\ufff1\253\ufff1\254\ufff1\262\ufff1\275\ufff1\307" +
    "\ufff1\320\ufff1\334\ufff1\337\ufff1\001\002\000\050\002\uffff" +
    "\003\026\031\016\064\017\111\023\132\047\146\036\157" +
    "\024\164\037\166\046\176\053\213\040\253\010\254\032" +
    "\262\015\275\013\307\041\334\045\337\012\001\002\000" +
    "\004\u0167\ufe47\001\002\000\014\024\ufe6f\044\ufe6f\242\276" +
    "\245\275\u0102\ufe6f\001\002\000\020\024\ufe69\040\ufe69\044" +
    "\ufe69\242\276\245\275\u0102\ufe69\u0167\ufe69\001\002\000\054" +
    "\002\ufff7\003\ufff7\031\ufff7\064\ufff7\111\ufff7\116\ufff7\132" +
    "\ufff7\146\ufff7\157\ufff7\164\ufff7\166\ufff7\176\ufff7\213\ufff7" +
    "\253\ufff7\254\ufff7\262\ufff7\275\ufff7\307\ufff7\320\ufff7\334" +
    "\ufff7\337\ufff7\001\002\000\054\002\uffed\003\uffed\031\uffed" +
    "\064\uffed\111\uffed\116\uffed\132\uffed\146\uffed\157\uffed\164" +
    "\uffed\166\uffed\176\uffed\213\uffed\253\uffed\254\uffed\262\uffed" +
    "\275\uffed\307\uffed\320\uffed\334\uffed\337\uffed\001\002\000" +
    "\054\002\uffeb\003\uffeb\031\uffeb\064\uffeb\111\uffeb\116\uffeb" +
    "\132\uffeb\146\uffeb\157\uffeb\164\uffeb\166\uffeb\176\uffeb\213" +
    "\uffeb\253\uffeb\254\uffeb\262\uffeb\275\uffeb\307\uffeb\320\uffeb" +
    "\334\uffeb\337\uffeb\001\002\000\004\040\055\001\002\000" +
    "\004\004\057\001\002\000\004\u0167\056\001\002\000\024" +
    "\004\ufe7d\024\ufe7d\025\ufe7d\044\ufe7d\365\ufe7d\u0102\ufe7d\u0103" +
    "\ufe7d\u011c\ufe7d\u0158\ufe7d\001\002\000\030\031\106\136\074" +
    "\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\116\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\020\uffbd\024\uffbd\025\uffbd\031\uffbd\032\uffbd\044\uffbd" +
    "\067\uffbd\075\uffbd\100\uffbd\107\uffbd\114\uffbd\116\uffbd\126" +
    "\uffbd\131\uffbd\153\uffbd\175\uffbd\214\uffbd\231\uffbd\241\uffbd" +
    "\270\uffbd\310\uffbd\313\uffbd\315\uffbd\320\uffbd\325\uffbd\330" +
    "\uffbd\u0102\uffbd\u0161\uffbd\u0168\uffbd\001\002\000\116\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\020\uff8f\024\uff8f\025\uff8f\031\uff8f\032\uff8f" +
    "\044\uff8f\067\uff8f\075\uff8f\100\uff8f\107\uff8f\114\uff8f\116" +
    "\uff8f\126\uff8f\131\uff8f\153\uff8f\175\uff8f\214\uff8f\231\uff8f" +
    "\241\uff8f\270\uff8f\310\uff8f\313\uff8f\315\uff8f\320\uff8f\325" +
    "\uff8f\330\uff8f\u0102\uff8f\u0161\uff8f\u0168\uff8f\001\002\000\004" +
    "\031\270\001\002\000\116\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d" +
    "\024\uff8d\025\uff8d\031\uff8d\032\uff8d\044\uff8d\067\uff8d\075" +
    "\uff8d\100\uff8d\107\uff8d\114\uff8d\116\uff8d\126\uff8d\131\uff8d" +
    "\153\uff8d\175\uff8d\214\uff8d\231\uff8d\241\uff8d\270\uff8d\310" +
    "\uff8d\313\uff8d\315\uff8d\320\uff8d\325\uff8d\330\uff8d\u0102\uff8d" +
    "\u0161\uff8d\u0168\uff8d\001\002\000\116\004\uffbf\005\uffbf\006" +
    "\uffbf\007\265\010\263\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\020\uffbf\024\uffbf\025\uffbf\031\uffbf\032\uffbf\044\uffbf\067" +
    "\uffbf\075\uffbf\100\uffbf\107\uffbf\114\uffbf\116\uffbf\126\uffbf" +
    "\131\uffbf\153\uffbf\175\uffbf\214\uffbf\231\uffbf\241\uffbf\270" +
    "\uffbf\310\uffbf\313\uffbf\315\uffbf\320\uffbf\325\uffbf\330\uffbf" +
    "\u0102\uffbf\u0161\uffbf\u0168\uffbf\001\002\000\054\024\uffc8\025" +
    "\uffc8\031\uffc8\032\uffc8\044\uffc8\067\uffc8\075\uffc8\100\uffc8" +
    "\116\uffc8\126\uffc8\131\uffc8\231\uffc8\270\uffc8\310\uffc8\313" +
    "\uffc8\315\uffc8\320\uffc8\325\uffc8\u0102\uffc8\u0161\uffc8\u0168\uffc8" +
    "\001\002\000\176\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\024\uffe8" +
    "\025\uffe8\026\256\031\uffe8\032\uffe8\040\uffe8\044\uffe8\056" +
    "\uffe8\064\uffe8\067\uffe8\075\uffe8\100\uffe8\107\uffe8\112\uffe8" +
    "\114\uffe8\116\uffe8\126\uffe8\127\uffe8\131\uffe8\136\uffe8\153" +
    "\uffe8\161\uffe8\175\uffe8\176\uffe8\200\uffe8\211\uffe8\214\uffe8" +
    "\231\uffe8\241\uffe8\263\uffe8\270\uffe8\307\uffe8\310\uffe8\311" +
    "\uffe8\313\uffe8\315\uffe8\320\uffe8\325\uffe8\330\uffe8\336\uffe8" +
    "\376\uffe8\u0102\uffe8\u012b\uffe8\u0130\uffe8\u013b\uffe8\u013c\uffe8\u0161" +
    "\uffe8\u0165\uffe8\u0166\uffe8\u0167\uffe8\u0168\uffe8\u0169\uffe8\001\002" +
    "\000\104\004\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020" +
    "\uff8c\024\uff8c\025\uff8c\031\uff8c\032\uff8c\044\uff8c\067\uff8c" +
    "\075\uff8c\100\uff8c\107\uff8c\114\uff8c\116\uff8c\126\uff8c\131" +
    "\uff8c\153\uff8c\175\uff8c\214\uff8c\231\uff8c\241\uff8c\270\uff8c" +
    "\310\uff8c\313\uff8c\315\uff8c\320\uff8c\325\uff8c\u0102\uff8c\u0161" +
    "\uff8c\u0168\uff8c\001\002\000\104\004\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\020\uff89\024\uff89\025\uff89\031\uff89\032" +
    "\uff89\044\uff89\067\uff89\075\uff89\100\uff89\107\uff89\114\uff89" +
    "\116\uff89\126\uff89\131\uff89\153\uff89\175\uff89\214\uff89\231" +
    "\uff89\241\uff89\270\uff89\310\uff89\313\uff89\315\uff89\320\uff89" +
    "\325\uff89\u0102\uff89\u0161\uff89\u0168\uff89\001\002\000\104\004" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\020\uff8a\024\uff8a" +
    "\025\uff8a\031\uff8a\032\uff8a\044\uff8a\067\uff8a\075\uff8a\100" +
    "\uff8a\107\uff8a\114\uff8a\116\uff8a\126\uff8a\131\uff8a\153\uff8a" +
    "\175\uff8a\214\uff8a\231\uff8a\241\uff8a\270\uff8a\310\uff8a\313" +
    "\uff8a\315\uff8a\320\uff8a\325\uff8a\u0102\uff8a\u0161\uff8a\u0168\uff8a" +
    "\001\002\000\104\004\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\020\uff8b\024\uff8b\025\uff8b\031\uff8b\032\uff8b\044\uff8b" +
    "\067\uff8b\075\uff8b\100\uff8b\107\uff8b\114\uff8b\116\uff8b\126" +
    "\uff8b\131\uff8b\153\uff8b\175\uff8b\214\uff8b\231\uff8b\241\uff8b" +
    "\270\uff8b\310\uff8b\313\uff8b\315\uff8b\320\uff8b\325\uff8b\u0102" +
    "\uff8b\u0161\uff8b\u0168\uff8b\001\002\000\054\024\uffc7\025\uffc7" +
    "\031\uffc7\032\uffc7\044\uffc7\067\uffc7\075\uffc7\100\uffc7\116" +
    "\uffc7\126\uffc7\131\uffc7\231\uffc7\270\uffc7\310\uffc7\313\uffc7" +
    "\315\uffc7\320\uffc7\325\uffc7\u0102\uffc7\u0161\uffc7\u0168\uffc7\001" +
    "\002\000\036\031\106\136\074\315\uff7c\320\uff7c\325\uff7c" +
    "\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\004\031\141\001\002" +
    "\000\004\031\136\001\002\000\116\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\020\uff8e\024\uff8e\025\uff8e\031\uff8e\032\uff8e\044\uff8e\067" +
    "\uff8e\075\uff8e\100\uff8e\107\uff8e\114\uff8e\116\uff8e\126\uff8e" +
    "\131\uff8e\153\uff8e\175\uff8e\214\uff8e\231\uff8e\241\uff8e\270" +
    "\uff8e\310\uff8e\313\uff8e\315\uff8e\320\uff8e\325\uff8e\330\uff8e" +
    "\u0102\uff8e\u0161\uff8e\u0168\uff8e\001\002\000\104\004\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\020\uff88\024\uff88\025\uff88" +
    "\031\uff88\032\uff88\044\uff88\067\uff88\075\uff88\100\uff88\107" +
    "\uff88\114\uff88\116\uff88\126\uff88\131\uff88\153\uff88\175\uff88" +
    "\214\uff88\231\uff88\241\uff88\270\uff88\310\uff88\313\uff88\315" +
    "\uff88\320\uff88\325\uff88\u0102\uff88\u0161\uff88\u0168\uff88\001\002" +
    "\000\112\004\uffc3\005\133\006\131\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\020\uffc3\024\uffc3\025\uffc3\031\uffc3\032\uffc3" +
    "\044\uffc3\067\uffc3\075\uffc3\100\uffc3\107\uffc3\114\uffc3\116" +
    "\uffc3\126\uffc3\131\uffc3\153\uffc3\175\uffc3\214\uffc3\231\uffc3" +
    "\241\uffc3\270\uffc3\310\uffc3\313\uffc3\315\uffc3\320\uffc3\325" +
    "\uffc3\330\uffc3\u0102\uffc3\u0161\uffc3\u0168\uffc3\001\002\000\004" +
    "\031\126\001\002\000\010\024\125\044\124\u0102\123\001" +
    "\002\000\004\031\113\001\002\000\116\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\020\uffbc\024\uffbc\025\uffbc\031\uffbc\032\uffbc\044\uffbc" +
    "\067\uffbc\075\uffbc\100\uffbc\107\uffbc\114\uffbc\116\uffbc\126" +
    "\uffbc\131\uffbc\153\uffbc\175\uffbc\214\uffbc\231\uffbc\241\uffbc" +
    "\270\uffbc\310\uffbc\313\uffbc\315\uffbc\320\uffbc\325\uffbc\330" +
    "\uffbc\u0102\uffbc\u0161\uffbc\u0168\uffbc\001\002\000\014\031\106" +
    "\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000\116\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\024\uffbb\025\uffbb\031\uffbb\032" +
    "\uffbb\044\uffbb\067\uffbb\075\uffbb\100\uffbb\107\uffbb\114\uffbb" +
    "\116\uffbb\126\uffbb\131\uffbb\153\uffbb\175\uffbb\214\uffbb\231" +
    "\uffbb\241\uffbb\270\uffbb\310\uffbb\313\uffbb\315\uffbb\320\uffbb" +
    "\325\uffbb\330\uffbb\u0102\uffbb\u0161\uffbb\u0168\uffbb\001\002\000" +
    "\054\024\uffc9\025\uffc9\031\uffc9\032\uffc9\044\uffc9\067\uffc9" +
    "\075\uffc9\100\uffc9\116\uffc9\126\uffc9\131\uffc9\231\uffc9\270" +
    "\uffc9\310\uffc9\313\uffc9\315\uffc9\320\uffc9\325\uffc9\u0102\uffc9" +
    "\u0161\uffc9\u0168\uffc9\001\002\000\004\032\112\001\002\000" +
    "\116\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\020\uffbe\024\uffbe\025\uffbe\031" +
    "\uffbe\032\uffbe\044\uffbe\067\uffbe\075\uffbe\100\uffbe\107\uffbe" +
    "\114\uffbe\116\uffbe\126\uffbe\131\uffbe\153\uffbe\175\uffbe\214" +
    "\uffbe\231\uffbe\241\uffbe\270\uffbe\310\uffbe\313\uffbe\315\uffbe" +
    "\320\uffbe\325\uffbe\330\uffbe\u0102\uffbe\u0161\uffbe\u0168\uffbe\001" +
    "\002\000\034\007\uff84\031\uff84\136\uff84\276\114\376\uff84" +
    "\u012b\uff84\u0130\uff84\u013b\uff84\u013c\uff84\u0165\uff84\u0166\uff84\u0167" +
    "\uff84\u0169\uff84\001\002\000\032\007\uff85\031\uff85\136\uff85" +
    "\376\uff85\u012b\uff85\u0130\uff85\u013b\uff85\u013c\uff85\u0165\uff85\u0166" +
    "\uff85\u0167\uff85\u0169\uff85\001\002\000\032\007\117\031\106" +
    "\136\074\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165" +
    "\061\u0166\077\u0167\066\u0169\063\001\002\000\004\032\121" +
    "\001\002\000\004\032\uff83\001\002\000\004\032\uff82\001" +
    "\002\000\104\004\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\020\uff86\024\uff86\025\uff86\031\uff86\032\uff86\044\uff86\067" +
    "\uff86\075\uff86\100\uff86\107\uff86\114\uff86\116\uff86\126\uff86" +
    "\131\uff86\153\uff86\175\uff86\214\uff86\231\uff86\241\uff86\270" +
    "\uff86\310\uff86\313\uff86\315\uff86\320\uff86\325\uff86\u0102\uff86" +
    "\u0161\uff86\u0168\uff86\001\002\000\054\002\ufe79\003\ufe79\031" +
    "\ufe79\064\ufe79\111\ufe79\116\ufe79\132\ufe79\146\ufe79\157\ufe79" +
    "\164\ufe79\166\ufe79\176\ufe79\213\ufe79\253\ufe79\254\ufe79\262" +
    "\ufe79\275\ufe79\307\ufe79\320\ufe79\334\ufe79\337\ufe79\001\002" +
    "\000\066\002\uffd7\003\uffd7\024\uffd7\031\uffd7\032\uffd7\044" +
    "\uffd7\064\uffd7\111\uffd7\116\uffd7\132\uffd7\146\uffd7\157\uffd7" +
    "\164\uffd7\166\uffd7\176\uffd7\213\uffd7\253\uffd7\254\uffd7\262" +
    "\uffd7\275\uffd7\307\uffd7\320\uffd7\334\uffd7\336\uffd7\337\uffd7" +
    "\u0102\uffd7\001\002\000\066\002\uffd9\003\uffd9\024\uffd9\031" +
    "\uffd9\032\uffd9\044\uffd9\064\uffd9\111\uffd9\116\uffd9\132\uffd9" +
    "\146\uffd9\157\uffd9\164\uffd9\166\uffd9\176\uffd9\213\uffd9\253" +
    "\uffd9\254\uffd9\262\uffd9\275\uffd9\307\uffd9\320\uffd9\334\uffd9" +
    "\336\uffd9\337\uffd9\u0102\uffd9\001\002\000\066\002\uffd8\003" +
    "\uffd8\024\uffd8\031\uffd8\032\uffd8\044\uffd8\064\uffd8\111\uffd8" +
    "\116\uffd8\132\uffd8\146\uffd8\157\uffd8\164\uffd8\166\uffd8\176" +
    "\uffd8\213\uffd8\253\uffd8\254\uffd8\262\uffd8\275\uffd8\307\uffd8" +
    "\320\uffd8\334\uffd8\336\uffd8\337\uffd8\u0102\uffd8\001\002\000" +
    "\030\031\106\136\074\376\075\u012b\062\u0130\104\u013b\102" +
    "\u013c\076\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000" +
    "\004\032\130\001\002\000\104\004\uff81\013\uff81\014\uff81" +
    "\015\uff81\016\uff81\020\uff81\024\uff81\025\uff81\031\uff81\032" +
    "\uff81\044\uff81\067\uff81\075\uff81\100\uff81\107\uff81\114\uff81" +
    "\116\uff81\126\uff81\131\uff81\153\uff81\175\uff81\214\uff81\231" +
    "\uff81\241\uff81\270\uff81\310\uff81\313\uff81\315\uff81\320\uff81" +
    "\325\uff81\u0102\uff81\u0161\uff81\u0168\uff81\001\002\000\014\031" +
    "\106\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000\106" +
    "\004\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\024" +
    "\uffc6\025\uffc6\031\uffc6\032\uffc6\044\uffc6\067\uffc6\075\uffc6" +
    "\100\uffc6\107\uffc6\114\uffc6\116\uffc6\126\uffc6\131\uffc6\153" +
    "\uffc6\175\uffc6\214\uffc6\231\uffc6\241\uffc6\270\uffc6\310\uffc6" +
    "\313\uffc6\315\uffc6\320\uffc6\325\uffc6\330\uffc6\u0102\uffc6\u0161" +
    "\uffc6\u0168\uffc6\001\002\000\014\031\106\u0165\061\u0166\077" +
    "\u0167\066\u0169\063\001\002\000\106\004\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\024\uffc5\025\uffc5\031\uffc5" +
    "\032\uffc5\044\uffc5\067\uffc5\075\uffc5\100\uffc5\107\uffc5\114" +
    "\uffc5\116\uffc5\126\uffc5\131\uffc5\153\uffc5\175\uffc5\214\uffc5" +
    "\231\uffc5\241\uffc5\270\uffc5\310\uffc5\313\uffc5\315\uffc5\320" +
    "\uffc5\325\uffc5\330\uffc5\u0102\uffc5\u0161\uffc5\u0168\uffc5\001\002" +
    "\000\106\004\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\024\uffc4\025\uffc4\031\uffc4\032\uffc4\044\uffc4\067\uffc4" +
    "\075\uffc4\100\uffc4\107\uffc4\114\uffc4\116\uffc4\126\uffc4\131" +
    "\uffc4\153\uffc4\175\uffc4\214\uffc4\231\uffc4\241\uffc4\270\uffc4" +
    "\310\uffc4\313\uffc4\315\uffc4\320\uffc4\325\uffc4\330\uffc4\u0102" +
    "\uffc4\u0161\uffc4\u0168\uffc4\001\002\000\030\031\106\136\074" +
    "\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\004\032\140\001\002" +
    "\000\104\004\uff80\013\uff80\014\uff80\015\uff80\016\uff80\020" +
    "\uff80\024\uff80\025\uff80\031\uff80\032\uff80\044\uff80\067\uff80" +
    "\075\uff80\100\uff80\107\uff80\114\uff80\116\uff80\126\uff80\131" +
    "\uff80\153\uff80\175\uff80\214\uff80\231\uff80\241\uff80\270\uff80" +
    "\310\uff80\313\uff80\315\uff80\320\uff80\325\uff80\u0102\uff80\u0161" +
    "\uff80\u0168\uff80\001\002\000\030\031\106\136\074\376\075" +
    "\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077\u0167" +
    "\066\u0169\063\001\002\000\004\032\143\001\002\000\104" +
    "\004\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020\uff87\024" +
    "\uff87\025\uff87\031\uff87\032\uff87\044\uff87\067\uff87\075\uff87" +
    "\100\uff87\107\uff87\114\uff87\116\uff87\126\uff87\131\uff87\153" +
    "\uff87\175\uff87\214\uff87\231\uff87\241\uff87\270\uff87\310\uff87" +
    "\313\uff87\315\uff87\320\uff87\325\uff87\u0102\uff87\u0161\uff87\u0168" +
    "\uff87\001\002\000\010\315\uff7a\320\uff7a\325\147\001\002" +
    "\000\010\315\uff7d\320\uff7d\325\uff7d\001\002\000\006\315" +
    "\252\320\uff78\001\002\000\024\031\uff98\101\uff98\177\uff98" +
    "\241\151\u0165\uff98\u0166\uff98\u0167\uff98\u0168\uff98\u0169\uff98\001" +
    "\002\000\022\031\106\101\164\177\163\u0165\061\u0166\077" +
    "\u0167\066\u0168\161\u0169\063\001\002\000\034\031\uff99\101" +
    "\uff99\177\uff99\376\uff99\u012b\uff99\u0130\uff99\u013b\uff99\u013c\uff99" +
    "\u0165\uff99\u0166\uff99\u0167\uff99\u0168\uff99\u0169\uff99\001\002\000" +
    "\004\231\153\001\002\000\016\031\106\u0165\061\u0166\077" +
    "\u0167\066\u0168\154\u0169\063\001\002\000\010\315\uffa0\320" +
    "\uffa0\325\uffa0\001\002\000\010\315\uffa1\320\uffa1\325\uffa1" +
    "\001\002\000\010\315\uff7a\320\uff7a\325\147\001\002\000" +
    "\006\315\uff7b\320\uff7b\001\002\000\026\024\uffa4\031\uffa4" +
    "\044\uffa4\067\244\126\uffa4\131\uffa4\231\uffa4\310\247\313" +
    "\uffa4\u0102\uffa4\001\002\000\030\004\212\013\211\014\201" +
    "\015\204\016\207\020\203\114\uff98\153\uff98\175\216\214" +
    "\215\241\213\001\002\000\030\004\212\013\211\014\201" +
    "\015\204\016\207\020\203\114\uff98\153\uff98\175\216\214" +
    "\215\241\213\001\002\000\004\031\176\001\002\000\004" +
    "\031\165\001\002\000\006\007\170\u0167\066\001\002\000" +
    "\004\032\175\001\002\000\004\025\173\001\002\000\004" +
    "\025\171\001\002\000\004\u0168\172\001\002\000\004\032" +
    "\uffb3\001\002\000\004\u0168\174\001\002\000\004\032\uffb4" +
    "\001\002\000\030\024\uffb7\031\uffb7\032\uffb7\044\uffb7\067" +
    "\uffb7\126\uffb7\131\uffb7\231\uffb7\310\uffb7\313\uffb7\u0102\uffb7" +
    "\001\002\000\006\007\170\u0167\066\001\002\000\004\032" +
    "\200\001\002\000\030\024\uffb8\031\uffb8\032\uffb8\044\uffb8" +
    "\067\uffb8\126\uffb8\131\uffb8\231\uffb8\310\uffb8\313\uffb8\u0102" +
    "\uffb8\001\002\000\030\031\uff9a\136\uff9a\376\uff9a\u012b\uff9a" +
    "\u0130\uff9a\u013b\uff9a\u013c\uff9a\u0165\uff9a\u0166\uff9a\u0167\uff9a\u0169" +
    "\uff9a\001\002\000\006\114\236\153\235\001\002\000\030" +
    "\031\uff9f\136\uff9f\376\uff9f\u012b\uff9f\u0130\uff9f\u013b\uff9f\u013c" +
    "\uff9f\u0165\uff9f\u0166\uff9f\u0167\uff9f\u0169\uff9f\001\002\000\030" +
    "\031\uff9e\136\uff9e\376\uff9e\u012b\uff9e\u0130\uff9e\u013b\uff9e\u013c" +
    "\uff9e\u0165\uff9e\u0166\uff9e\u0167\uff9e\u0169\uff9e\001\002\000\032" +
    "\024\uffab\031\uffab\032\uffab\044\uffab\067\uffab\126\uffab\131" +
    "\uffab\231\uffab\310\uffab\313\uffab\u0102\uffab\u0168\uffab\001\002" +
    "\000\030\024\uffba\031\uffba\032\uffba\044\uffba\067\uffba\126" +
    "\uffba\131\uffba\231\uffba\310\uffba\313\uffba\u0102\uffba\001\002" +
    "\000\030\031\uff9d\136\uff9d\376\uff9d\u012b\uff9d\u0130\uff9d\u013b" +
    "\uff9d\u013c\uff9d\u0165\uff9d\u0166\uff9d\u0167\uff9d\u0169\uff9d\001\002" +
    "\000\004\u0168\232\001\002\000\030\031\uff9b\136\uff9b\376" +
    "\uff9b\u012b\uff9b\u0130\uff9b\u013b\uff9b\u013c\uff9b\u0165\uff9b\u0166\uff9b" +
    "\u0167\uff9b\u0169\uff9b\001\002\000\032\031\uff9c\136\uff9c\376" +
    "\uff9c\u012b\uff9c\u0130\uff9c\u013b\uff9c\u013c\uff9c\u0165\uff9c\u0166\uff9c" +
    "\u0167\uff9c\u0168\uffaf\u0169\uff9c\001\002\000\012\004\225\114" +
    "\uff99\153\uff99\214\215\001\002\000\030\031\106\136\074" +
    "\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\004\u0168\uffb0\001\002" +
    "\000\006\241\220\244\221\001\002\000\032\024\uffad\031" +
    "\uffad\032\uffad\044\uffad\067\uffad\126\uffad\131\uffad\231\uffad" +
    "\310\uffad\313\uffad\u0102\uffad\u0168\uffad\001\002\000\004\244" +
    "\222\001\002\000\032\024\uffa9\031\uffa9\032\uffa9\044\uffa9" +
    "\067\uffa9\126\uffa9\131\uffa9\231\uffa9\310\uffa9\313\uffa9\u0102" +
    "\uffa9\u0168\uffa9\001\002\000\032\024\uffaa\031\uffaa\032\uffaa" +
    "\044\uffaa\067\uffaa\126\uffaa\131\uffaa\231\uffaa\310\uffaa\313" +
    "\uffaa\u0102\uffaa\u0168\uffaa\001\002\000\032\024\uffae\031\uffae" +
    "\032\uffae\044\uffae\067\uffae\126\uffae\131\uffae\231\uffae\310" +
    "\uffae\313\uffae\u0102\uffae\u0168\uffae\001\002\000\004\u0168\226" +
    "\001\002\000\004\u0168\uffaf\001\002\000\034\024\uffb5\031" +
    "\uffb5\032\uffb5\044\uffb5\067\uffb5\126\uffb5\131\uffb5\231\uffb5" +
    "\310\uffb5\313\uffb5\326\227\u0102\uffb5\u0168\uffb5\001\002\000" +
    "\004\u0168\231\001\002\000\032\024\uffb2\031\uffb2\032\uffb2" +
    "\044\uffb2\067\uffb2\126\uffb2\131\uffb2\231\uffb2\310\uffb2\313" +
    "\uffb2\u0102\uffb2\u0168\uffb2\001\002\000\032\024\uffb6\031\uffb6" +
    "\032\uffb6\044\uffb6\067\uffb6\126\uffb6\131\uffb6\231\uffb6\310" +
    "\uffb6\313\uffb6\u0102\uffb6\u0168\uffb6\001\002\000\034\024\uffb5" +
    "\031\uffb5\032\uffb5\044\uffb5\067\uffb5\126\uffb5\131\uffb5\231" +
    "\uffb5\310\uffb5\313\uffb5\326\227\u0102\uffb5\u0168\uffb5\001\002" +
    "\000\032\024\uffb1\031\uffb1\032\uffb1\044\uffb1\067\uffb1\126" +
    "\uffb1\131\uffb1\231\uffb1\310\uffb1\313\uffb1\u0102\uffb1\u0168\uffb1" +
    "\001\002\000\032\024\uffac\031\uffac\032\uffac\044\uffac\067" +
    "\uffac\126\uffac\131\uffac\231\uffac\310\uffac\313\uffac\u0102\uffac" +
    "\u0168\uffac\001\002\000\014\031\106\u0165\061\u0166\077\u0167" +
    "\066\u0169\063\001\002\000\014\031\106\u0165\061\u0166\077" +
    "\u0167\066\u0169\063\001\002\000\004\067\240\001\002\000" +
    "\014\031\106\u0165\061\u0166\077\u0167\066\u0169\063\001\002" +
    "\000\032\024\uffa7\031\uffa7\032\uffa7\044\uffa7\067\uffa7\126" +
    "\uffa7\131\uffa7\231\uffa7\310\uffa7\313\uffa7\u0102\uffa7\u0168\uffa7" +
    "\001\002\000\032\024\uffa8\031\uffa8\032\uffa8\044\uffa8\067" +
    "\uffa8\126\uffa8\131\uffa8\231\uffa8\310\uffa8\313\uffa8\u0102\uffa8" +
    "\u0168\uffa8\001\002\000\030\024\uffb9\031\uffb9\032\uffb9\044" +
    "\uffb9\067\uffb9\126\uffb9\131\uffb9\231\uffb9\310\uffb9\313\uffb9" +
    "\u0102\uffb9\001\002\000\036\031\uffa3\101\uffa3\177\uffa3\241" +
    "\uffa3\376\uffa3\u012b\uffa3\u0130\uffa3\u013b\uffa3\u013c\uffa3\u0165\uffa3" +
    "\u0166\uffa3\u0167\uffa3\u0168\uffa3\u0169\uffa3\001\002\000\022\024" +
    "\uffa6\031\uffa6\044\uffa6\126\uffa6\131\uffa6\231\uffa6\313\uffa6" +
    "\u0102\uffa6\001\002\000\024\031\uff98\101\uff98\177\uff98\241" +
    "\151\u0165\uff98\u0166\uff98\u0167\uff98\u0168\uff98\u0169\uff98\001\002" +
    "\000\036\031\uffa2\101\uffa2\177\uffa2\241\uffa2\376\uffa2\u012b" +
    "\uffa2\u0130\uffa2\u013b\uffa2\u013c\uffa2\u0165\uffa2\u0166\uffa2\u0167\uffa2" +
    "\u0168\uffa2\u0169\uffa2\001\002\000\022\024\uffa5\031\uffa5\044" +
    "\uffa5\126\uffa5\131\uffa5\231\uffa5\313\uffa5\u0102\uffa5\001\002" +
    "\000\004\320\254\001\002\000\016\031\106\u0165\061\u0166" +
    "\077\u0167\066\u0168\154\u0169\063\001\002\000\004\320\uff79" +
    "\001\002\000\056\024\uff7e\025\uff7e\031\uff7e\032\uff7e\044" +
    "\uff7e\067\uff7e\075\uff7e\100\uff7e\107\uff7e\116\uff7e\126\uff7e" +
    "\131\uff7e\231\uff7e\270\uff7e\310\uff7e\313\uff7e\315\uff7e\320" +
    "\uff7e\325\uff7e\u0102\uff7e\u0161\uff7e\u0168\uff7e\001\002\000\174" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\020\uffea\024\uffea\025\uffea\031\uffea" +
    "\032\uffea\040\uffea\044\uffea\056\uffea\064\uffea\067\uffea\075" +
    "\uffea\100\uffea\107\uffea\112\uffea\114\uffea\116\uffea\126\uffea" +
    "\127\uffea\131\uffea\136\uffea\153\uffea\161\uffea\175\uffea\176" +
    "\uffea\200\uffea\211\uffea\214\uffea\231\uffea\241\uffea\263\uffea" +
    "\270\uffea\307\uffea\310\uffea\311\uffea\313\uffea\315\uffea\320" +
    "\uffea\325\uffea\330\uffea\336\uffea\376\uffea\u0102\uffea\u012b\uffea" +
    "\u0130\uffea\u013b\uffea\u013c\uffea\u0161\uffea\u0165\uffea\u0166\uffea\u0167" +
    "\uffea\u0168\uffea\u0169\uffea\001\002\000\004\u0167\257\001\002" +
    "\000\176\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\024\uffe6\025\uffe6" +
    "\026\261\031\uffe6\032\uffe6\040\uffe6\044\uffe6\056\uffe6\064" +
    "\uffe6\067\uffe6\075\uffe6\100\uffe6\107\uffe6\112\uffe6\114\uffe6" +
    "\116\uffe6\126\uffe6\127\uffe6\131\uffe6\136\uffe6\153\uffe6\161" +
    "\uffe6\175\uffe6\176\uffe6\200\uffe6\211\uffe6\214\uffe6\231\uffe6" +
    "\241\uffe6\263\uffe6\270\uffe6\307\uffe6\310\uffe6\311\uffe6\313" +
    "\uffe6\315\uffe6\320\uffe6\325\uffe6\330\uffe6\336\uffe6\376\uffe6" +
    "\u0102\uffe6\u012b\uffe6\u0130\uffe6\u013b\uffe6\u013c\uffe6\u0161\uffe6\u0165" +
    "\uffe6\u0166\uffe6\u0167\uffe6\u0168\uffe6\u0169\uffe6\001\002\000\174" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\020\uffe9\024\uffe9\025\uffe9\031\uffe9" +
    "\032\uffe9\040\uffe9\044\uffe9\056\uffe9\064\uffe9\067\uffe9\075" +
    "\uffe9\100\uffe9\107\uffe9\112\uffe9\114\uffe9\116\uffe9\126\uffe9" +
    "\127\uffe9\131\uffe9\136\uffe9\153\uffe9\161\uffe9\175\uffe9\176" +
    "\uffe9\200\uffe9\211\uffe9\214\uffe9\231\uffe9\241\uffe9\263\uffe9" +
    "\270\uffe9\307\uffe9\310\uffe9\311\uffe9\313\uffe9\315\uffe9\320" +
    "\uffe9\325\uffe9\330\uffe9\336\uffe9\376\uffe9\u0102\uffe9\u012b\uffe9" +
    "\u0130\uffe9\u013b\uffe9\u013c\uffe9\u0161\uffe9\u0165\uffe9\u0166\uffe9\u0167" +
    "\uffe9\u0168\uffe9\u0169\uffe9\001\002\000\004\u0167\262\001\002" +
    "\000\174\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\024\uffe7\025\uffe7" +
    "\031\uffe7\032\uffe7\040\uffe7\044\uffe7\056\uffe7\064\uffe7\067" +
    "\uffe7\075\uffe7\100\uffe7\107\uffe7\112\uffe7\114\uffe7\116\uffe7" +
    "\126\uffe7\127\uffe7\131\uffe7\136\uffe7\153\uffe7\161\uffe7\175" +
    "\uffe7\176\uffe7\200\uffe7\211\uffe7\214\uffe7\231\uffe7\241\uffe7" +
    "\263\uffe7\270\uffe7\307\uffe7\310\uffe7\311\uffe7\313\uffe7\315" +
    "\uffe7\320\uffe7\325\uffe7\330\uffe7\336\uffe7\376\uffe7\u0102\uffe7" +
    "\u012b\uffe7\u0130\uffe7\u013b\uffe7\u013c\uffe7\u0161\uffe7\u0165\uffe7\u0166" +
    "\uffe7\u0167\uffe7\u0168\uffe7\u0169\uffe7\001\002\000\014\031\106" +
    "\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000\112\004" +
    "\uffc2\005\uffc2\006\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\020\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2\044\uffc2\067" +
    "\uffc2\075\uffc2\100\uffc2\107\uffc2\114\uffc2\116\uffc2\126\uffc2" +
    "\131\uffc2\153\uffc2\175\uffc2\214\uffc2\231\uffc2\241\uffc2\270" +
    "\uffc2\310\uffc2\313\uffc2\315\uffc2\320\uffc2\325\uffc2\330\uffc2" +
    "\u0102\uffc2\u0161\uffc2\u0168\uffc2\001\002\000\014\031\106\u0165" +
    "\061\u0166\077\u0167\066\u0169\063\001\002\000\112\004\uffc1" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\024\uffc1\025\uffc1\031\uffc1\032\uffc1\044\uffc1\067\uffc1" +
    "\075\uffc1\100\uffc1\107\uffc1\114\uffc1\116\uffc1\126\uffc1\131" +
    "\uffc1\153\uffc1\175\uffc1\214\uffc1\231\uffc1\241\uffc1\270\uffc1" +
    "\310\uffc1\313\uffc1\315\uffc1\320\uffc1\325\uffc1\330\uffc1\u0102" +
    "\uffc1\u0161\uffc1\u0168\uffc1\001\002\000\112\004\uffc0\005\uffc0" +
    "\006\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\024" +
    "\uffc0\025\uffc0\031\uffc0\032\uffc0\044\uffc0\067\uffc0\075\uffc0" +
    "\100\uffc0\107\uffc0\114\uffc0\116\uffc0\126\uffc0\131\uffc0\153" +
    "\uffc0\175\uffc0\214\uffc0\231\uffc0\241\uffc0\270\uffc0\310\uffc0" +
    "\313\uffc0\315\uffc0\320\uffc0\325\uffc0\330\uffc0\u0102\uffc0\u0161" +
    "\uffc0\u0168\uffc0\001\002\000\030\031\106\136\074\376\075" +
    "\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077\u0167" +
    "\066\u0169\063\001\002\000\004\032\272\001\002\000\104" +
    "\004\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\020\uff7f\024" +
    "\uff7f\025\uff7f\031\uff7f\032\uff7f\044\uff7f\067\uff7f\075\uff7f" +
    "\100\uff7f\107\uff7f\114\uff7f\116\uff7f\126\uff7f\131\uff7f\153" +
    "\uff7f\175\uff7f\214\uff7f\231\uff7f\241\uff7f\270\uff7f\310\uff7f" +
    "\313\uff7f\315\uff7f\320\uff7f\325\uff7f\u0102\uff7f\u0161\uff7f\u0168" +
    "\uff7f\001\002\000\014\024\ufe6a\040\ufe6a\044\ufe6a\u0102\ufe6a" +
    "\u0167\ufe6a\001\002\000\014\024\ufe6c\040\055\044\ufe6c\u0102" +
    "\ufe6c\u0167\301\001\002\000\014\024\ufe7b\040\ufe7b\044\ufe7b" +
    "\u0102\ufe7b\u0167\ufe7b\001\002\000\014\024\ufe7c\040\ufe7c\044" +
    "\ufe7c\u0102\ufe7c\u0167\ufe7c\001\002\000\010\024\125\044\124" +
    "\u0102\123\001\002\000\010\024\ufe6d\044\ufe6d\u0102\ufe6d\001" +
    "\002\000\010\024\ufe6e\044\ufe6e\u0102\ufe6e\001\002\000\054" +
    "\002\ufe6b\003\ufe6b\031\ufe6b\064\ufe6b\111\ufe6b\116\ufe6b\132" +
    "\ufe6b\146\ufe6b\157\ufe6b\164\ufe6b\166\ufe6b\176\ufe6b\213\ufe6b" +
    "\253\ufe6b\254\ufe6b\262\ufe6b\275\ufe6b\307\ufe6b\320\ufe6b\334" +
    "\ufe6b\337\ufe6b\001\002\000\014\024\ufe6c\040\055\044\ufe6c" +
    "\u0102\ufe6c\u0167\301\001\002\000\010\024\125\044\124\u0102" +
    "\123\001\002\000\054\002\ufe71\003\ufe71\031\ufe71\064\ufe71" +
    "\111\ufe71\116\ufe71\132\ufe71\146\ufe71\157\ufe71\164\ufe71\166" +
    "\ufe71\176\ufe71\213\ufe71\253\ufe71\254\ufe71\262\ufe71\275\ufe71" +
    "\307\ufe71\320\ufe71\334\ufe71\337\ufe71\001\002\000\010\024" +
    "\ufe70\044\ufe70\u0102\ufe70\001\002\000\004\002\ufffe\001\002" +
    "\000\010\024\ufe92\044\ufe92\u0102\ufe92\001\002\000\010\024" +
    "\ufe94\044\ufe94\u0102\ufe94\001\002\000\006\150\325\u0167\uffdd" +
    "\001\002\000\006\150\325\u0167\uffdd\001\002\000\006\150" +
    "\325\u0167\uffdd\001\002\000\010\024\ufe91\044\ufe91\u0102\ufe91" +
    "\001\002\000\006\150\325\u0167\uffdd\001\002\000\006\150" +
    "\325\u0167\uffdd\001\002\000\010\024\ufe90\044\ufe90\u0102\ufe90" +
    "\001\002\000\010\024\ufe93\044\ufe93\u0102\ufe93\001\002\000" +
    "\010\024\125\044\124\u0102\123\001\002\000\054\002\ufe95" +
    "\003\ufe95\031\ufe95\064\ufe95\111\ufe95\116\ufe95\132\ufe95\146" +
    "\ufe95\157\ufe95\164\ufe95\166\ufe95\176\ufe95\213\ufe95\253\ufe95" +
    "\254\ufe95\262\ufe95\275\ufe95\307\ufe95\320\ufe95\334\ufe95\337" +
    "\ufe95\001\002\000\004\u0167\066\001\002\000\004\342\326" +
    "\001\002\000\006\025\uffde\u0167\uffde\001\002\000\012\024" +
    "\ufe8d\025\331\044\ufe8d\u0102\ufe8d\001\002\000\010\024\ufe8f" +
    "\044\ufe8f\u0102\ufe8f\001\002\000\004\u0167\066\001\002\000" +
    "\012\024\ufe8d\025\331\044\ufe8d\u0102\ufe8d\001\002\000\010" +
    "\024\ufe8e\044\ufe8e\u0102\ufe8e\001\002\000\004\u0167\335\001" +
    "\002\000\044\024\uffe3\025\uffe3\026\344\031\uffe3\032\uffe3" +
    "\040\uffe3\044\uffe3\075\uffe3\100\uffe3\116\uffe3\270\uffe3\336" +
    "\uffe3\365\uffe3\u0102\uffe3\u0103\uffe3\u011c\uffe3\u0158\uffe3\001\002" +
    "\000\012\024\ufe8a\025\337\044\ufe8a\u0102\ufe8a\001\002\000" +
    "\004\u0167\335\001\002\000\010\024\ufe8c\044\ufe8c\u0102\ufe8c" +
    "\001\002\000\012\024\ufe8a\025\337\044\ufe8a\u0102\ufe8a\001" +
    "\002\000\010\024\ufe8b\044\ufe8b\u0102\ufe8b\001\002\000\042" +
    "\024\uffe5\025\uffe5\031\uffe5\032\uffe5\040\uffe5\044\uffe5\075" +
    "\uffe5\100\uffe5\116\uffe5\270\uffe5\336\uffe5\365\uffe5\u0102\uffe5" +
    "\u0103\uffe5\u011c\uffe5\u0158\uffe5\001\002\000\004\u0167\345\001" +
    "\002\000\042\024\uffe4\025\uffe4\031\uffe4\032\uffe4\040\uffe4" +
    "\044\uffe4\075\uffe4\100\uffe4\116\uffe4\270\uffe4\336\uffe4\365" +
    "\uffe4\u0102\uffe4\u0103\uffe4\u011c\uffe4\u0158\uffe4\001\002\000\004" +
    "\u0167\347\001\002\000\012\024\ufe87\025\351\044\ufe87\u0102" +
    "\ufe87\001\002\000\010\024\ufe86\044\ufe86\u0102\ufe86\001\002" +
    "\000\004\u0167\352\001\002\000\012\024\ufe87\025\351\044" +
    "\ufe87\u0102\ufe87\001\002\000\010\024\ufe88\044\ufe88\u0102\ufe88" +
    "\001\002\000\004\u0167\355\001\002\000\012\024\ufe87\025" +
    "\351\044\ufe87\u0102\ufe87\001\002\000\010\024\ufe89\044\ufe89" +
    "\u0102\ufe89\001\002\000\004\u0167\360\001\002\000\006\263" +
    "\361\u0167\066\001\002\000\004\u0167\066\001\002\000\010" +
    "\024\ufe85\044\ufe85\u0102\ufe85\001\002\000\012\024\ufe81\025" +
    "\365\044\ufe81\u0102\ufe81\001\002\000\010\024\ufe84\044\ufe84" +
    "\u0102\ufe84\001\002\000\004\u0167\066\001\002\000\012\024" +
    "\ufe81\025\365\044\ufe81\u0102\ufe81\001\002\000\010\024\ufe82" +
    "\044\ufe82\u0102\ufe82\001\002\000\012\024\ufe7f\025\371\044" +
    "\ufe7f\u0102\ufe7f\001\002\000\004\u0167\066\001\002\000\010" +
    "\024\ufe83\044\ufe83\u0102\ufe83\001\002\000\006\263\361\u0167" +
    "\066\001\002\000\010\024\ufe80\044\ufe80\u0102\ufe80\001\002" +
    "\000\010\024\uff01\044\uff01\u0102\uff01\001\002\000\012\060" +
    "\u0195\115\u0199\317\u0197\346\u0196\001\002\000\010\024\uff02" +
    "\044\uff02\u0102\uff02\001\002\000\004\u0167\u0175\001\002\000" +
    "\004\u0167\u0170\001\002\000\010\152\ufef1\156\ufef1\236\ufef1" +
    "\001\002\000\010\024\125\044\124\u0102\123\001\002\000" +
    "\010\152\u013c\156\ufeed\236\u013b\001\002\000\004\u0167\066" +
    "\001\002\000\010\024\uff00\044\uff00\u0102\uff00\001\002\000" +
    "\010\024\ufefe\044\ufefe\u0102\ufefe\001\002\000\010\024\ufeff" +
    "\044\ufeff\u0102\ufeff\001\002\000\004\064\u010a\001\002\000" +
    "\012\060\ufec8\115\ufec8\317\ufec8\346\ufec8\001\002\000\004" +
    "\031\u010c\001\002\000\010\032\ufef7\174\u010f\u0167\335\001" +
    "\002\000\006\025\u0153\032\ufef9\001\002\000\004\032\ufefb" +
    "\001\002\000\004\u0167\u0135\001\002\000\006\025\u0133\032" +
    "\ufef5\001\002\000\004\032\u012e\001\002\000\012\365\u0115" +
    "\u0103\u0114\u011c\u0117\u0158\u0116\001\002\000\024\024\uff92\025" +
    "\uff92\032\uff92\044\uff92\137\u011d\241\uff92\244\uff92\340\uff92" +
    "\u0102\uff92\001\002\000\042\004\uffcd\024\uffcd\025\uffcd\031" +
    "\uffcd\032\uffcd\044\uffcd\075\uffcd\111\uffcd\116\uffcd\137\uffcd" +
    "\241\uffcd\244\uffcd\314\uffcd\340\uffcd\u0102\uffcd\u0161\uffcd\001" +
    "\002\000\042\004\uffce\024\uffce\025\uffce\031\uffce\032\uffce" +
    "\044\uffce\075\uffce\111\uffce\116\uffce\137\uffce\241\uffce\244" +
    "\uffce\314\uffce\340\uffce\u0102\uffce\u0161\uffce\001\002\000\004" +
    "\031\u011a\001\002\000\042\004\uffcf\024\uffcf\025\uffcf\031" +
    "\uffcf\032\uffcf\044\uffcf\075\uffcf\111\uffcf\116\uffcf\137\uffcf" +
    "\241\uffcf\244\uffcf\314\uffcf\340\uffcf\u0102\uffcf\u0161\uffcf\001" +
    "\002\000\042\004\uffcc\024\uffcc\025\uffcc\031\uffcc\032\uffcc" +
    "\044\uffcc\075\uffcc\111\uffcc\116\uffcc\137\uffcc\241\uffcc\244" +
    "\uffcc\314\uffcc\340\uffcc\u0102\uffcc\u0161\uffcc\001\002\000\042" +
    "\004\uffcb\024\uffcb\025\uffcb\031\uffcb\032\uffcb\044\uffcb\075" +
    "\uffcb\111\uffcb\116\uffcb\137\uffcb\241\uffcb\244\uffcb\314\uffcb" +
    "\340\uffcb\u0102\uffcb\u0161\uffcb\001\002\000\004\u0165\u011b\001" +
    "\002\000\004\032\u011c\001\002\000\042\004\uffca\024\uffca" +
    "\025\uffca\031\uffca\032\uffca\044\uffca\075\uffca\111\uffca\116" +
    "\uffca\137\uffca\241\uffca\244\uffca\314\uffca\340\uffca\u0102\uffca" +
    "\u0161\uffca\001\002\000\004\031\u0129\001\002\000\022\024" +
    "\uff94\025\uff94\032\uff94\044\uff94\241\u011f\244\u0121\340\uff94" +
    "\u0102\uff94\001\002\000\004\244\u0128\001\002\000\022\024" +
    "\uff90\025\uff90\032\uff90\044\uff90\241\uff90\244\uff90\340\u0122" +
    "\u0102\uff90\001\002\000\022\024\uff95\025\uff95\032\uff95\044" +
    "\uff95\241\uff95\244\uff95\340\uff95\u0102\uff95\001\002\000\004" +
    "\203\u0124\001\002\000\020\024\uff97\025\uff97\032\uff97\044" +
    "\uff97\241\uff97\244\uff97\u0102\uff97\001\002\000\024\024\uffda" +
    "\025\uffda\032\uffda\044\uffda\100\u0126\241\uffda\244\uffda\270" +
    "\u0127\u0102\uffda\001\002\000\020\024\uff91\025\uff91\032\uff91" +
    "\044\uff91\241\uff91\244\uff91\u0102\uff91\001\002\000\024\024" +
    "\uffdc\025\uffdc\032\uffdc\044\uffdc\100\uffdc\241\uffdc\244\uffdc" +
    "\270\uffdc\u0102\uffdc\001\002\000\024\024\uffdb\025\uffdb\032" +
    "\uffdb\044\uffdb\100\uffdb\241\uffdb\244\uffdb\270\uffdb\u0102\uffdb" +
    "\001\002\000\022\024\uff96\025\uff96\032\uff96\044\uff96\241" +
    "\uff96\244\uff96\340\uff96\u0102\uff96\001\002\000\004\u0165\u012a" +
    "\001\002\000\004\025\u012b\001\002\000\004\u0165\u012c\001" +
    "\002\000\004\032\u012d\001\002\000\022\024\uff93\025\uff93" +
    "\032\uff93\044\uff93\241\uff93\244\uff93\340\uff93\u0102\uff93\001" +
    "\002\000\012\024\ufef3\044\ufef3\263\u012f\u0102\ufef3\001\002" +
    "\000\004\340\u0131\001\002\000\010\024\ufefd\044\ufefd\u0102" +
    "\ufefd\001\002\000\010\024\ufef4\044\ufef4\u0102\ufef4\001\002" +
    "\000\004\032\ufef8\001\002\000\006\032\ufef7\174\u010f\001" +
    "\002\000\004\032\ufef6\001\002\000\010\076\u0137\141\u0136" +
    "\340\u0138\001\002\000\004\031\u014f\001\002\000\004\203" +
    "\u0146\001\002\000\004\203\u013a\001\002\000\014\024\uffd6" +
    "\025\uffd6\032\uffd6\044\uffd6\u0102\uffd6\001\002\000\010\031" +
    "\ufeed\152\u013c\236\u013b\001\002\000\006\031\ufeee\156\ufeee" +
    "\001\002\000\006\031\ufeef\156\ufeef\001\002\000\004\031" +
    "\u013e\001\002\000\004\u0167\u0140\001\002\000\004\032\u0145" +
    "\001\002\000\012\025\uffda\032\uffda\100\u0126\270\u0127\001" +
    "\002\000\006\025\u0143\032\uffd3\001\002\000\004\032\uffd5" +
    "\001\002\000\004\u0167\u0140\001\002\000\004\032\uffd4\001" +
    "\002\000\014\024\uffd2\025\uffd2\032\uffd2\044\uffd2\u0102\uffd2" +
    "\001\002\000\004\031\u0147\001\002\000\004\u0167\335\001" +
    "\002\000\004\032\u0149\001\002\000\004\102\u014a\001\002" +
    "\000\004\u0167\066\001\002\000\004\031\u014c\001\002\000" +
    "\004\u0167\335\001\002\000\004\032\u014e\001\002\000\014" +
    "\024\uffd0\025\uffd0\032\uffd0\044\uffd0\u0102\uffd0\001\002\000" +
    "\022\031\106\101\164\177\163\u0165\061\u0166\077\u0167\066" +
    "\u0168\161\u0169\063\001\002\000\004\032\u0151\001\002\000" +
    "\014\024\uffd1\025\uffd1\032\uffd1\044\uffd1\u0102\uffd1\001\002" +
    "\000\004\032\ufefc\001\002\000\010\032\ufef7\174\u010f\u0167" +
    "\335\001\002\000\004\032\ufefa\001\002\000\004\156\u0156" +
    "\001\002\000\004\u0167\u0157\001\002\000\004\263\u0158\001" +
    "\002\000\004\u0167\066\001\002\000\004\031\u015a\001\002" +
    "\000\004\u0167\335\001\002\000\004\032\u0161\001\002\000" +
    "\012\025\uffda\032\uffda\100\u0126\270\u0127\001\002\000\006" +
    "\025\u015e\032\ufeea\001\002\000\004\u0167\335\001\002\000" +
    "\004\032\ufeec\001\002\000\004\032\ufeeb\001\002\000\014" +
    "\024\ufee8\044\ufee8\330\ufee8\u0102\ufee8\u010f\u0163\001\002\000" +
    "\012\024\ufee3\044\ufee3\330\u016c\u0102\ufee3\001\002\000\004" +
    "\031\u0164\001\002\000\004\u0167\335\001\002\000\004\032" +
    "\u016a\001\002\000\006\025\u0167\032\ufee5\001\002\000\004" +
    "\u0167\335\001\002\000\004\032\ufee7\001\002\000\004\032" +
    "\ufee6\001\002\000\012\024\ufee9\044\ufee9\330\ufee9\u0102\ufee9" +
    "\001\002\000\010\024\ufef2\044\ufef2\u0102\ufef2\001\002\000" +
    "\024\031\uff98\101\uff98\177\uff98\241\151\u0165\uff98\u0166\uff98" +
    "\u0167\uff98\u0168\uff98\u0169\uff98\001\002\000\010\024\ufee4\044" +
    "\ufee4\u0102\ufee4\001\002\000\054\002\uff03\003\uff03\031\uff03" +
    "\064\uff03\111\uff03\116\uff03\132\uff03\146\uff03\157\uff03\164" +
    "\uff03\166\uff03\176\uff03\213\uff03\253\uff03\254\uff03\262\uff03" +
    "\275\uff03\307\uff03\320\uff03\334\uff03\337\uff03\001\002\000" +
    "\010\024\ufecf\044\ufecf\u0102\ufecf\001\002\000\014\024\ufecc" +
    "\044\ufecc\336\u0172\u0102\ufecc\u0167\ufeca\001\002\000\010\024" +
    "\ufece\044\ufece\u0102\ufece\001\002\000\004\u0167\ufecb\001\002" +
    "\000\004\u0167\u0174\001\002\000\010\024\ufecd\044\ufecd\u0102" +
    "\ufecd\001\002\000\016\024\ufee0\031\ufee0\044\ufee0\160\ufee0" +
    "\263\u0176\u0102\ufee0\001\002\000\020\024\ufede\031\ufede\044" +
    "\ufede\160\ufede\340\u018e\u0102\ufede\u0167\ufede\001\002\000\014" +
    "\024\ufed8\031\ufed8\044\ufed8\160\u0179\u0102\ufed8\001\002\000" +
    "\012\024\ufed6\031\u017c\044\ufed6\u0102\ufed6\001\002\000\004" +
    "\u0167\u017a\001\002\000\012\024\ufed9\031\ufed9\044\ufed9\u0102" +
    "\ufed9\001\002\000\010\024\ufee2\044\ufee2\u0102\ufee2\001\002" +
    "\000\004\u0147\u017d\001\002\000\004\004\u017e\001\002\000" +
    "\004\u0168\u017f\001\002\000\006\025\u0180\032\ufed4\001\002" +
    "\000\004\065\u0186\001\002\000\004\032\u0182\001\002\000" +
    "\012\024\ufed0\025\u0183\044\ufed0\u0102\ufed0\001\002\000\012" +
    "\024\ufed6\031\u017c\044\ufed6\u0102\ufed6\001\002\000\010\024" +
    "\ufed7\044\ufed7\u0102\ufed7\001\002\000\010\024\ufed1\044\ufed1" +
    "\u0102\ufed1\001\002\000\004\004\u0187\001\002\000\004\u0168" +
    "\u0188\001\002\000\006\025\u0189\032\ufed2\001\002\000\004" +
    "\u0117\u018b\001\002\000\004\032\ufed5\001\002\000\004\004" +
    "\u018c\001\002\000\004\u0165\u018d\001\002\000\004\032\ufed3" +
    "\001\002\000\016\024\ufedf\031\ufedf\044\ufedf\160\ufedf\u0102" +
    "\ufedf\u0167\ufedf\001\002\000\016\024\ufedc\031\ufedc\044\ufedc" +
    "\160\ufedc\u0102\ufedc\u0167\u0191\001\002\000\014\024\ufee1\031" +
    "\ufee1\044\ufee1\160\ufee1\u0102\ufee1\001\002\000\016\024\ufeda" +
    "\025\u0193\031\ufeda\044\ufeda\160\ufeda\u0102\ufeda\001\002\000" +
    "\014\024\ufedd\031\ufedd\044\ufedd\160\ufedd\u0102\ufedd\001\002" +
    "\000\016\024\ufedc\031\ufedc\044\ufedc\160\ufedc\u0102\ufedc\u0167" +
    "\u0191\001\002\000\014\024\ufedb\031\ufedb\044\ufedb\160\ufedb" +
    "\u0102\ufedb\001\002\000\004\u0167\ufe63\001\002\000\004\u0167" +
    "\ufe64\001\002\000\004\u0167\335\001\002\000\004\u0167\335" +
    "\001\002\000\004\u0167\335\001\002\000\010\031\u019d\040" +
    "\ufe50\116\ufe5f\001\002\000\004\040\055\001\002\000\004" +
    "\116\u019e\001\002\000\004\040\ufe51\001\002\000\012\365" +
    "\u0115\u0103\u0114\u011c\u0117\u0158\u0116\001\002\000\006\075\u01a0" +
    "\111\ufe43\001\002\000\004\111\ufe42\001\002\000\004\111" +
    "\u01a3\001\002\000\004\111\ufe44\001\002\000\044\031\016" +
    "\064\017\111\023\132\047\146\036\157\024\164\037\166" +
    "\046\176\053\213\040\253\010\254\032\262\015\275\013" +
    "\307\041\334\045\337\012\001\002\000\004\116\u01a8\001" +
    "\002\000\050\031\016\064\017\111\023\116\ufe76\132\047" +
    "\146\036\157\024\164\037\166\046\176\053\213\040\253" +
    "\010\254\032\262\015\275\013\307\041\320\ufe76\334\045" +
    "\337\012\001\002\000\006\116\ufe77\320\ufe77\001\002\000" +
    "\006\116\ufe78\320\ufe78\001\002\000\030\031\106\136\074" +
    "\376\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\004\320\u01aa\001\002" +
    "\000\010\024\125\044\124\u0102\123\001\002\000\054\002" +
    "\ufe45\003\ufe45\031\ufe45\064\ufe45\111\ufe45\116\ufe45\132\ufe45" +
    "\146\ufe45\157\ufe45\164\ufe45\166\ufe45\176\ufe45\213\ufe45\253" +
    "\ufe45\254\ufe45\262\ufe45\275\ufe45\307\ufe45\320\ufe45\334\ufe45" +
    "\337\ufe45\001\002\000\012\365\u0115\u0103\u0114\u011c\u0117\u0158" +
    "\u0116\001\002\000\010\032\u01ae\075\ufe4e\116\ufe4e\001\002" +
    "\000\006\075\ufe4f\116\ufe4f\001\002\000\006\075\ufe60\116" +
    "\ufe60\001\002\000\020\004\ufe5c\025\ufe5c\032\ufe5c\075\ufe5c" +
    "\116\ufe5c\314\u01b2\u0161\ufe5c\001\002\000\016\004\ufe5d\025" +
    "\ufe5d\032\ufe5d\075\ufe5d\116\ufe5d\u0161\ufe5d\001\002\000\016" +
    "\004\ufe5b\025\ufe5b\032\ufe5b\075\ufe5b\116\ufe5b\u0161\ufe5b\001" +
    "\002\000\016\004\u01b6\025\ufe59\032\ufe59\075\ufe59\116\ufe59" +
    "\u0161\ufe59\001\002\000\014\025\ufe56\032\ufe56\075\ufe56\116" +
    "\ufe56\u0161\u01b8\001\002\000\014\025\ufe5a\032\ufe5a\075\ufe5a" +
    "\116\ufe5a\u0161\ufe5a\001\002\000\030\031\106\136\074\376" +
    "\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077" +
    "\u0167\066\u0169\063\001\002\000\014\025\ufe58\032\ufe58\075" +
    "\ufe58\116\ufe58\u0161\ufe58\001\002\000\012\025\ufe55\032\ufe55" +
    "\075\ufe55\116\ufe55\001\002\000\012\025\ufe57\032\ufe57\075" +
    "\ufe57\116\ufe57\001\002\000\012\025\u01bb\032\ufe53\075\ufe53" +
    "\116\ufe53\001\002\000\004\040\055\001\002\000\010\032" +
    "\ufe5e\075\ufe5e\116\ufe5e\001\002\000\010\032\ufe54\075\ufe54" +
    "\116\ufe54\001\002\000\010\032\ufe52\075\ufe52\116\ufe52\001" +
    "\002\000\012\024\u01c1\031\ufe61\040\ufe61\075\ufe61\001\002" +
    "\000\010\031\u019d\040\ufe50\075\ufe5f\001\002\000\004\u0165" +
    "\u01c2\001\002\000\010\031\ufe62\040\ufe62\075\ufe62\001\002" +
    "\000\004\075\u01c4\001\002\000\004\111\u01c5\001\002\000" +
    "\044\031\016\064\017\111\023\132\047\146\036\157\024" +
    "\164\037\166\046\176\053\213\040\253\010\254\032\262" +
    "\015\275\013\307\041\334\045\337\012\001\002\000\004" +
    "\320\u01c7\001\002\000\010\024\125\044\124\u0102\123\001" +
    "\002\000\054\002\ufe65\003\ufe65\031\ufe65\064\ufe65\111\ufe65" +
    "\116\ufe65\132\ufe65\146\ufe65\157\ufe65\164\ufe65\166\ufe65\176" +
    "\ufe65\213\ufe65\253\ufe65\254\ufe65\262\ufe65\275\ufe65\307\ufe65" +
    "\320\ufe65\334\ufe65\337\ufe65\001\002\000\006\075\ufec5\336" +
    "\u01ca\001\002\000\004\u0167\u01d3\001\002\000\004\075\u01cc" +
    "\001\002\000\006\031\016\157\024\001\002\000\012\024" +
    "\ufec0\044\ufec0\336\u01ce\u0102\ufec0\001\002\000\004\141\u01d0" +
    "\001\002\000\010\024\ufec9\044\ufec9\u0102\ufec9\001\002\000" +
    "\004\305\u01d1\001\002\000\010\024\ufec1\044\ufec1\u0102\ufec1" +
    "\001\002\000\004\075\ufec6\001\002\000\006\025\u01d4\075" +
    "\ufec2\001\002\000\004\u0167\u01d3\001\002\000\004\075\ufec4" +
    "\001\002\000\004\075\ufec3\001\002\000\004\u0167\066\001" +
    "\002\000\004\u0167\uff75\001\002\000\006\031\u01db\311\uff72" +
    "\001\002\000\004\311\u01e2\001\002\000\004\u0167\335\001" +
    "\002\000\004\032\u01e1\001\002\000\006\025\u01df\032\uff6f" +
    "\001\002\000\004\032\uff71\001\002\000\004\u0167\335\001" +
    "\002\000\004\032\uff70\001\002\000\004\311\uff73\001\002" +
    "\000\004\031\u01e3\001\002\000\032\031\106\136\074\376" +
    "\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077" +
    "\u0167\066\u0168\u01e5\u0169\063\001\002\000\004\032\u01eb\001" +
    "\002\000\006\025\u01e7\032\uff6b\001\002\000\006\025\u01e7" +
    "\032\uff6b\001\002\000\032\031\106\136\074\376\075\u012b" +
    "\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077\u0167\066" +
    "\u0168\u01e5\u0169\063\001\002\000\004\032\uff6e\001\002\000" +
    "\004\032\uff6c\001\002\000\004\032\uff6d\001\002\000\010" +
    "\024\125\044\124\u0102\123\001\002\000\054\002\uff76\003" +
    "\uff76\031\uff76\064\uff76\111\uff76\116\uff76\132\uff76\146\uff76" +
    "\157\uff76\164\uff76\166\uff76\176\uff76\213\uff76\253\uff76\254" +
    "\uff76\262\uff76\275\uff76\307\uff76\320\uff76\334\uff76\337\uff76" +
    "\001\002\000\006\040\055\u0167\u01f0\001\002\000\010\024" +
    "\ufe66\044\ufe66\u0102\ufe66\001\002\000\010\024\125\044\124" +
    "\u0102\123\001\002\000\010\024\ufe67\044\ufe67\u0102\ufe67\001" +
    "\002\000\054\002\ufe68\003\ufe68\031\ufe68\064\ufe68\111\ufe68" +
    "\116\ufe68\132\ufe68\146\ufe68\157\ufe68\164\ufe68\166\ufe68\176" +
    "\ufe68\213\ufe68\253\ufe68\254\ufe68\262\ufe68\275\ufe68\307\ufe68" +
    "\320\ufe68\334\ufe68\337\ufe68\001\002\000\040\024\ufe4a\031" +
    "\106\040\055\044\ufe4a\136\074\376\075\u0102\ufe4a\u012b\062" +
    "\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077\u0167\066\u0169" +
    "\063\001\002\000\012\024\ufe48\025\u01f8\044\ufe48\u0102\ufe48" +
    "\001\002\000\012\024\ufe48\025\u01f8\044\ufe48\u0102\ufe48\001" +
    "\002\000\010\024\125\044\124\u0102\123\001\002\000\054" +
    "\002\ufe4d\003\ufe4d\031\ufe4d\064\ufe4d\111\ufe4d\116\ufe4d\132" +
    "\ufe4d\146\ufe4d\157\ufe4d\164\ufe4d\166\ufe4d\176\ufe4d\213\ufe4d" +
    "\253\ufe4d\254\ufe4d\262\ufe4d\275\ufe4d\307\ufe4d\320\ufe4d\334" +
    "\ufe4d\337\ufe4d\001\002\000\010\024\ufe4c\044\ufe4c\u0102\ufe4c" +
    "\001\002\000\040\024\ufe4a\031\106\040\055\044\ufe4a\136" +
    "\074\376\075\u0102\ufe4a\u012b\062\u0130\104\u013b\102\u013c\076" +
    "\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000\010\024" +
    "\ufe49\044\ufe49\u0102\ufe49\001\002\000\010\024\ufe4b\044\ufe4b" +
    "\u0102\ufe4b\001\002\000\012\365\u0115\u0103\u0114\u011c\u0117\u0158" +
    "\u0116\001\002\000\004\240\u01fd\001\002\000\004\073\u01fe" +
    "\001\002\000\006\031\016\157\024\001\002\000\010\024" +
    "\125\044\124\u0102\123\001\002\000\054\002\ufe41\003\ufe41" +
    "\031\ufe41\064\ufe41\111\ufe41\116\ufe41\132\ufe41\146\ufe41\157" +
    "\ufe41\164\ufe41\166\ufe41\176\ufe41\213\ufe41\253\ufe41\254\ufe41" +
    "\262\ufe41\275\ufe41\307\ufe41\320\ufe41\334\ufe41\337\ufe41\001" +
    "\002\000\010\024\125\044\124\u0102\123\001\002\000\054" +
    "\002\ufe7a\003\ufe7a\031\ufe7a\064\ufe7a\111\ufe7a\116\ufe7a\132" +
    "\ufe7a\146\ufe7a\157\ufe7a\164\ufe7a\166\ufe7a\176\ufe7a\213\ufe7a" +
    "\253\ufe7a\254\ufe7a\262\ufe7a\275\ufe7a\307\ufe7a\320\ufe7a\334" +
    "\ufe7a\337\ufe7a\001\002\000\004\002\ufffd\001\002\000\042" +
    "\007\uff2f\031\uff2f\136\uff2f\210\uff2f\237\uff2f\376\uff2f\u010c" +
    "\uff2f\u012b\uff2f\u0130\uff2f\u013b\uff2f\u013c\uff2f\u0165\uff2f\u0166\uff2f" +
    "\u0167\uff2f\u0168\uff2f\u0169\uff2f\001\002\000\004\107\u0240\001" +
    "\002\000\042\007\uff2e\031\uff2e\136\uff2e\210\uff2e\237\uff2e" +
    "\376\uff2e\u010c\uff2e\u012b\uff2e\u0130\uff2e\u013b\uff2e\u013c\uff2e\u0165" +
    "\uff2e\u0166\uff2e\u0167\uff2e\u0168\uff2e\u0169\uff2e\001\002\000\042" +
    "\007\uffe1\031\uffe1\136\uffe1\210\uffe1\237\u0209\376\uffe1\u010c" +
    "\uffe1\u012b\uffe1\u0130\uffe1\u013b\uffe1\u013c\uffe1\u0165\uffe1\u0166\uffe1" +
    "\u0167\uffe1\u0168\uffe1\u0169\uffe1\001\002\000\040\007\u0214\031" +
    "\106\136\074\210\u0216\376\075\u010c\u0211\u012b\062\u0130\104" +
    "\u013b\102\u013c\076\u0165\061\u0166\077\u0167\066\u0168\u0212\u0169" +
    "\063\001\002\000\004\031\u020a\001\002\000\004\u0165\u020b" +
    "\001\002\000\004\032\u020c\001\002\000\044\007\uffdf\031" +
    "\uffdf\107\uffdf\136\uffdf\210\uffdf\324\u020d\376\uffdf\u010c\uffdf" +
    "\u012b\uffdf\u0130\uffdf\u013b\uffdf\u013c\uffdf\u0165\uffdf\u0166\uffdf\u0167" +
    "\uffdf\u0168\uffdf\u0169\uffdf\001\002\000\042\007\uffe0\031\uffe0" +
    "\107\uffe0\136\uffe0\210\uffe0\376\uffe0\u010c\uffe0\u012b\uffe0\u0130" +
    "\uffe0\u013b\uffe0\u013c\uffe0\u0165\uffe0\u0166\uffe0\u0167\uffe0\u0168\uffe0" +
    "\u0169\uffe0\001\002\000\042\007\uffe2\031\uffe2\107\uffe2\136" +
    "\uffe2\210\uffe2\376\uffe2\u010c\uffe2\u012b\uffe2\u0130\uffe2\u013b\uffe2" +
    "\u013c\uffe2\u0165\uffe2\u0166\uffe2\u0167\uffe2\u0168\uffe2\u0169\uffe2\001" +
    "\002\000\004\107\uff30\001\002\000\010\025\uff1d\075\u0225" +
    "\107\uff1d\001\002\000\004\031\u0233\001\002\000\010\025" +
    "\uff1d\075\u0225\107\uff1d\001\002\000\010\025\uff1d\075\u0225" +
    "\107\uff1d\001\002\000\010\025\uff1d\075\u0225\107\uff1d\001" +
    "\002\000\010\025\uff1d\075\u0225\107\uff1d\001\002\000\004" +
    "\031\u0217\001\002\000\014\210\u0218\365\u0115\u0103\u0114\u011c" +
    "\u0117\u0158\u0116\001\002\000\004\031\u0222\001\002\000\006" +
    "\025\uff06\031\u021d\001\002\000\004\032\u021b\001\002\000" +
    "\004\107\uff1f\001\002\000\004\025\u0220\001\002\000\004" +
    "\u0165\u021e\001\002\000\004\032\u021f\001\002\000\006\025" +
    "\uff07\032\uff07\001\002\000\014\031\106\u0165\061\u0166\077" +
    "\u0167\066\u0169\063\001\002\000\004\032\uff05\001\002\000" +
    "\014\210\u0218\365\u0115\u0103\u0114\u011c\u0117\u0158\u0116\001\002" +
    "\000\004\032\u0224\001\002\000\004\032\uff04\001\002\000" +
    "\006\u0167\u022b\u0168\u022c\001\002\000\006\025\u0228\107\uff19" +
    "\001\002\000\004\107\uff21\001\002\000\040\007\u0214\031" +
    "\106\136\074\210\u0216\376\075\u010c\u0211\u012b\062\u0130\104" +
    "\u013b\102\u013c\076\u0165\061\u0166\077\u0167\066\u0168\u0212\u0169" +
    "\063\001\002\000\004\107\uff1a\001\002\000\006\025\uff1e" +
    "\107\uff1e\001\002\000\006\025\uff1c\107\uff1c\001\002\000" +
    "\006\025\uff1b\107\uff1b\001\002\000\006\025\u0228\107\uff19" +
    "\001\002\000\004\107\uff25\001\002\000\006\025\u0228\107" +
    "\uff19\001\002\000\004\107\uff24\001\002\000\006\025\u0228" +
    "\107\uff19\001\002\000\004\107\uff23\001\002\000\016\031" +
    "\106\u010c\u0234\u0165\061\u0166\077\u0167\066\u0169\063\001\002" +
    "\000\004\031\u023b\001\002\000\004\032\u023a\001\002\000" +
    "\004\075\u0237\001\002\000\012\365\u0115\u0103\u0114\u011c\u0117" +
    "\u0158\u0116\001\002\000\006\031\u021d\032\uff06\001\002\000" +
    "\004\032\uff09\001\002\000\004\107\uff20\001\002\000\016" +
    "\031\106\u010c\u0234\u0165\061\u0166\077\u0167\066\u0169\063\001" +
    "\002\000\004\032\u023d\001\002\000\004\032\uff08\001\002" +
    "\000\006\025\u0228\107\uff19\001\002\000\004\107\uff22\001" +
    "\002\000\006\031\u0243\u0167\066\001\002\000\066\002\uff43" +
    "\003\uff43\024\uff43\031\uff43\032\uff43\044\uff43\064\uff43\111" +
    "\uff43\116\uff43\132\uff43\146\uff43\157\uff43\164\uff43\166\uff43" +
    "\176\uff43\213\uff43\253\uff43\254\uff43\262\uff43\275\uff43\307" +
    "\uff43\320\uff43\334\uff43\336\uff43\337\uff43\u0102\uff43\001\002" +
    "\000\022\024\uff3f\031\uff3f\044\uff3f\126\uff3f\131\uff3f\313" +
    "\uff3f\330\u0277\u0102\uff3f\001\002\000\006\031\u0243\u0167\066" +
    "\001\002\000\042\024\uff14\031\uff14\032\uff14\044\uff14\075" +
    "\u0245\112\uff14\126\uff14\127\uff14\131\uff14\161\uff14\200\uff14" +
    "\211\uff14\313\uff14\330\uff14\u0102\uff14\u0167\u0247\001\002\000" +
    "\004\u0167\u0274\001\002\000\036\024\uff0e\031\uff0e\032\uff0e" +
    "\044\uff0e\112\u024d\126\uff0e\127\u024b\131\uff0e\161\u0249\200" +
    "\u0248\211\u024a\313\uff0e\330\uff0e\u0102\uff0e\001\002\000\040" +
    "\024\uff16\031\uff16\032\uff16\044\uff16\112\uff16\126\uff16\127" +
    "\uff16\131\uff16\161\uff16\200\uff16\211\uff16\263\uff16\313\uff16" +
    "\330\uff16\u0102\uff16\001\002\000\004\u0167\066\001\002\000" +
    "\004\200\u026b\001\002\000\006\200\uff0a\316\u024e\001\002" +
    "\000\006\200\uff0a\316\u024e\001\002\000\024\024\uff17\031" +
    "\uff17\032\uff17\044\uff17\126\uff17\131\uff17\313\uff17\330\uff17" +
    "\u0102\uff17\001\002\000\006\200\uff0a\316\u024e\001\002\000" +
    "\004\200\uff0b\001\002\000\004\200\u0250\001\002\000\004" +
    "\u0167\066\001\002\000\012\031\uff14\075\u0245\263\uff14\u0167" +
    "\u0247\001\002\000\006\031\u0254\263\u0253\001\002\000\004" +
    "\u0167\066\001\002\000\004\263\u0257\001\002\000\036\024" +
    "\uff0e\031\uff0e\032\uff0e\044\uff0e\112\u024d\126\uff0e\127\u024b" +
    "\131\uff0e\161\u0249\200\u0248\211\u024a\313\uff0e\330\uff0e\u0102" +
    "\uff0e\001\002\000\024\024\uff13\031\uff13\032\uff13\044\uff13" +
    "\126\uff13\131\uff13\313\uff13\330\uff13\u0102\uff13\001\002\000" +
    "\004\u0167\066\001\002\000\004\004\u0259\001\002\000\004" +
    "\u0167\066\001\002\000\004\032\u025b\001\002\000\036\024" +
    "\uff0d\031\uff0d\032\uff0d\044\uff0d\112\uff0d\126\uff0d\127\uff0d" +
    "\131\uff0d\161\uff0d\200\uff0d\211\uff0d\313\uff0d\330\uff0d\u0102" +
    "\uff0d\001\002\000\004\004\u025d\001\002\000\004\u0167\066" +
    "\001\002\000\036\024\uff0c\031\uff0c\032\uff0c\044\uff0c\112" +
    "\uff0c\126\uff0c\127\uff0c\131\uff0c\161\uff0c\200\uff0c\211\uff0c" +
    "\313\uff0c\330\uff0c\u0102\uff0c\001\002\000\004\200\u0260\001" +
    "\002\000\004\u0167\066\001\002\000\012\031\uff14\075\u0245" +
    "\263\uff14\u0167\u0247\001\002\000\006\031\u0254\263\u0253\001" +
    "\002\000\036\024\uff0e\031\uff0e\032\uff0e\044\uff0e\112\u024d" +
    "\126\uff0e\127\u024b\131\uff0e\161\u0249\200\u0248\211\u024a\313" +
    "\uff0e\330\uff0e\u0102\uff0e\001\002\000\024\024\uff11\031\uff11" +
    "\032\uff11\044\uff11\126\uff11\131\uff11\313\uff11\330\uff11\u0102" +
    "\uff11\001\002\000\004\200\u0266\001\002\000\004\u0167\066" +
    "\001\002\000\012\031\uff14\075\u0245\263\uff14\u0167\u0247\001" +
    "\002\000\006\031\u0254\263\u0253\001\002\000\036\024\uff0e" +
    "\031\uff0e\032\uff0e\044\uff0e\112\u024d\126\uff0e\127\u024b\131" +
    "\uff0e\161\u0249\200\u0248\211\u024a\313\uff0e\330\uff0e\u0102\uff0e" +
    "\001\002\000\024\024\uff12\031\uff12\032\uff12\044\uff12\126" +
    "\uff12\131\uff12\313\uff12\330\uff12\u0102\uff12\001\002\000\004" +
    "\u0167\066\001\002\000\012\031\uff14\075\u0245\263\uff14\u0167" +
    "\u0247\001\002\000\006\031\u0254\263\u0253\001\002\000\036" +
    "\024\uff0e\031\uff0e\032\uff0e\044\uff0e\112\u024d\126\uff0e\127" +
    "\u024b\131\uff0e\161\u0249\200\u0248\211\u024a\313\uff0e\330\uff0e" +
    "\u0102\uff0e\001\002\000\024\024\uff10\031\uff10\032\uff10\044" +
    "\uff10\126\uff10\131\uff10\313\uff10\330\uff10\u0102\uff10\001\002" +
    "\000\012\031\uff14\075\u0245\263\uff14\u0167\u0247\001\002\000" +
    "\006\031\u0254\263\u0253\001\002\000\036\024\uff0e\031\uff0e" +
    "\032\uff0e\044\uff0e\112\u024d\126\uff0e\127\u024b\131\uff0e\161" +
    "\u0249\200\u0248\211\u024a\313\uff0e\330\uff0e\u0102\uff0e\001\002" +
    "\000\024\024\uff0f\031\uff0f\032\uff0f\044\uff0f\126\uff0f\131" +
    "\uff0f\313\uff0f\330\uff0f\u0102\uff0f\001\002\000\040\024\uff15" +
    "\031\uff15\032\uff15\044\uff15\112\uff15\126\uff15\127\uff15\131" +
    "\uff15\161\uff15\200\uff15\211\uff15\263\uff15\313\uff15\330\uff15" +
    "\u0102\uff15\001\002\000\004\032\u0276\001\002\000\024\024" +
    "\uff18\031\uff18\032\uff18\044\uff18\126\uff18\131\uff18\313\uff18" +
    "\330\uff18\u0102\uff18\001\002\000\024\031\uff98\101\uff98\177" +
    "\uff98\241\151\u0165\uff98\u0166\uff98\u0167\uff98\u0168\uff98\u0169\uff98" +
    "\001\002\000\020\024\uff3d\031\uff3d\044\uff3d\126\u027a\131" +
    "\uff3d\313\uff3d\u0102\uff3d\001\002\000\016\024\uff37\031\uff37" +
    "\044\uff37\131\u0283\313\uff37\u0102\uff37\001\002\000\004\130" +
    "\u027b\001\002\000\006\136\074\u0167\066\001\002\000\016" +
    "\024\uff3e\031\uff3e\044\uff3e\131\uff3e\313\uff3e\u0102\uff3e\001" +
    "\002\000\020\024\uff3b\025\u027f\031\uff3b\044\uff3b\131\uff3b" +
    "\313\uff3b\u0102\uff3b\001\002\000\020\024\uff3b\025\u027f\031" +
    "\uff3b\044\uff3b\131\uff3b\313\uff3b\u0102\uff3b\001\002\000\006" +
    "\136\074\u0167\066\001\002\000\016\024\uff3a\031\uff3a\044" +
    "\uff3a\131\uff3a\313\uff3a\u0102\uff3a\001\002\000\016\024\uff3c" +
    "\031\uff3c\044\uff3c\131\uff3c\313\uff3c\u0102\uff3c\001\002\000" +
    "\016\024\uff39\031\uff39\044\uff39\131\uff39\313\uff39\u0102\uff39" +
    "\001\002\000\034\031\uff98\101\uff98\177\uff98\241\151\376" +
    "\uff98\u012b\uff98\u0130\uff98\u013b\uff98\u013c\uff98\u0165\uff98\u0166\uff98" +
    "\u0167\uff98\u0169\uff98\001\002\000\014\024\uff34\031\u0287\044" +
    "\uff34\313\u0285\u0102\uff34\001\002\000\004\130\u028b\001\002" +
    "\000\010\024\125\044\124\u0102\123\001\002\000\010\031" +
    "\u0287\032\uff34\313\u0285\001\002\000\004\032\u0289\001\002" +
    "\000\012\024\uff35\032\uff35\044\uff35\u0102\uff35\001\002\000" +
    "\066\002\uff41\003\uff41\024\uff41\031\uff41\032\uff41\044\uff41" +
    "\064\uff41\111\uff41\116\uff41\132\uff41\146\uff41\157\uff41\164" +
    "\uff41\166\uff41\176\uff41\213\uff41\253\uff41\254\uff41\262\uff41" +
    "\275\uff41\307\uff41\320\uff41\334\uff41\336\uff41\337\uff41\u0102" +
    "\uff41\001\002\000\030\031\106\136\074\376\075\u012b\062" +
    "\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077\u0167\066\u0169" +
    "\063\001\002\000\012\024\uff36\032\uff36\044\uff36\u0102\uff36" +
    "\001\002\000\020\024\uff31\025\u028f\032\uff31\044\uff31\100" +
    "\uff31\270\uff31\u0102\uff31\001\002\000\016\024\uffda\032\uffda" +
    "\044\uffda\100\u0126\270\u0127\u0102\uffda\001\002\000\030\031" +
    "\106\136\074\376\075\u012b\062\u0130\104\u013b\102\u013c\076" +
    "\u0165\061\u0166\077\u0167\066\u0169\063\001\002\000\016\024" +
    "\uff32\032\uff32\044\uff32\100\uff32\270\uff32\u0102\uff32\001\002" +
    "\000\016\024\uff33\032\uff33\044\uff33\100\uff33\270\uff33\u0102" +
    "\uff33\001\002\000\014\024\uff38\031\uff38\044\uff38\313\uff38" +
    "\u0102\uff38\001\002\000\032\031\106\101\u0296\177\u0297\376" +
    "\075\u012b\062\u0130\104\u013b\102\u013c\076\u0165\061\u0166\077" +
    "\u0167\066\u0169\063\001\002\000\020\024\uff26\031\uff26\044" +
    "\uff26\067\244\310\247\313\uff26\u0102\uff26\001\002\000\030" +
    "\004\212\013\211\014\201\015\204\016\207\020\203\114" +
    "\uff98\153\uff98\175\216\214\215\241\213\001\002\000\004" +
    "\031\u029d\001\002\000\004\031\u029a\001\002\000\030\004" +
    "\212\013\211\014\201\015\204\016\207\020\203\114\uff98" +
    "\153\uff98\175\216\214\215\241\213\001\002\000\020\024" +
    "\uff2b\031\uff2b\044\uff2b\067\uff2b\310\uff2b\313\uff2b\u0102\uff2b" +
    "\001\002\000\006\007\170\u0167\066\001\002\000\004\032" +
    "\u029c\001\002\000\020\024\uff29\031\uff29\044\uff29\067\uff29" +
    "\310\uff29\313\uff29\u0102\uff29\001\002\000\006\007\170\u0167" +
    "\066\001\002\000\004\032\u029f\001\002\000\020\024\uff28" +
    "\031\uff28\044\uff28\067\uff28\310\uff28\313\uff28\u0102\uff28\001" +
    "\002\000\004\u0168\u02a1\001\002\000\030\004\212\013\211" +
    "\014\201\015\204\016\207\020\203\114\uff98\153\uff98\175" +
    "\216\214\215\241\213\001\002\000\020\024\uff2a\031\uff2a" +
    "\044\uff2a\067\uff2a\310\uff2a\313\uff2a\u0102\uff2a\001\002\000" +
    "\014\024\uff2c\031\uff2c\044\uff2c\313\uff2c\u0102\uff2c\001\002" +
    "\000\034\031\uff98\101\uff98\177\uff98\241\151\376\uff98\u012b" +
    "\uff98\u0130\uff98\u013b\uff98\u013c\uff98\u0165\uff98\u0166\uff98\u0167\uff98" +
    "\u0169\uff98\001\002\000\014\024\uff27\031\uff27\044\uff27\313" +
    "\uff27\u0102\uff27\001\002\000\020\024\uff40\031\uff40\044\uff40" +
    "\126\uff40\131\uff40\313\uff40\u0102\uff40\001\002\000\014\024" +
    "\ufe72\040\055\044\ufe72\u0102\ufe72\u0167\u02aa\001\002\000\010" +
    "\024\125\044\124\u0102\123\001\002\000\010\024\ufe73\044" +
    "\ufe73\u0102\ufe73\001\002\000\010\024\ufe74\044\ufe74\u0102\ufe74" +
    "\001\002\000\054\002\ufe75\003\ufe75\031\ufe75\064\ufe75\111" +
    "\ufe75\116\ufe75\132\ufe75\146\ufe75\157\ufe75\164\ufe75\166\ufe75" +
    "\176\ufe75\213\ufe75\253\ufe75\254\ufe75\262\ufe75\275\ufe75\307" +
    "\ufe75\320\ufe75\334\ufe75\337\ufe75\001\002\000\010\024\ufebe" +
    "\044\ufebe\u0102\ufebe\001\002\000\006\221\u02e5\u0167\u02e6\001" +
    "\002\000\006\061\u02df\u0167\u02e0\001\002\000\010\024\ufebd" +
    "\044\ufebd\u0102\ufebd\001\002\000\010\024\125\044\124\u0102" +
    "\123\001\002\000\004\u0167\066\001\002\000\004\u0167\066" +
    "\001\002\000\010\024\ufebb\044\ufebb\u0102\ufebb\001\002\000" +
    "\010\024\ufebc\044\ufebc\u0102\ufebc\001\002\000\004\075\u02b6" +
    "\001\002\000\006\031\016\157\024\001\002\000\012\024" +
    "\ufe99\044\ufe99\336\u02b8\u0102\ufe99\001\002\000\004\141\u02ba" +
    "\001\002\000\010\024\ufe9b\044\ufe9b\u0102\ufe9b\001\002\000" +
    "\004\305\u02bb\001\002\000\010\024\ufe9a\044\ufe9a\u0102\ufe9a" +
    "\001\002\000\010\056\u02bf\064\u02bd\307\u02c1\001\002\000" +
    "\004\163\u02d8\001\002\000\010\024\ufeb9\044\ufeb9\u0102\ufeb9" +
    "\001\002\000\006\174\u010f\u0167\335\001\002\000\010\024" +
    "\ufeb7\044\ufeb7\u0102\ufeb7\001\002\000\006\163\u02c4\174\u02c5" +
    "\001\002\000\010\024\ufeba\044\ufeba\u0102\ufeba\001\002\000" +
    "\010\024\ufeb8\044\ufeb8\u0102\ufeb8\001\002\000\010\025\ufea9" +
    "\150\ufea9\u0167\ufea9\001\002\000\010\025\ufeaa\150\ufeaa\u0167" +
    "\ufeaa\001\002\000\010\024\ufeac\044\ufeac\u0102\ufeac\001\002" +
    "\000\010\025\uffdd\150\325\u0167\uffdd\001\002\000\006\025" +
    "\u02cb\u0167\u02cc\001\002\000\012\024\ufea7\025\ufea7\044\ufea7" +
    "\u0102\ufea7\001\002\000\012\024\ufea4\025\u02cf\044\ufea4\u0102" +
    "\ufea4\001\002\000\006\025\u02cb\u0167\u02cc\001\002\000\012" +
    "\024\ufea8\025\ufea8\044\ufea8\u0102\ufea8\001\002\000\012\024" +
    "\ufea6\025\ufea6\044\ufea6\u0102\ufea6\001\002\000\010\024\ufeab" +
    "\044\ufeab\u0102\ufeab\001\002\000\006\163\u02c4\174\u02c5\001" +
    "\002\000\010\024\ufea5\044\ufea5\u0102\ufea5\001\002\000\012" +
    "\024\ufeb0\025\ufeb0\044\ufeb0\u0102\ufeb0\001\002\000\012\024" +
    "\ufead\025\u02d5\044\ufead\u0102\ufead\001\002\000\012\024\ufeaf" +
    "\025\ufeaf\044\ufeaf\u0102\ufeaf\001\002\000\010\024\ufeb2\044" +
    "\ufeb2\u0102\ufeb2\001\002\000\006\174\u010f\u0167\335\001\002" +
    "\000\010\024\ufeb1\044\ufeb1\u0102\ufeb1\001\002\000\010\024" +
    "\ufeae\044\ufeae\u0102\ufeae\001\002\000\004\u0167\335\001\002" +
    "\000\014\024\ufeb3\044\ufeb3\241\u02da\244\u02dc\u0102\ufeb3\001" +
    "\002\000\004\244\u02dd\001\002\000\010\024\ufeb6\044\ufeb6" +
    "\u0102\ufeb6\001\002\000\010\024\ufeb5\044\ufeb5\u0102\ufeb5\001" +
    "\002\000\010\024\ufeb4\044\ufeb4\u0102\ufeb4\001\002\000\054" +
    "\002\ufebf\003\ufebf\031\ufebf\064\ufebf\111\ufebf\116\ufebf\132" +
    "\ufebf\146\ufebf\157\ufebf\164\ufebf\166\ufebf\176\ufebf\213\ufebf" +
    "\253\ufebf\254\ufebf\262\ufebf\275\ufebf\307\ufebf\320\ufebf\334" +
    "\ufebf\337\ufebf\001\002\000\004\263\ufe96\001\002\000\004" +
    "\263\ufe97\001\002\000\004\263\u02e2\001\002\000\004\u0167" +
    "\066\001\002\000\010\024\ufe98\044\ufe98\u0102\ufe98\001\002" +
    "\000\006\160\u02e7\176\u02e9\001\002\000\006\160\ufea1\176" +
    "\ufea1\001\002\000\006\160\ufea2\176\ufea2\001\002\000\004" +
    "\u0167\u02f1\001\002\000\010\024\ufea3\044\ufea3\u0102\ufea3\001" +
    "\002\000\004\u0167\u02eb\001\002\000\004\336\u02ef\001\002" +
    "\000\014\024\ufe9c\025\u02ed\044\ufe9c\336\ufe9c\u0102\ufe9c\001" +
    "\002\000\012\024\ufe9e\044\ufe9e\336\ufe9e\u0102\ufe9e\001\002" +
    "\000\004\u0167\u02eb\001\002\000\012\024\ufe9d\044\ufe9d\336" +
    "\ufe9d\u0102\ufe9d\001\002\000\004\u0167\u02eb\001\002\000\010" +
    "\024\ufe9f\044\ufe9f\u0102\ufe9f\001\002\000\010\024\ufea0\044" +
    "\ufea0\u0102\ufea0\001\002\000\004\032\u02f3\001\002\000\066" +
    "\002\uff42\003\uff42\024\uff42\031\uff42\032\uff42\044\uff42\064" +
    "\uff42\111\uff42\116\uff42\132\uff42\146\uff42\157\uff42\164\uff42" +
    "\166\uff42\176\uff42\213\uff42\253\uff42\254\uff42\262\uff42\275" +
    "\uff42\307\uff42\320\uff42\334\uff42\336\uff42\337\uff42\u0102\uff42" +
    "\001\002\000\006\107\u02f5\u0167\uff68\001\002\000\004\u0167" +
    "\uff69\001\002\000\004\u0167\066\001\002\000\012\024\uff66" +
    "\044\uff66\330\u02f8\u0102\uff66\001\002\000\024\031\uff98\101" +
    "\uff98\177\uff98\241\151\u0165\uff98\u0166\uff98\u0167\uff98\u0168\uff98" +
    "\u0169\uff98\001\002\000\010\024\125\044\124\u0102\123\001" +
    "\002\000\054\002\uff6a\003\uff6a\031\uff6a\064\uff6a\111\uff6a" +
    "\116\uff6a\132\uff6a\146\uff6a\157\uff6a\164\uff6a\166\uff6a\176" +
    "\uff6a\213\uff6a\253\uff6a\254\uff6a\262\uff6a\275\uff6a\307\uff6a" +
    "\320\uff6a\334\uff6a\337\uff6a\001\002\000\010\024\uff67\044" +
    "\uff67\u0102\uff67\001\002\000\004\002\001\001\002\000\004" +
    "\u0167\066\001\002\000\006\176\uff63\336\u02ff\001\002\000" +
    "\004\u0167\066\001\002\000\004\176\u0301\001\002\000\004" +
    "\u0167\u0304\001\002\000\014\024\uff49\044\uff49\107\u032a\330" +
    "\uff49\u0102\uff49\001\002\000\016\024\uff4b\025\u0328\044\uff4b" +
    "\107\uff4b\330\uff4b\u0102\uff4b\001\002\000\010\004\u030b\026" +
    "\u0308\031\u0309\001\002\000\016\024\uff5d\025\uff5d\044\uff5d" +
    "\107\uff5d\330\uff5d\u0102\uff5d\001\002\000\016\024\uff5e\025" +
    "\uff5e\044\uff5e\107\uff5e\330\uff5e\u0102\uff5e\001\002\000\016" +
    "\024\uff5b\025\uff5b\044\uff5b\107\uff5b\330\uff5b\u0102\uff5b\001" +
    "\002\000\004\u0167\u0319\001\002\000\004\026\u0310\001\002" +
    "\000\016\024\uff5c\025\uff5c\044\uff5c\107\uff5c\330\uff5c\u0102" +
    "\uff5c\001\002\000\020\031\106\244\u030d\257\u030e\u0165\061" +
    "\u0166\077\u0167\066\u0169\063\001\002\000\016\024\uff5a\025" +
    "\uff5a\044\uff5a\107\uff5a\330\uff5a\u0102\uff5a\001\002\000\016" +
    "\024\uff57\025\uff57\044\uff57\107\uff57\330\uff57\u0102\uff57\001" +
    "\002\000\016\024\uff58\025\uff58\044\uff58\107\uff58\330\uff58" +
    "\u0102\uff58\001\002\000\016\024\uff59\025\uff59\044\uff59\107" +
    "\uff59\330\uff59\u0102\uff59\001\002\000\004\u015f\u0311\001\002" +
    "\000\004\031\u0312\001\002\000\014\031\106\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\004\025\u0314\001\002" +
    "\000\004\u0165\u0315\001\002\000\004\025\u0316\001\002\000" +
    "\004\u0165\u0317\001\002\000\004\032\u0318\001\002\000\016" +
    "\024\uff4d\025\uff4d\044\uff4d\107\uff4d\330\uff4d\u0102\uff4d\001" +
    "\002\000\006\004\u031e\031\u031c\001\002\000\016\024\uff56" +
    "\025\uff56\044\uff56\107\uff56\330\uff56\u0102\uff56\001\002\000" +
    "\016\024\uff55\025\uff55\044\uff55\107\uff55\330\uff55\u0102\uff55" +
    "\001\002\000\014\031\106\u0165\061\u0166\077\u0167\066\u0169" +
    "\063\001\002\000\016\024\uff53\025\uff53\044\uff53\107\uff53" +
    "\330\uff53\u0102\uff53\001\002\000\014\031\106\u0165\061\u0166" +
    "\077\u0167\066\u0169\063\001\002\000\016\024\uff54\025\uff54" +
    "\044\uff54\107\uff54\330\uff54\u0102\uff54\001\002\000\016\024" +
    "\uff52\025\uff52\044\uff52\107\uff52\330\uff52\u0102\uff52\001\002" +
    "\000\004\032\u0326\001\002\000\006\025\u0323\032\uff4e\001" +
    "\002\000\014\031\106\u0165\061\u0166\077\u0167\066\u0169\063" +
    "\001\002\000\004\032\uff50\001\002\000\004\032\uff4f\001" +
    "\002\000\016\024\uff51\025\uff51\044\uff51\107\uff51\330\uff51" +
    "\u0102\uff51\001\002\000\014\024\uff5f\044\uff5f\107\uff5f\330" +
    "\uff5f\u0102\uff5f\001\002\000\004\u0167\u0304\001\002\000\014" +
    "\024\uff4c\044\uff4c\107\uff4c\330\uff4c\u0102\uff4c\001\002\000" +
    "\004\u0167\066\001\002\000\012\024\uff44\044\uff44\330\u032c" +
    "\u0102\uff44\001\002\000\024\031\uff98\101\uff98\177\uff98\241" +
    "\151\u0165\uff98\u0166\uff98\u0167\uff98\u0168\uff98\u0169\uff98\001\002" +
    "\000\010\024\125\044\124\u0102\123\001\002\000\010\024" +
    "\uff45\044\uff45\u0102\uff45\001\002\000\054\002\uff65\003\uff65" +
    "\031\uff65\064\uff65\111\uff65\116\uff65\132\uff65\146\uff65\157" +
    "\uff65\164\uff65\166\uff65\176\uff65\213\uff65\253\uff65\254\uff65" +
    "\262\uff65\275\uff65\307\uff65\320\uff65\334\uff65\337\uff65\001" +
    "\002\000\010\024\uff77\044\uff77\u0102\uff77\001\002\000\012" +
    "\024\uff4a\044\uff4a\330\uff4a\u0102\uff4a\001\002\000\014\024" +
    "\uff46\025\u0333\044\uff46\330\uff46\u0102\uff46\001\002\000\004" +
    "\u0167\066\001\002\000\012\024\uff48\044\uff48\330\uff48\u0102" +
    "\uff48\001\002\000\012\024\uff47\044\uff47\330\uff47\u0102\uff47" +
    "\001\002\000\004\176\uff64\001\002\000\006\025\u0338\176" +
    "\uff60\001\002\000\004\u0167\066\001\002\000\004\176\uff62" +
    "\001\002\000\004\176\uff61\001\002\000\004\u0167\066\001" +
    "\002\000\010\024\125\044\124\u0102\123\001\002\000\054" +
    "\002\ufe7e\003\ufe7e\031\ufe7e\064\ufe7e\111\ufe7e\116\ufe7e\132" +
    "\ufe7e\146\ufe7e\157\ufe7e\164\ufe7e\166\ufe7e\176\ufe7e\213\ufe7e" +
    "\253\ufe7e\254\ufe7e\262\ufe7e\275\ufe7e\307\ufe7e\320\ufe7e\334" +
    "\ufe7e\337\ufe7e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u033b\000\056\002\013\003\021\004\030\070\034\077" +
    "\010\102\005\131\020\164\033\230\047\263\017\313\042" +
    "\315\041\320\024\321\003\324\050\340\032\345\043\346" +
    "\004\347\026\354\051\362\027\363\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u02fc\001\001\000\002\001\001\000\004\013" +
    "\u02f3\001\001\000\004\131\u02f1\001\001\000\014\231\u02af" +
    "\232\u02ab\250\u02ae\255\u02b3\261\u02b2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\355\u02a6" +
    "\001\001\000\006\143\u0204\144\u0206\001\001\000\002\001" +
    "\001\000\056\002\u0202\003\021\004\030\070\034\077\010" +
    "\102\005\131\020\164\033\230\047\263\017\313\042\315" +
    "\041\320\024\321\003\324\050\340\032\345\043\346\004" +
    "\347\026\354\051\362\027\363\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\351\u01fa" +
    "\001\001\000\004\005\u01f1\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\355\u01ec\001\001\000\004\071\u01d6" +
    "\001\001\000\022\165\u0102\166\376\173\u0106\174\u0103\204" +
    "\u0105\212\u0107\220\374\221\375\001\001\000\016\264\321" +
    "\265\310\267\320\271\307\273\314\274\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\002\306\003\021" +
    "\004\030\070\034\077\010\102\005\131\020\164\033\230" +
    "\047\263\017\313\042\315\041\320\024\321\003\324\050" +
    "\340\032\345\043\346\004\347\026\354\051\362\027\363" +
    "\006\001\001\000\002\001\001\000\006\316\303\355\302" +
    "\001\001\000\006\355\272\360\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\351\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\104\025\102\026\107\031\063\032\100" +
    "\033\057\052\106\053\064\054\066\055\071\060\070\061" +
    "\067\062\077\063\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\263\001\001\000\002\001\001\000\004\006\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\104\025\144" +
    "\026\107\031\063\032\100\033\057\052\106\053\064\054" +
    "\066\055\071\060\070\061\067\062\077\063\072\064\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\131\001\001\000\002" +
    "\001\001\000\004\012\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\104\026\110\031\063\032\100" +
    "\033\057\052\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\114" +
    "\001\001\000\002\001\001\000\040\005\104\025\117\026" +
    "\107\031\063\032\100\033\057\052\106\053\064\054\066" +
    "\055\071\057\115\060\070\061\067\062\077\063\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\104\025\126" +
    "\026\107\031\063\032\100\033\057\052\106\053\064\054" +
    "\066\055\071\060\070\061\067\062\077\063\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\104\031" +
    "\063\032\134\033\057\052\106\001\001\000\002\001\001" +
    "\000\014\005\104\031\063\032\133\033\057\052\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\104" +
    "\025\136\026\107\031\063\032\100\033\057\052\106\053" +
    "\064\054\066\055\071\060\070\061\067\062\077\063\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\104\025\141\026\107\031\063\032\100\033\057\052\106" +
    "\053\064\054\066\055\071\060\070\061\067\062\077\063" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\145\001\001\000\002\001\001\000\004\066\250\001" +
    "\001\000\006\041\151\046\147\001\001\000\020\005\104" +
    "\026\161\031\063\032\100\033\057\034\157\052\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\104" +
    "\026\154\031\063\032\100\033\057\044\155\052\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\156" +
    "\001\001\000\002\001\001\000\006\042\244\043\245\001" +
    "\001\000\014\037\242\045\213\046\201\301\204\361\207" +
    "\001\001\000\014\037\205\045\213\046\201\301\204\361" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\166\036\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\166\036\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\361\223\001\001\000\036" +
    "\005\104\025\222\026\107\031\063\032\100\033\057\052" +
    "\106\053\064\054\066\055\071\060\070\061\067\062\077" +
    "\063\072\001\001\000\002\001\001\000\004\302\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\104" +
    "\026\241\031\063\032\100\033\057\052\106\001\001\000" +
    "\016\005\104\026\236\031\063\032\100\033\057\052\106" +
    "\001\001\000\002\001\001\000\016\005\104\026\240\031" +
    "\063\032\100\033\057\052\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\247\046\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\104\026\154\031\063\032\100\033\057\044\252\052\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\104\031\266\033\057\052\106\001\001\000\002\001\001" +
    "\000\012\005\104\031\265\033\057\052\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\104\025\270" +
    "\026\107\031\063\032\100\033\057\052\106\053\064\054" +
    "\066\055\071\060\070\061\067\062\077\063\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\317\276\351\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\317\305\351\277" +
    "\001\001\000\004\012\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\356\001\001\000\004\015\353\001" +
    "\001\000\004\015\345\001\001\000\002\001\001\000\004" +
    "\015\333\001\001\000\004\015\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\322\001\001\000\002" +
    "\001\001\000\004\005\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\266\327\001\001\000\002\001\001" +
    "\000\004\005\331\001\001\000\004\266\332\001\001\000" +
    "\002\001\001\000\004\010\335\001\001\000\004\011\342" +
    "\001\001\000\004\270\337\001\001\000\004\010\340\001" +
    "\001\000\002\001\001\000\004\270\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\272\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\272\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\272\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\362\275" +
    "\361\001\001\000\004\005\367\001\001\000\002\001\001" +
    "\000\004\276\363\001\001\000\002\001\001\000\004\005" +
    "\365\001\001\000\004\276\366\001\001\000\002\001\001" +
    "\000\004\277\371\001\001\000\004\005\372\001\001\000" +
    "\002\001\001\000\006\005\362\275\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\325\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\213\u016e\001\001" +
    "\000\002\001\001\000\004\012\u016d\001\001\000\004\175" +
    "\u0154\001\001\000\004\005\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\u0111\017\u010f" +
    "\047\u010c\167\u0110\171\u010d\001\001\000\004\170\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\172\u0131" +
    "\001\001\000\002\001\001\000\006\022\u0112\023\u0117\001" +
    "\001\000\004\303\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0118\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u011f\001\001\000\002\001\001\000\004\051\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\305\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u010f\171\u0133\001\001\000\002\001\001\000\004\300" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\175\u013c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u013e\001\001\000\002\001\001\000\004\016\u0140\001" +
    "\001\000\004\021\u0141\001\001\000\002\001\001\000\004" +
    "\020\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u014a\001\001\000\002\001" +
    "\001\000\004\010\u014c\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\104\026\161\031\063\032\100\033" +
    "\057\034\u014f\052\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\u0111\017\u010f\047" +
    "\u010c\167\u0153\171\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0158\001\001\000\002\001\001\000\006\010\u015b\176\u015a" +
    "\001\001\000\002\001\001\000\004\016\u015c\001\001\000" +
    "\004\177\u015e\001\001\000\006\010\u015b\176\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\200\u0161\001" +
    "\001\000\004\203\u016a\001\001\000\002\001\001\000\006" +
    "\010\u0165\201\u0164\001\001\000\002\001\001\000\004\202" +
    "\u0167\001\001\000\006\010\u0165\201\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u016c\046\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\214\u0170\215" +
    "\u0172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\205\u0176\001\001\000" +
    "\004\206\u018e\001\001\000\004\211\u0177\001\001\000\004" +
    "\364\u017a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\365\u0180\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\367\u0183\001\001\000\004\364\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\366\u0189\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\207\u018f" +
    "\001\001\000\002\001\001\000\004\210\u0191\001\001\000" +
    "\002\001\001\000\004\207\u0193\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u01c8\001" +
    "\001\000\004\010\u01be\001\001\000\004\010\u0199\001\001" +
    "\000\006\306\u019a\326\u019b\001\001\000\006\330\u01ac\351" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\u019e\023\u0117\001\001\000\006\356\u01a0\357\u01a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\030\070\034\077\010\102\005\131\020\164" +
    "\033\230\047\263\017\313\042\315\041\320\024\321\003" +
    "\324\050\340\032\342\u01a3\345\u01a4\346\004\347\026\354" +
    "\051\362\027\363\006\001\001\000\002\001\001\000\056" +
    "\004\030\070\034\077\010\102\005\131\020\164\033\230" +
    "\047\263\017\313\042\315\041\320\024\321\003\324\050" +
    "\340\032\342\u01a5\343\u01a6\345\u01a4\346\004\347\026\354" +
    "\051\362\027\363\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\104\025\u01a8\026\107\031\063\032" +
    "\100\033\057\052\106\053\064\054\066\055\071\060\070" +
    "\061\067\062\077\063\072\001\001\000\002\001\001\000" +
    "\004\012\u01aa\001\001\000\002\001\001\000\006\022\u01af" +
    "\023\u0117\001\001\000\004\307\u01ae\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\331\u01b2\332\u01b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\333\u01b3\334" +
    "\u01b4\001\001\000\006\335\u01b9\336\u01b8\001\001\000\002" +
    "\001\001\000\036\005\104\025\u01b6\026\107\031\063\032" +
    "\100\033\057\052\106\053\064\054\066\055\071\060\070" +
    "\061\067\062\077\063\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\337\u01bb\341\u01bc" +
    "\001\001\000\006\330\u01bd\351\u01ab\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\327\u01bf" +
    "\001\001\000\006\306\u019a\326\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\030\070\034\077\010\102\005\131\020\164" +
    "\033\230\047\263\017\313\042\315\041\320\024\321\003" +
    "\324\050\340\032\342\u01c5\345\u01a4\346\004\347\026\354" +
    "\051\362\027\363\006\001\001\000\002\001\001\000\004" +
    "\012\u01c7\001\001\000\002\001\001\000\004\224\u01ca\001" +
    "\001\000\004\225\u01d1\001\001\000\002\001\001\000\004" +
    "\131\u01cc\001\001\000\004\227\u01ce\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\226\u01d4\001\001\000\004\225" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u01d8\001\001\000\002\001\001\000\004\072\u01d9\001" +
    "\001\000\002\001\001\000\006\010\u01dc\073\u01db\001\001" +
    "\000\002\001\001\000\004\074\u01dd\001\001\000\002\001" +
    "\001\000\006\010\u01dc\073\u01df\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\104\025" +
    "\u01e5\026\107\031\063\032\100\033\057\052\106\053\064" +
    "\054\066\055\071\060\070\061\067\062\077\063\072\075" +
    "\u01e3\001\001\000\002\001\001\000\004\076\u01e9\001\001" +
    "\000\004\076\u01e7\001\001\000\040\005\104\025\u01e5\026" +
    "\107\031\063\032\100\033\057\052\106\053\064\054\066" +
    "\055\071\060\070\061\067\062\077\063\072\075\u01e8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u01eb\001\001\000\002\001\001\000\006\322" +
    "\u01ee\351\u01ed\001\001\000\002\001\001\000\004\012\u01f0" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\104\025\u01f3\026\107\031\063\032\100\033\057\052\106" +
    "\053\064\054\066\055\071\060\070\061\067\062\077\063" +
    "\072\351\u01f2\352\u01f4\001\001\000\004\353\u01f9\001\001" +
    "\000\004\353\u01f6\001\001\000\004\012\u01f5\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\104\025\u01f3" +
    "\026\107\031\063\032\100\033\057\052\106\053\064\054" +
    "\066\055\071\060\070\061\067\062\077\063\072\351\u01f2" +
    "\352\u01f8\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\u0200\023\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u01fe\001\001\000\004\012\u01ff\001" +
    "\001\000\002\001\001\000\004\012\u0201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\132" +
    "\u0240\001\001\000\002\001\001\000\004\013\u0207\001\001" +
    "\000\036\005\104\026\u0214\031\063\032\100\033\057\052" +
    "\106\053\u020f\054\066\055\071\060\070\061\067\062\077" +
    "\063\u0212\150\u020e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u020d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\151" +
    "\u023d\001\001\000\002\001\001\000\004\151\u0230\001\001" +
    "\000\004\151\u022e\001\001\000\004\151\u022c\001\001\000" +
    "\004\151\u0225\001\001\000\002\001\001\000\010\022\u0218" +
    "\023\u0117\163\u0219\001\001\000\002\001\001\000\004\162" +
    "\u021b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\104\026\u0220\031\063\032\100\033\057" +
    "\052\106\001\001\000\002\001\001\000\010\022\u0218\023" +
    "\u0117\163\u0222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\152\u0229\001\001\000\004\153\u0226\001\001\000" +
    "\002\001\001\000\036\005\104\026\u0214\031\063\032\100" +
    "\033\057\052\106\053\u020f\054\066\055\071\060\070\061" +
    "\067\062\077\063\u0212\150\u0228\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\153\u022d\001\001\000\002\001\001\000\004\153\u022f" +
    "\001\001\000\002\001\001\000\004\153\u0231\001\001\000" +
    "\002\001\001\000\020\005\104\026\u0235\031\063\032\100" +
    "\033\057\052\106\161\u0234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\u0237\023\u0117" +
    "\001\001\000\004\162\u0238\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\104\026\u0235\031\063\032\100" +
    "\033\057\052\106\161\u023b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\u023e\001\001\000\002\001\001" +
    "\000\006\005\u0243\154\u0241\001\001\000\002\001\001\000" +
    "\004\133\u0277\001\001\000\006\005\u0243\154\u0274\001\001" +
    "\000\004\155\u0245\001\001\000\002\001\001\000\004\156" +
    "\u024b\001\001\000\002\001\001\000\004\005\u026f\001\001" +
    "\000\002\001\001\000\004\160\u0264\001\001\000\004\160" +
    "\u025e\001\001\000\002\001\001\000\004\160\u024e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0250\001" +
    "\001\000\004\155\u0251\001\001\000\004\157\u0254\001\001" +
    "\000\004\005\u025b\001\001\000\002\001\001\000\004\156" +
    "\u0255\001\001\000\002\001\001\000\004\005\u0257\001\001" +
    "\000\002\001\001\000\004\005\u0259\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u025d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0260\001\001\000\004\155\u0261\001\001\000\004\157\u0262" +
    "\001\001\000\004\156\u0263\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0266\001\001\000\004\155\u0267" +
    "\001\001\000\004\157\u0268\001\001\000\004\156\u0269\001" +
    "\001\000\002\001\001\000\004\005\u026b\001\001\000\004" +
    "\155\u026c\001\001\000\004\157\u026d\001\001\000\004\156" +
    "\u026e\001\001\000\002\001\001\000\004\155\u0270\001\001" +
    "\000\004\157\u0271\001\001\000\004\156\u0272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\u02a5\046\147\001\001\000\004\134" +
    "\u0278\001\001\000\004\137\u0283\001\001\000\002\001\001" +
    "\000\010\005\u027d\063\u027c\136\u027b\001\001\000\002\001" +
    "\001\000\004\135\u0281\001\001\000\004\135\u027f\001\001" +
    "\000\010\005\u027d\063\u027c\136\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\u0292" +
    "\145\u0291\001\001\000\004\140\u0285\001\001\000\002\001" +
    "\001\000\004\012\u0289\001\001\000\004\140\u0287\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\104\025\u028c\026\107\031\063\032\100\033\057" +
    "\052\106\053\064\054\066\055\071\060\070\061\067\062" +
    "\077\063\072\141\u028b\001\001\000\002\001\001\000\004" +
    "\142\u028d\001\001\000\004\016\u0290\001\001\000\040\005" +
    "\104\025\u028c\026\107\031\063\032\100\033\057\052\106" +
    "\053\064\054\066\055\071\060\070\061\067\062\077\063" +
    "\072\141\u028f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\104\026\u0297\031\063\032" +
    "\100\033\057\052\106\053\u0294\054\066\055\071\060\070" +
    "\061\067\062\077\146\u0293\001\001\000\006\043\u02a3\147" +
    "\u02a2\001\001\000\014\037\u029f\045\213\046\201\301\204" +
    "\361\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\037\u0298\045\213\046\201\301\204\361\207\001\001" +
    "\000\002\001\001\000\006\005\166\036\u029a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\166\036\u029d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\u02a1\045\213\046\201\301\204\361\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\u0292\145\u02a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\314\u02a7\351\u02a8\001\001\000\004\012\u02aa\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\251\u02e3\001\001\000\004\262" +
    "\u02e0\001\001\000\002\001\001\000\004\012\u02dd\001\001" +
    "\000\004\005\u02bb\001\001\000\004\005\u02b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\u02b6\001\001\000\004\260\u02b8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\233\u02c1\234\u02bd\236\u02c2\242\u02bf\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\u0111\017\u02d2" +
    "\047\u02d0\237\u02d3\240\u02d1\001\001\000\002\001\001\000" +
    "\006\243\u02c5\244\u02c6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u02c7\001\001\000\006\245\u02c9\312\u02c8" +
    "\001\001\000\002\001\001\000\004\247\u02cd\001\001\000" +
    "\006\245\u02cc\312\u02c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\243\u02cf\244\u02c6\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\241\u02d5" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\u0111\017\u02d2\047\u02d0\237\u02d6\240\u02d1\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u0111\047\u02d8\001" +
    "\001\000\004\235\u02da\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u02e2\001\001\000\002\001\001\000\004\252" +
    "\u02e7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\253\u02e9\001\001\000" +
    "\002\001\001\000\004\254\u02eb\001\001\000\002\001\001" +
    "\000\004\253\u02ed\001\001\000\002\001\001\000\004\253" +
    "\u02ef\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u02f5\001\001\000" +
    "\002\001\001\000\004\005\u02f6\001\001\000\004\101\u02f8" +
    "\001\001\000\006\041\u02fa\046\147\001\001\000\004\012" +
    "\u02f9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u02fd\001\001\000\004\104\u02ff\001" +
    "\001\000\006\005\u0336\105\u0335\001\001\000\002\001\001" +
    "\000\006\107\u0301\110\u0302\001\001\000\004\125\u032a\001" +
    "\001\000\004\124\u0326\001\001\000\012\111\u0305\112\u0304" +
    "\114\u0309\123\u0306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\u0319\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\104\026\u030e\031" +
    "\063\032\100\033\057\052\106\113\u030b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\104" +
    "\026\u0312\031\063\032\100\033\057\052\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\116" +
    "\u031a\117\u031e\120\u031c\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\104\026\u0321\031\063\032\100\033" +
    "\057\052\106\121\u0320\001\001\000\002\001\001\000\016" +
    "\005\104\026\u031f\031\063\032\100\033\057\052\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0323\001\001\000\020\005\104\026\u0321\031" +
    "\063\032\100\033\057\052\106\121\u0324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\u0328\110\u0302\001\001\000\002\001\001" +
    "\000\006\005\u0331\126\u0330\001\001\000\006\067\u032d\130" +
    "\u032c\001\001\000\006\041\u032f\046\147\001\001\000\004" +
    "\012\u032e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\u0333\001\001" +
    "\000\006\005\u0331\126\u0334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\u0338\001\001" +
    "\000\006\005\u0336\105\u0339\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u033b\001\001\000\004\012\u033c" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }        
        m.append(" : "+message);
        m.append("\n");
        errores += m;
        //System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public static String errores;

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            errores = "";
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            //System.out.println("\n*** Resultados finales ***");            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // Cursor ::= DECLARE Identificador CURSOR FOR Select Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cursor",229, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // As1 ::= AS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("As1",237, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // As ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("As",236, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // As ::= As1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("As",236, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // FuncionesT ::= CREATE OrAlter FUNCTION ColumnRef Procedure1 RETURN DataType As BEGIN Stmts RETURN ConstantTerm END Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FuncionesT",228, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // Execute ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Execute",222, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // Execute ::= EXEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Execute",222, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // MasParametro ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MasParametro",233, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // MasParametro ::= Coma MandarParametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MasParametro",233, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // MandarParametros ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MandarParametros",232, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // MandarParametros ::= Variable MasParametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MandarParametros",232, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // MandarParametros ::= ConstantTerm MasParametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MandarParametros",232, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // ExecProcedureFunction ::= Execute TableRef MandarParametros Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExecProcedureFunction",234, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // CerrarParentesis1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CerrarParentesis1",197, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // CerrarParentesis1 ::= CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CerrarParentesis1",197, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // AbrirParentesis1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AbrirParentesis1",196, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // AbrirParentesis1 ::= AbrirParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AbrirParentesis1",196, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // RepParametro1 ::= Coma Parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepParametro1",223, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // RepParametro ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepParametro",221, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // RepParametro ::= RepParametro1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepParametro",221, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // OutputOp1 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OutputOp1",220, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // OutputOp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OutputOp",219, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // OutputOp ::= OutputOp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OutputOp",219, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ValorParametro1 ::= Igual ConstantTerm 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ValorParametro1",218, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ValorParametro ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ValorParametro",217, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ValorParametro ::= ValorParametro1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ValorParametro",217, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // Varying1 ::= VARYING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Varying1",216, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // Varying ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Varying",215, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // Varying ::= Varying1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Varying",215, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // Parametros ::= Variable DataType Varying ValorParametro OutputOp RepParametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Parametros",214, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // Procedure1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Procedure1",212, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // Procedure1 ::= AbrirParentesis1 Parametros CerrarParentesis1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Procedure1",212, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // Procedure2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Procedure2",213, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // Procedure2 ::= PuntoComa Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Procedure2",213, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // Proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Proc",211, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // Proc ::= PROC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Proc",211, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // Procedure ::= CREATE OrAlter Proc ColumnRef Procedure2 Procedure1 AS BEGIN Stmts END Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Procedure",210, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // Savepoint1 ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Savepoint1",208, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // Savepoint1 ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Savepoint1",208, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // Savepoint ::= SAVE Transaction Savepoint1 Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Savepoint",207, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // Rollback1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rollback1",238, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // Rollback1 ::= Transaction 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rollback1",238, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // Rollback ::= ROLLBACK Rollback1 Commit2 Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rollback",206, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // Commit2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit2",205, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // Commit2 ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit2",205, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // Commit2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit2",205, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // Commit1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit1",204, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // Commit1 ::= Transaction Commit2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit1",204, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // Commit ::= COMMIT Commit1 Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Commit",203, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // NombreTran ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NombreTran",202, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // NombreTran ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NombreTran",202, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // NombreTran ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NombreTran",202, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // BeginTransaction ::= BEGIN Transaction NombreTran Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BeginTransaction",201, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // Stmts1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmts1",225, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // Stmts1 ::= Stmts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmts1",225, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // Stmts ::= Stmt Stmts1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmts",224, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // SetVariables ::= SET Variable Igual ConstantTerm Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SetVariables",240, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // DeclararVariables ::= DECLARE Variable DataType Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclararVariables",241, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // Transaction ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Transaction",235, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // Transaction ::= TRAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Transaction",235, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",231, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // Truncate ::= TRUNCATE TABLE TableRef Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Truncate",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // SigId ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigId",189, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // SigId ::= Coma TableRef Find_index 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigId",189, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // Sigcolumn ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigcolumn",188, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // Sigcolumn ::= Coma TableRef Sigcolumn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigcolumn",188, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // Find_index ::= ON TableRef SigId 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Find_index",187, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // Find_index ::= TableRef Sigcolumn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Find_index",187, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // Drop_index ::= INDEX IfExists Identificador Find_index 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop_index",186, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // Drop_user ::= USER IfExists Identificador SigDrop_db_user 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop_user",185, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // SigDrop_db_user ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_db_user",184, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // SigDrop_db_user ::= Coma Identificador SigDrop_db_user 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_db_user",184, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // Drop_database ::= DATABASE IfExists Identificador SigDrop_db_user 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop_database",183, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // SigDrop_view ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_view",182, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // SigDrop_view ::= Coma ColumnRef SigDrop_view 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_view",182, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // Drop_view ::= VIEW IfExists ColumnRef SigDrop_view 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop_view",181, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // SigDrop_table ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_table",180, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // SigDrop_table ::= Coma TableRef SigDrop_table 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SigDrop_table",180, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // Drop_table ::= TABLE IfExists TableRef SigDrop_table 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop_table",179, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // Droppers ::= Drop_index 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Droppers",178, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // Droppers ::= Drop_user 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Droppers",178, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // Droppers ::= Drop_database 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Droppers",178, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // Droppers ::= Drop_view 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Droppers",178, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // Droppers ::= Drop_table 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Droppers",178, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // Drop ::= DROP Droppers Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Drop",177, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // IndexName ::= ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IndexName",176, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // IndexName ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IndexName",176, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterIndex ::= INDEX IndexName ON TableRef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterIndex",175, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterViewCheck ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterViewCheck",174, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterViewCheck ::= WITH CHECK OPTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterViewCheck",174, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterView ::= VIEW TableRef AS Select AlterViewCheck 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterView",171, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterD3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterD3",170, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterD3 ::= Coma AlterD2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterD3",170, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterD2 ::= Identificador AlterD3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterD2",169, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterD1 ::= SET AlterD2 WITH AlterD2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterD1",168, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterD1 ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterD1",168, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // Name ::= CURRENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Name",167, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // Name ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Name",167, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterDatabase ::= DATABASE Name AlterD1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterDatabase",166, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // RepDrop ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepDrop",165, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // RepDrop ::= Coma AlterTDrop1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepDrop",165, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AlterTDrop4 ::= Coma AlterTDrop2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTDrop4",200, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AlterTDrop2 ::= AlterTDrop4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTDrop2",163, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // AlterTDrop2 ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTDrop2",163, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ConsCol ::= COLUMN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConsCol",162, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ConsCol ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConsCol",162, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // AlterTDrop1 ::= ConsCol IfExists AlterTDrop2 RepDrop 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTDrop1",161, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // AlterTDrop ::= DROP AlterTDrop1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTDrop",160, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // RepAdd ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepAdd",159, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // RepAdd ::= Coma AlterAdd1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepAdd",159, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // AlterTAdd2 ::= Constraint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTAdd2",158, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // AlterTAdd2 ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTAdd2",158, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // AlterAdd1 ::= AlterTAdd2 RepAdd 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterAdd1",157, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // AlterTAdd ::= ADD AlterAdd1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTAdd",156, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NulNot ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NulNot",155, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // NulNot ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NulNot",155, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NulNot ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NulNot",155, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // AlterTColumn ::= ALTER COLUMN ColumnDef NulNot 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTColumn",154, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // AlterT ::= AlterTDrop 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterT",153, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // AlterT ::= AlterTAdd 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterT",153, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // AlterT ::= AlterTColumn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterT",153, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // AlterTable ::= TABLE TableRef AlterT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterTable",152, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // AlterX ::= AlterIndex 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterX",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // AlterX ::= AlterView 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterX",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // AlterX ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterX",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // AlterX ::= AlterTable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AlterX",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // Alter ::= ALTER AlterX Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Alter",150, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // With2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("With2",149, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // With2 ::= WITH CHECK OPTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("With2",149, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // View4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("View4",148, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // View4 ::= Coma View3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("View4",148, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // View3 ::= Identificador View4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("View3",147, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // View2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("View2",146, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // View2 ::= WITH View3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("View2",146, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OrAlter",143, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OrAlter",143, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // CreateView ::= OrAlter VIEW ColumnRef View2 AS Select With2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateView",142, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // With ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("With",139, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // With ::= WITH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("With",139, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // User6 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("User6",138, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // User6 ::= With Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("User6",138, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // User12 ::= Identificador User6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("User12",137, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // CreateUser ::= USER User12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateUser",136, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // Database10 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database10",245, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Database10 ::= Coma Database7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database10",245, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // Database9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database9",244, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // Database9 ::= Coma SIZE Igual Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database9",244, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Database8 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database8",243, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Database8 ::= Coma FILE Igual Cadena Database9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database8",243, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Database7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database7",242, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Database7 ::= AbrirParentesis NAMES Igual Cadena Database8 CerrarParentesis Database10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database7",242, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Database6 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database6",135, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Database6 ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database6",135, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Database4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database4",134, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // Database4 ::= Coma Database3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database4",134, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // Database3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database3",133, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // Database3 ::= Identificador Database4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database3",133, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // Primary ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Primary",132, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Primary",132, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // Database2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database2",131, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // Database2 ::= ON Primary Database3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Database2",131, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // CreateDatabase ::= DATABASE Identificador Database2 Database6 Database7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateDatabase",130, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // Index7 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index7",129, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // Index7 ::= WHERE Search_condition 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index7",129, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // Index6 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index6",128, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // Index6 ::= Coma Index5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index6",128, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // Index5 ::= ColumnRef Index6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index5",127, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // Index4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index4",126, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Index4 ::= INCLUDE AbrirParentesis Index5 CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index4",126, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Index3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index3",125, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Index3 ::= Coma Index1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index3",125, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Index1 ::= ColumnRef AscDesc Index3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Index1",124, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Clustered ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Clustered",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Clustered ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Clustered",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Clustered ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Clustered",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Unique ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Unique",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Unique ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Unique",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CreateIndex ::= Unique Clustered INDEX Identificador ON TableRef AbrirParentesis Index1 CerrarParentesis Index4 Index7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateIndex",121, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // OnPrimary ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OnPrimary",195, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // OnPrimary ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OnPrimary",195, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Create4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create4",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Create4 ::= Coma Create3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create4",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Create3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create3",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Create3 ::= Constraint Create4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create3",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Create2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create2",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Create2 ::= Coma Create1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create2",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Create1 ::= Create3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create1",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Create1 ::= ColumnDef Create2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create1",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CreateTable ::= TABLE TableRef AbrirParentesis Create1 CerrarParentesis OnPrimary 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateTable",116, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CreateX ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateX",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CreateX ::= CreateUser 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateX",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CreateX ::= CreateDatabase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateX",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CreateX ::= CreateView 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateX",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CreateX ::= CreateTable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CreateX",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Create ::= CREATE CreateX Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Create",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Convert_exp ::= CONVERT AbrirParentesis Convert_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Convert_exp",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Convert_exp ::= DataType Lenght_exp Coma Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Convert_exp",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Lenght_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Lenght_exp",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Lenght_exp ::= AbrirParentesis Numero CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Lenght_exp",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Cast_exp ::= CAST AbrirParentesis Cast_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cast_exp",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Cast_exp ::= Expression AS DataType Lenght_exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cast_exp",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Outer_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Outer_exp",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Outer_exp ::= OUTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Outer_exp",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // On_exp ::= ON TableRef Igual TableRef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("On_exp",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // On_exp ::= AbrirParentesis ON TableRef Igual TableRef CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("On_exp",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Join_tabla ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Join_tabla ::= JOIN TableRef Alias_tabla On_exp Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Join_tabla ::= INNER JOIN TableRef Alias_tabla On_exp Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Join_tabla ::= RIGHT Outer_exp JOIN TableRef Alias_tabla On_exp Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Join_tabla ::= LEFT Outer_exp JOIN TableRef Alias_tabla On_exp Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Join_tabla ::= FULL Outer_exp JOIN TableRef Alias_tabla On_exp Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Join_tabla",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Alias_tabla ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Alias_tabla",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Alias_tabla ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Alias_tabla",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Alias_tabla ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Alias_tabla",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TableExp ::= TableRef Alias_tabla Join_tabla 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableExp",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TableExp ::= AbrirParentesis TableExp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableExp",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OtroSelect ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSelect",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OtroSelect ::= Coma SelectExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSelect",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Sig_as ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sig_as",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Sig_as ::= Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sig_as",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ColExp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColExp",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ColExp ::= AS Sig_as 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColExp",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SelectExpression ::= CONVERT AbrirParentesis Convert_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SelectExpression ::= CAST AbrirParentesis Cast_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SelectExpression ::= Expression ColExp OtroSelect 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SelectExpression ::= Function ColExp OtroSelect 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SelectExpression ::= Cadena ColExp OtroSelect 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SelectExpression ::= Case ColExp OtroSelect 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SelectExpression ::= Multiplicacion ColExp OtroSelect 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SelectExpression",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OtroSearchHaving ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSearchHaving",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OtroSearchHaving ::= Logic_word Search_conditionHaving 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSearchHaving",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // PredicadoHaving ::= FREETEXT AbrirParentesis Cont_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PredicadoHaving",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PredicadoHaving ::= CONTAINS AbrirParentesis Cont_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PredicadoHaving",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // PredicadoHaving ::= Function StateLogic Cadena StateLogic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PredicadoHaving",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PredicadoHaving ::= Expression StateLogic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PredicadoHaving",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Search_conditionHaving ::= Not PredicadoHaving OtroSearchHaving 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Search_conditionHaving",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Option ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Option",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Option ::= ALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Option",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Option ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Option",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Selstate ::= Option TopExpression SelectExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Selstate",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Sigorder ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigorder",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Sigorder ::= Coma Orderby_exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigorder",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Orderby_exp1 ::= ConstantTerm Sigorder AscDesc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Orderby_exp1",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Orderby_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Orderby_exp",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Orderby_exp ::= AbrirParentesis Orderby_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Orderby_exp",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Orderby_exp ::= ORDER BY Orderby_exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Orderby_exp",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Having_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Having_exp",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Having_exp ::= HAVING Search_conditionHaving 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Having_exp",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Group_state ::= Case Siggroup 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Group_state",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Group_state ::= TableRef Siggroup 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Group_state",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Siggroup ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Siggroup",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Siggroup ::= Coma Group_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Siggroup",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Groupby_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Groupby_exp",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Groupby_exp ::= GROUP BY Group_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Groupby_exp",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Sigexp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigexp",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Sigexp ::= WHERE Search_condition 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sigexp",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Selaction ::= FROM TableExp Sigexp Groupby_exp Having_exp Orderby_exp Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Selaction",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Select ::= AbrirParentesis Select CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Select",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Select ::= SELECT Selstate Selaction 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Select",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // WhereU1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhereU1",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // WhereU1 ::= WhereExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhereU1",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FromU3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FromU3",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FromU3 ::= Coma FromU2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FromU3",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FromU2 ::= TableRef FromU3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FromU2",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FromU1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FromU1",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FromU1 ::= FROM FromU2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FromU1",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Rep ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rep",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Rep ::= Coma Update55 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Rep",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Update14 ::= AbrirParentesis Punto WRITE AbrirParentesis Expression Coma Numero Coma Numero CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update14",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Update13 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update13",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Update13 ::= Coma Update12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update13",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Update12 ::= Expression Update13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update12",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Update11 ::= AbrirParentesis Update12 CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update11",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Update10 ::= Igual Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update10",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Update1011 ::= Update11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update1011",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Update1011 ::= Update10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update1011",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Update9 ::= Identificador Update1011 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update9",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Update8 ::= Punto Update9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update8",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Update7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update7",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Update7 ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update7",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Update7 ::= Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update7",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Update6 ::= Igual Update7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update6",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Update6814 ::= Update14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update6814",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Update6814 ::= Update8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update6814",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Update6814 ::= Update6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update6814",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Update5 ::= Identificador Update6814 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update5",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Update55 ::= Update5 Rep 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update55",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Update4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update4",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Update4 ::= Coma Update3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update4",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Update3 ::= TableRef Update4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update3",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Update2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update2",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Update2 ::= WITH Update3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update2",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Update ::= UPDATE TopExpression TableRef Update2 SET Update55 FromU1 WhereU1 Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Update",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Delete1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Delete1",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Delete1 ::= WHERE Search_condition 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Delete1",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // From ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("From",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // From ::= FROM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("From",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Delete ::= DELETE TopExpression From TableRef Delete1 Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Delete",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Insert5 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert5",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Insert5 ::= Coma Insert4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert5",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Insert4 ::= Cadena Insert5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert4",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Insert4 ::= ConstantTerm Insert5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert4",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Insert3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert3",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Insert3 ::= Coma Insert2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert3",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Insert2 ::= ColumnRef Insert3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert2",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Insert1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert1",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Insert1 ::= AbrirParentesis Insert2 CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert1",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Into ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Into",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Into ::= INTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Into",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Insert ::= INSERT Into TableRef Insert1 VALUES AbrirParentesis Insert4 CerrarParentesis Fin_state 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Insert",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // WhereExpression ::= WHERE Search_condition 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhereExpression",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Case2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Case2 ::= ELSE Result_exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Case1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case1",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Case1 ::= WHEN Search_condition THEN Result_exp Case1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case1",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Const ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Const",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Const ::= ConstantTerm 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Const",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Case ::= CASE Const Case1 Case2 END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Case",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FSum ::= SUM AbrirParentesis ConstantTerm CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FSum",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FMin ::= MIN AbrirParentesis ConstantTerm CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FMin",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FMax ::= MAX AbrirParentesis ConstantTerm CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FMax",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FCount2 ::= ConstantTerm 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FCount2",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FCount2 ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FCount2",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FCount1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FCount1",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FCount1 ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FCount1",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FCount ::= COUNT AbrirParentesis FCount1 FCount2 CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FCount",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FAvg ::= AVG AbrirParentesis ConstantTerm CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FAvg",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Function ::= FSum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Function ::= FMin 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Function ::= FMax 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Function ::= FCount 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Function ::= FAvg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Function",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Value ::= Float 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Value ::= Bit 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Value ::= Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ColumnDef3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef3",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ColumnDef3 ::= PRIMARY KEY AscDesc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef3",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Identity ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Identity",193, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Identity ::= IDENTITY AbrirParentesis Numero Coma Numero CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Identity",193, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ColumnDef1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ColumnDef1 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ColumnDef1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ColumnDef ::= ColumnRef DataType Identity ColumnDef1 ColumnDef3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnDef",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Not ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Not",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Not",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Compare ::= MayorQue 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Compare ::= MenorQue 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Compare ::= Igual 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Compare ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Compare ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Compare ::= DiferenteDe 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Compare",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Result_exp ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Result_exp",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Result_exp ::= Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Result_exp",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Logic_word ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Logic_word",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Logic_word ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Logic_word",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OtroSearch ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSearch",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OtroSearch ::= Logic_word Search_condition 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OtroSearch",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Search_condition ::= Not Predicado OtroSearch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Search_condition",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // State1 ::= BETWEEN Expression AND Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("State1",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // State1 ::= IN Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("State1",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // State2 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("State2",192, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // State2 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("State2",192, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StateLogic ::= Predicado1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StateLogic",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StateLogic ::= Not State1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StateLogic",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StateLogic ::= IS State2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StateLogic",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StateLogic ::= Compare ConstantTerm 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StateLogic",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LikeIgual ::= Igual 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LikeIgual",239, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LikeIgual ::= LIKE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LikeIgual",239, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Predicado1 ::= LikeIgual Cadena Escape_exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado1",191, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Predicado1 ::= NOT LikeIgual Cadena Escape_exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado1",191, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Cont_exp ::= Multiplicacion Coma Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cont_exp",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cont_exp ::= TableRef Coma Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Cont_exp",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Escape_exp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Escape_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Escape_exp ::= ESCAPE Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Escape_exp",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Predicado ::= FREETEXT AbrirParentesis Cont_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Predicado ::= CONTAINS AbrirParentesis Cont_exp CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Predicado ::= Cadena StateLogic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Predicado ::= Expression StateLogic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Predicado",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpressionOpcion ::= Value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExpressionOpcion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpressionOpcion ::= TableRef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExpressionOpcion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FExpression ::= ExpressionOpcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FExpression",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FExpression ::= AbrirParentesis Expression CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FExpression",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression3",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression3 ::= Division FExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression3",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression3 ::= Multiplicacion FExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression3",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TExpression ::= FExpression Expression3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TExpression",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression2 ::= Resta TExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression2 ::= Suma TExpression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression2",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= TExpression Expression2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ConstantTerm ::= Case 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstantTerm",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ConstantTerm ::= Function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstantTerm",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ConstantTerm ::= Expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstantTerm",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VarOp ::= AbrirParentesis Numero CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VarOp",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Varchar ::= VARCHAR VarOp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Varchar",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DataType ::= Varchar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DataType",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DataType ::= BIT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DataType",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DataType ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DataType",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DataType ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DataType",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConstraintOpciones ::= FOREIGN KEY AbrirParentesis ColumnRef CerrarParentesis REFERENCES TableRef AbrirParentesis ColumnRef CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstraintOpciones",190, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ConstraintOpciones ::= CHECK AbrirParentesis Predicado CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstraintOpciones",190, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ConstraintOpciones ::= PRIMARY KEY Clustered AbrirParentesis Constraint1 CerrarParentesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ConstraintOpciones",190, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Constraint3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constraint3",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Constraint3 ::= Coma Constraint1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constraint3",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Constraint1 ::= Identificador AscDesc Constraint3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constraint1",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Constraint ::= CONSTRAINT Identificador ConstraintOpciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constraint",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Fin_state ::= GO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Fin_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Fin_state ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Fin_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Fin_state ::= Ambos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Fin_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AscDesc ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AscDesc",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AscDesc ::= DESC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AscDesc",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AscDesc ::= ASC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AscDesc",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IfExists ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfExists",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IfExists ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfExists",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sig_top ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sig_top",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Sig_top ::= PERCENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Sig_top",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TopExpression ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TopExpression",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TopExpression ::= TOP AbrirParentesis Numero CerrarParentesis Sig_top 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TopExpression",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ColumnRef1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnRef1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ColumnRef1 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnRef1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ColumnRef ::= Identificador ColumnRef1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ColumnRef",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TableRef2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableRef2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TableRef2 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableRef2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TableRef1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableRef1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TableRef1 ::= Punto Identificador TableRef2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableRef1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TableRef ::= Identificador TableRef1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TableRef",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= ExecProcedureFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= FuncionesT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= Procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= Savepoint 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= Rollback 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= Commit 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= BeginTransaction 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= SetVariables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmt ::= DeclararVariables 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= Cursor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= Select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stmt ::= Drop 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmt ::= Alter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= Create 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= Truncate 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= Delete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stmt ::= Update 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stmt ::= Insert 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",227, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Start1 ::= error Start 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Start1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Start1 ::= Stmt Start 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Start1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= Start1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

