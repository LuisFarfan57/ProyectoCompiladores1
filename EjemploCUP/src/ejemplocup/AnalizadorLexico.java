/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package ejemplocup;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\7\1\72\1\5\1\6\22\0\1\5\1\56\1\0"+
    "\1\71\1\0\1\53\1\57\1\14\1\62\1\64\1\13\1\51\1\4"+
    "\1\15\1\11\1\12\1\3\1\3\10\3\1\0\1\61\1\54\1\52"+
    "\1\55\1\0\1\70\1\16\1\34\1\30\1\17\1\20\1\32\1\40"+
    "\1\33\1\35\1\47\1\42\1\25\1\43\1\24\1\27\1\26\1\1"+
    "\1\23\1\36\1\22\1\31\1\45\1\44\1\21\1\37\1\41\1\63"+
    "\1\0\1\65\1\0\1\46\1\0\4\2\1\50\25\2\1\66\1\60"+
    "\1\67\1\10\6\0\1\72\u1fa2\0\1\72\1\72\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\30\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\1\1\20\2\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\1\3\1\5"+
    "\1\2\1\32\6\2\1\33\20\2\1\34\12\2\1\35"+
    "\15\2\1\36\1\37\3\2\1\40\31\2\1\41\1\2"+
    "\1\42\1\43\1\44\21\2\1\45\17\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\0\1\54\1\55\1\56"+
    "\1\57\5\0\1\5\1\60\1\61\1\62\1\63\1\64"+
    "\1\2\1\65\3\2\1\66\1\2\1\67\1\2\1\70"+
    "\3\2\1\71\16\2\1\72\11\2\1\73\23\2\1\74"+
    "\17\2\1\75\20\2\1\76\26\2\1\77\6\2\1\100"+
    "\17\2\1\101\2\2\1\102\7\2\1\103\1\2\1\104"+
    "\12\2\1\105\5\2\1\106\4\2\1\107\1\2\1\110"+
    "\1\2\1\111\4\2\1\112\12\2\1\113\1\114\4\0"+
    "\1\5\7\2\1\115\1\2\1\116\5\2\1\117\1\120"+
    "\2\2\1\121\1\122\3\2\1\123\1\124\3\2\1\125"+
    "\2\2\1\126\4\2\1\127\1\2\1\130\2\2\1\131"+
    "\1\2\1\132\1\133\2\2\1\134\1\135\12\2\1\136"+
    "\1\2\1\137\4\2\1\140\1\141\3\2\1\142\2\2"+
    "\1\143\1\2\1\144\1\2\1\145\3\2\1\146\6\2"+
    "\1\147\4\2\1\150\4\2\1\151\1\152\5\2\1\153"+
    "\1\2\1\154\1\155\22\2\1\156\10\2\1\157\4\2"+
    "\1\160\5\2\1\161\1\2\1\162\3\2\1\163\5\2"+
    "\1\164\1\165\5\2\1\166\13\2\1\167\11\2\1\170"+
    "\4\2\1\171\2\2\1\172\3\2\1\173\1\174\1\175"+
    "\7\2\1\176\1\2\1\177\1\2\1\200\3\2\1\201"+
    "\1\202\1\27\1\30\1\0\1\5\1\203\32\2\1\204"+
    "\30\2\1\205\2\2\1\206\2\2\1\207\4\2\1\210"+
    "\1\211\1\212\10\2\1\213\1\214\4\2\1\215\1\216"+
    "\6\2\1\217\6\2\1\220\1\221\12\2\1\222\6\2"+
    "\1\223\2\2\1\224\2\2\1\225\1\226\1\227\1\230"+
    "\1\231\1\2\1\232\2\2\1\233\1\2\1\234\5\2"+
    "\1\235\1\236\3\2\1\237\3\2\1\240\1\241\7\2"+
    "\1\242\13\2\1\243\6\2\1\244\1\245\1\2\1\246"+
    "\1\247\1\2\1\250\2\2\1\251\1\252\1\2\1\253"+
    "\3\2\1\254\1\2\1\255\5\2\1\256\5\2\1\257"+
    "\1\260\7\2\1\261\1\262\1\263\1\264\16\2\1\265"+
    "\6\2\1\266\1\267\7\2\1\270\3\2\1\271\1\2"+
    "\1\272\10\2\1\273\4\2\1\274\1\2\1\275\4\2"+
    "\1\276\11\2\1\277\1\2\1\300\1\2\1\301\4\2"+
    "\1\302\1\2\1\303\5\2\1\304\1\2\1\305\1\2"+
    "\1\306\10\2\1\307\10\2\1\310\1\2\1\311\4\2"+
    "\1\312\1\313\4\2\1\314\1\315\1\316\6\2\1\317"+
    "\6\2\1\320\1\321\1\322\10\2\1\323\1\2\1\324"+
    "\10\2\1\325\3\2\1\326\7\2\1\327\3\2\1\330"+
    "\2\2\1\331\1\332\1\2\1\333\1\334\1\335\1\336"+
    "\3\2\1\337\4\2\1\340\2\2\1\341\1\2\1\342"+
    "\1\343\5\2\1\344\1\2\1\345\1\346\1\2\1\347"+
    "\1\350\3\2\1\351\1\352\2\2\1\353\1\354\3\2"+
    "\1\355\5\2\1\356\1\357\5\2\1\360\2\2\1\361"+
    "\1\362\1\2\1\363\6\2\1\364\3\2\1\365\1\366"+
    "\1\367\1\2\1\370\1\2\1\371\2\2\1\372\1\2"+
    "\1\373\2\2\1\374\1\2\1\375\2\2\1\376\3\2"+
    "\1\377\1\u0100\4\2\1\u0101\1\u0102\3\2\1\u0103\1\u0104"+
    "\1\u0105\1\2\1\u0106\1\2\1\u0107\1\2\1\u0108\2\2"+
    "\1\u0109\4\2\1\u010a\1\u010b\1\2\1\u010c\1\2\1\u010d"+
    "\1\u010e\10\2\1\u010f\1\u0110\1\2\1\u0111\1\2\1\u0112"+
    "\2\2\1\u0113\4\2\1\u0114\1\u0115\6\2\1\u0116\1\2"+
    "\1\u0117\1\2\1\u0118\2\2\1\u0119\6\2\1\u011a\1\2"+
    "\1\u011b\1\2\1\u011c\2\2\1\u011d\1\2\1\u011e\5\2"+
    "\1\u011f\1\u0120\1\2\1\u0121\3\2\1\u0122\4\2\1\u0123"+
    "\3\2\1\u0124\10\2\1\u0125\1\u0126\1\u0127\1\2\1\u0128"+
    "\1\u0129\6\2\1\u012a\1\2\1\u012b\2\2\1\u012c\1\u012d"+
    "\1\u012e\2\2\1\u012f\10\2\1\u0130\1\u0131\1\2\1\u0132"+
    "\1\2\1\u0133\3\2\1\u0134\1\u0135\5\2\1\u0136\1\u0137"+
    "\1\2\1\u0138\1\u0139\3\2\1\u013a\4\2\1\u013b\3\2"+
    "\1\u013c\1\u013d\1\u013e\1\u013f\1\u0140\1\u0141\2\2\1\u0142"+
    "\1\u0143\5\2\1\u0144\4\2\1\u0145\1\2\1\u0146\1\2"+
    "\1\u0147\4\2\1\u0148\1\u0149\3\2\1\u014a\1\2\1\u014b"+
    "\2\2\1\u014c\1\u014d\1\u014e\4\2\1\u014f\2\2\1\u0150"+
    "\1\u0151\2\2\1\u0152\1\u0153\2\2\1\u0154\1\2\1\u0155"+
    "\3\2\1\u0156\5\2\1\u0157\2\2\1\u0158\3\2\1\u0159"+
    "\2\2\1\u015a\17\2\1\u015b\1\2\1\u015c\6\2\1\u015d";

  private static int [] zzUnpackAction() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\354\0\u0127"+
    "\0\73\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\73\0\u0760\0\73\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\73\0\u0973"+
    "\0\73\0\73\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0162\0\73"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\166\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\166\0\u1d80\0\u1dbb\0\166\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\73\0\73\0\73\0\73\0\73\0\73\0\u25cc"+
    "\0\73\0\73\0\73\0\73\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\166\0\166\0\166\0\166\0\166\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\166\0\u2890\0\166\0\u28cb"+
    "\0\166\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68"+
    "\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u2c7b\0\u2cb6\0\u2cf1\0\166\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\166\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\166\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\166\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\166\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\166\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\73\0\u4cfa\0\166\0\u4d35\0\166"+
    "\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u2607"+
    "\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u26b8\0\u520c\0\u5247"+
    "\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\166\0\u53a9\0\166"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\166\0\u5546"+
    "\0\u5581\0\166\0\166\0\u55bc\0\u55f7\0\u5632\0\166\0\u566d"+
    "\0\u56a8\0\u56e3\0\u571e\0\166\0\u5759\0\u5794\0\166\0\u57cf"+
    "\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\166\0\u5931\0\u596c"+
    "\0\166\0\u59a7\0\166\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\166"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\166\0\u5d1c\0\166\0\u5d57\0\u5d92\0\u5dcd"+
    "\0\u5e08\0\166\0\166\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f"+
    "\0\u5f6a\0\166\0\u5fa5\0\166\0\u5fe0\0\166\0\u601b\0\u6056"+
    "\0\u6091\0\166\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3"+
    "\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\166\0\u6355\0\u6390"+
    "\0\u63cb\0\u6406\0\166\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d"+
    "\0\u6568\0\u65a3\0\u65de\0\166\0\166\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f"+
    "\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17"+
    "\0\166\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\166\0\u6d3e\0\u6d79"+
    "\0\u6db4\0\u6def\0\u6e2a\0\166\0\u6e65\0\166\0\u6ea0\0\u6edb"+
    "\0\u6f16\0\166\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\166"+
    "\0\166\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164\0\166\0\u719f"+
    "\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377"+
    "\0\u73b2\0\u73ed\0\166\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514"+
    "\0\u754f\0\u758a\0\u75c5\0\u7600\0\166\0\u763b\0\u7676\0\u76b1"+
    "\0\u76ec\0\166\0\u7727\0\u7762\0\166\0\u779d\0\u77d8\0\u7813"+
    "\0\166\0\166\0\166\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a"+
    "\0\u7975\0\u79b0\0\166\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7"+
    "\0\u7b12\0\u7b4d\0\166\0\166\0\u5120\0\u515b\0\u7b88\0\u5196"+
    "\0\166\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25"+
    "\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd"+
    "\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5"+
    "\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad"+
    "\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485"+
    "\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d"+
    "\0\u8698\0\u86d3\0\u870e\0\u8749\0\166\0\u8784\0\u87bf\0\166"+
    "\0\u87fa\0\u8835\0\166\0\u8870\0\u88ab\0\u88e6\0\u8921\0\166"+
    "\0\166\0\166\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48\0\u8a83"+
    "\0\u8abe\0\u8af9\0\166\0\166\0\u8b34\0\u8b6f\0\u8baa\0\u8be5"+
    "\0\166\0\166\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47"+
    "\0\166\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\166"+
    "\0\166\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0\0\u900b\0\u9046"+
    "\0\u9081\0\u90bc\0\u90f7\0\166\0\u9132\0\u916d\0\u91a8\0\u91e3"+
    "\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\166\0\u9345\0\u9380"+
    "\0\166\0\166\0\166\0\166\0\166\0\u93bb\0\166\0\u93f6"+
    "\0\u9431\0\166\0\u946c\0\166\0\u94a7\0\u94e2\0\u951d\0\u9558"+
    "\0\u9593\0\166\0\166\0\u95ce\0\u9609\0\u9644\0\166\0\u967f"+
    "\0\u96ba\0\u96f5\0\166\0\166\0\u9730\0\u976b\0\u97a6\0\u97e1"+
    "\0\u981c\0\u9857\0\u9892\0\166\0\u98cd\0\u9908\0\u9943\0\u997e"+
    "\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0\0\u9b1b\0\166"+
    "\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\166\0\166"+
    "\0\u9cb8\0\166\0\166\0\u9cf3\0\166\0\u9d2e\0\u9d69\0\u9da4"+
    "\0\166\0\u9ddf\0\166\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb\0\u9f06"+
    "\0\166\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\ua02d\0\166\0\ua068"+
    "\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\166\0\166\0\ua18f\0\ua1ca"+
    "\0\ua205\0\ua240\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\166\0\166"+
    "\0\166\0\ua367\0\ua3a2\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\ua4c9"+
    "\0\ua504\0\ua53f\0\ua57a\0\ua5b5\0\ua5f0\0\ua62b\0\ua666\0\166"+
    "\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d\0\ua7c8\0\166\0\166"+
    "\0\ua803\0\ua83e\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\166"+
    "\0\ua9a0\0\ua9db\0\uaa16\0\166\0\uaa51\0\166\0\uaa8c\0\uaac7"+
    "\0\uab02\0\uab3d\0\uab78\0\uabb3\0\uabee\0\uac29\0\166\0\uac64"+
    "\0\uac9f\0\uacda\0\uad15\0\166\0\uad50\0\166\0\uad8b\0\uadc6"+
    "\0\uae01\0\uae3c\0\166\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63"+
    "\0\uaf9e\0\uafd9\0\ub014\0\ub04f\0\166\0\ub08a\0\166\0\ub0c5"+
    "\0\166\0\ub100\0\ub13b\0\ub176\0\ub1b1\0\166\0\ub1ec\0\ub227"+
    "\0\ub262\0\ub29d\0\ub2d8\0\ub313\0\ub34e\0\166\0\ub389\0\166"+
    "\0\ub3c4\0\166\0\ub3ff\0\ub43a\0\ub475\0\ub4b0\0\ub4eb\0\ub526"+
    "\0\ub561\0\ub59c\0\166\0\ub5d7\0\ub612\0\ub64d\0\ub688\0\ub6c3"+
    "\0\ub6fe\0\ub739\0\ub774\0\166\0\ub7af\0\166\0\ub7ea\0\ub825"+
    "\0\ub860\0\ub89b\0\166\0\166\0\ub8d6\0\ub911\0\ub94c\0\ub987"+
    "\0\166\0\166\0\166\0\ub9c2\0\ub9fd\0\uba38\0\uba73\0\ubaae"+
    "\0\ubae9\0\166\0\ubb24\0\ubb5f\0\ubb9a\0\ubbd5\0\ubc10\0\ubc4b"+
    "\0\166\0\166\0\166\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\ubd72"+
    "\0\ubdad\0\ubde8\0\ube23\0\166\0\ube5e\0\166\0\ube99\0\ubed4"+
    "\0\ubf0f\0\ubf4a\0\ubf85\0\ubfc0\0\ubffb\0\uc036\0\166\0\uc071"+
    "\0\uc0ac\0\uc0e7\0\166\0\uc122\0\uc15d\0\uc198\0\uc1d3\0\uc20e"+
    "\0\uc249\0\uc284\0\166\0\uc2bf\0\uc2fa\0\uc335\0\166\0\uc370"+
    "\0\uc3ab\0\166\0\166\0\uc3e6\0\166\0\166\0\166\0\166"+
    "\0\uc421\0\uc45c\0\uc497\0\166\0\uc4d2\0\uc50d\0\uc548\0\uc583"+
    "\0\166\0\uc5be\0\uc5f9\0\166\0\uc634\0\166\0\uc66f\0\uc6aa"+
    "\0\uc6e5\0\uc720\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\166\0\166"+
    "\0\uc847\0\166\0\uc882\0\uc8bd\0\uc8f8\0\uc933\0\166\0\166"+
    "\0\uc96e\0\uc9a9\0\166\0\166\0\uc9e4\0\uca1f\0\uca5a\0\166"+
    "\0\uca95\0\ucad0\0\ucb0b\0\ucb46\0\ucb81\0\166\0\166\0\ucbbc"+
    "\0\ucbf7\0\ucc32\0\ucc6d\0\ucca8\0\166\0\ucce3\0\ucd1e\0\166"+
    "\0\166\0\ucd59\0\ucd94\0\ucdcf\0\uce0a\0\uce45\0\uce80\0\ucebb"+
    "\0\ucef6\0\166\0\ucf31\0\ucf6c\0\ucfa7\0\166\0\166\0\166"+
    "\0\ucfe2\0\166\0\ud01d\0\166\0\ud058\0\ud093\0\166\0\ud0ce"+
    "\0\166\0\ud109\0\ud144\0\166\0\ud17f\0\166\0\ud1ba\0\ud1f5"+
    "\0\166\0\ud230\0\ud26b\0\ud2a6\0\166\0\166\0\ud2e1\0\ud31c"+
    "\0\ud357\0\ud392\0\166\0\166\0\ud3cd\0\ud408\0\ud443\0\166"+
    "\0\166\0\166\0\ud47e\0\166\0\ud4b9\0\166\0\ud4f4\0\166"+
    "\0\ud52f\0\ud56a\0\166\0\ud5a5\0\ud5e0\0\ud61b\0\ud656\0\166"+
    "\0\166\0\ud691\0\166\0\ud6cc\0\ud707\0\166\0\ud742\0\ud77d"+
    "\0\ud7b8\0\ud7f3\0\ud82e\0\ud869\0\ud8a4\0\ud8df\0\ud91a\0\166"+
    "\0\ud955\0\166\0\ud990\0\ud9cb\0\uda06\0\uda41\0\166\0\uda7c"+
    "\0\udab7\0\udaf2\0\udb2d\0\166\0\166\0\udb68\0\udba3\0\udbde"+
    "\0\udc19\0\udc54\0\udc8f\0\166\0\udcca\0\166\0\udd05\0\166"+
    "\0\udd40\0\udd7b\0\166\0\uddb6\0\uddf1\0\ude2c\0\ude67\0\udea2"+
    "\0\udedd\0\166\0\udf18\0\166\0\udf53\0\166\0\udf8e\0\udfc9"+
    "\0\166\0\ue004\0\166\0\ue03f\0\ue07a\0\ue0b5\0\ue0f0\0\ue12b"+
    "\0\166\0\166\0\ue166\0\166\0\ue1a1\0\ue1dc\0\ue217\0\166"+
    "\0\ue252\0\ue28d\0\ue2c8\0\ue303\0\166\0\ue33e\0\ue379\0\ue3b4"+
    "\0\ue3ef\0\ue42a\0\ue465\0\ue4a0\0\ue4db\0\ue516\0\ue551\0\ue58c"+
    "\0\ue5c7\0\166\0\166\0\166\0\ue602\0\166\0\166\0\ue63d"+
    "\0\ue678\0\ue6b3\0\ue6ee\0\ue729\0\ue764\0\166\0\ue79f\0\166"+
    "\0\ue7da\0\ue815\0\166\0\166\0\166\0\ue850\0\ue88b\0\166"+
    "\0\ue8c6\0\ue901\0\ue93c\0\ue977\0\ue9b2\0\ue9ed\0\uea28\0\uea63"+
    "\0\166\0\166\0\uea9e\0\166\0\uead9\0\166\0\ueb14\0\ueb4f"+
    "\0\ueb8a\0\166\0\uebc5\0\uec00\0\uec3b\0\uec76\0\uecb1\0\uecec"+
    "\0\166\0\166\0\ued27\0\166\0\166\0\ued62\0\ued9d\0\uedd8"+
    "\0\166\0\uee13\0\uee4e\0\uee89\0\ueec4\0\166\0\ueeff\0\uef3a"+
    "\0\uef75\0\166\0\166\0\166\0\166\0\166\0\166\0\uefb0"+
    "\0\uefeb\0\166\0\166\0\uf026\0\uf061\0\uf09c\0\uf0d7\0\uf112"+
    "\0\166\0\uf14d\0\uf188\0\uf1c3\0\uf1fe\0\166\0\uf239\0\166"+
    "\0\uf274\0\166\0\uf2af\0\uf2ea\0\uf325\0\uf360\0\166\0\166"+
    "\0\uf39b\0\uf3d6\0\uf411\0\166\0\uf44c\0\166\0\uf487\0\uf4c2"+
    "\0\166\0\uf4fd\0\166\0\uf538\0\uf573\0\uf5ae\0\uf5e9\0\166"+
    "\0\uf624\0\uf65f\0\166\0\166\0\uf69a\0\uf6d5\0\166\0\166"+
    "\0\uf710\0\uf74b\0\166\0\uf786\0\166\0\uf7c1\0\uf7fc\0\uf837"+
    "\0\166\0\uf872\0\uf8ad\0\uf8e8\0\uf923\0\uf95e\0\166\0\uf999"+
    "\0\uf9d4\0\166\0\ufa0f\0\ufa4a\0\ufa85\0\166\0\ufac0\0\ufafb"+
    "\0\166\0\ufb36\0\ufb71\0\ufbac\0\ufbe7\0\ufc22\0\ufc5d\0\ufc98"+
    "\0\ufcd3\0\ufd0e\0\ufd49\0\ufd84\0\ufdbf\0\ufdfa\0\ufe35\0\ufe70"+
    "\0\166\0\ufeab\0\166\0\ufee6\0\uff21\0\uff5c\0\uff97\0\uffd2"+
    "\1\15\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\3\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\3\1\43\1\3\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\57\1\60\1\61\1\62\1\63\75\0\3\3"+
    "\12\0\33\3\25\0\1\4\5\0\1\64\64\0\1\65"+
    "\102\0\1\66\57\0\6\67\3\0\3\67\1\70\56\67"+
    "\3\0\1\71\11\0\1\72\56\0\3\3\12\0\1\3"+
    "\1\73\2\3\1\74\1\75\1\76\1\77\2\3\1\100"+
    "\1\101\2\3\1\102\1\3\1\103\6\3\1\104\3\3"+
    "\23\0\3\3\12\0\1\105\1\3\1\106\2\3\1\107"+
    "\3\3\1\110\1\3\1\111\2\3\1\112\1\113\13\3"+
    "\23\0\3\3\12\0\3\3\1\114\1\3\1\115\1\116"+
    "\1\117\10\3\1\120\12\3\23\0\3\3\12\0\1\121"+
    "\1\3\1\122\2\3\1\123\3\3\1\124\3\3\1\125"+
    "\1\3\1\126\1\127\12\3\23\0\3\3\12\0\1\130"+
    "\1\3\1\131\6\3\1\132\1\3\1\133\3\3\1\134"+
    "\13\3\23\0\3\3\12\0\1\135\1\3\1\136\6\3"+
    "\1\137\1\140\1\141\17\3\23\0\3\3\12\0\1\142"+
    "\1\3\1\143\6\3\1\144\5\3\1\145\13\3\23\0"+
    "\3\3\12\0\1\146\1\3\1\147\2\3\1\150\1\3"+
    "\1\151\1\3\1\152\1\3\1\153\3\3\1\154\13\3"+
    "\23\0\3\3\12\0\5\3\1\155\1\156\1\3\1\157"+
    "\1\3\1\160\1\161\1\162\12\3\1\163\3\3\23\0"+
    "\3\3\12\0\1\164\4\3\1\165\1\3\1\166\1\3"+
    "\1\167\1\3\1\170\1\3\1\171\15\3\23\0\3\3"+
    "\12\0\6\3\1\172\1\3\1\173\7\3\1\174\12\3"+
    "\23\0\3\3\12\0\1\175\1\3\1\176\2\3\1\177"+
    "\1\3\1\200\1\3\1\201\1\3\1\202\3\3\1\203"+
    "\13\3\23\0\3\3\12\0\1\204\10\3\1\205\21\3"+
    "\23\0\3\3\12\0\1\206\1\3\1\207\2\3\1\210"+
    "\3\3\1\211\1\3\1\212\3\3\1\213\1\3\1\214"+
    "\11\3\23\0\3\3\12\0\1\3\1\215\4\3\1\216"+
    "\5\3\1\217\3\3\1\220\4\3\1\221\5\3\23\0"+
    "\1\222\2\3\12\0\1\223\1\3\1\224\1\3\1\225"+
    "\3\3\1\226\1\227\1\230\1\231\1\3\1\232\1\3"+
    "\1\233\1\3\1\234\3\3\1\235\5\3\23\0\3\3"+
    "\12\0\2\3\1\236\30\3\23\0\3\3\12\0\2\3"+
    "\1\237\2\3\1\240\1\3\1\241\1\3\1\242\21\3"+
    "\23\0\3\3\12\0\11\3\1\243\21\3\23\0\3\3"+
    "\12\0\2\3\1\244\14\3\1\245\13\3\23\0\3\3"+
    "\12\0\1\246\1\3\1\247\6\3\1\250\5\3\1\251"+
    "\13\3\23\0\3\3\12\0\1\252\4\3\1\253\3\3"+
    "\1\254\3\3\1\255\1\3\1\256\13\3\23\0\3\3"+
    "\12\0\1\257\16\3\1\260\13\3\23\0\3\3\12\0"+
    "\11\3\1\261\21\3\74\0\1\262\72\0\1\263\72\0"+
    "\1\264\72\0\1\265\77\0\1\266\73\0\1\267\52\0"+
    "\1\270\116\0\1\271\73\0\1\272\74\0\1\273\74\0"+
    "\1\274\4\0\1\64\11\0\1\275\2\0\1\276\27\0"+
    "\1\276\1\275\24\0\1\65\14\0\1\277\27\0\1\277"+
    "\22\0\13\300\1\301\57\300\3\0\1\71\67\0\6\72"+
    "\1\302\1\6\63\72\1\0\3\3\12\0\1\303\1\304"+
    "\31\3\23\0\3\3\12\0\2\3\1\305\30\3\23\0"+
    "\3\3\12\0\1\3\1\306\17\3\1\307\11\3\23\0"+
    "\3\3\12\0\4\3\1\310\2\3\1\311\23\3\23\0"+
    "\3\3\12\0\4\3\1\312\26\3\23\0\3\3\12\0"+
    "\4\3\1\313\26\3\23\0\3\3\12\0\20\3\1\314"+
    "\12\3\23\0\3\3\12\0\12\3\1\315\5\3\1\316"+
    "\12\3\23\0\3\3\12\0\22\3\1\317\10\3\23\0"+
    "\3\3\12\0\4\3\1\320\14\3\1\321\11\3\23\0"+
    "\3\3\12\0\1\322\5\3\1\323\1\324\2\3\1\325"+
    "\1\3\1\326\3\3\1\327\12\3\23\0\3\3\12\0"+
    "\11\3\1\330\21\3\23\0\3\3\12\0\13\3\1\331"+
    "\11\3\1\332\5\3\23\0\3\3\12\0\25\3\1\333"+
    "\5\3\23\0\3\3\12\0\12\3\1\334\20\3\23\0"+
    "\3\3\12\0\1\335\17\3\1\336\12\3\23\0\3\3"+
    "\12\0\2\3\1\337\1\3\1\340\5\3\1\341\4\3"+
    "\1\342\13\3\23\0\3\3\12\0\5\3\1\343\25\3"+
    "\23\0\3\3\12\0\1\3\1\344\31\3\23\0\3\3"+
    "\12\0\20\3\1\345\12\3\23\0\3\3\12\0\12\3"+
    "\1\346\20\3\23\0\3\3\12\0\16\3\1\347\14\3"+
    "\23\0\3\3\12\0\3\3\1\350\21\3\1\351\5\3"+
    "\23\0\3\3\12\0\1\352\12\3\1\353\3\3\1\354"+
    "\1\3\1\355\11\3\23\0\3\3\12\0\10\3\1\356"+
    "\22\3\23\0\3\3\12\0\2\3\1\357\30\3\23\0"+
    "\3\3\12\0\25\3\1\360\5\3\23\0\3\3\12\0"+
    "\2\3\1\361\30\3\23\0\3\3\12\0\17\3\1\362"+
    "\13\3\23\0\3\3\12\0\1\363\3\3\1\364\2\3"+
    "\1\365\1\366\1\3\1\367\1\3\1\370\3\3\1\371"+
    "\6\3\1\372\3\3\23\0\3\3\12\0\7\3\1\373"+
    "\16\3\1\374\4\3\23\0\3\3\12\0\7\3\1\375"+
    "\23\3\23\0\3\3\12\0\22\3\1\376\10\3\23\0"+
    "\3\3\12\0\4\3\1\377\20\3\1\u0100\5\3\23\0"+
    "\3\3\12\0\3\3\1\u0101\27\3\23\0\3\3\12\0"+
    "\4\3\1\u0102\1\3\1\u0103\3\3\1\u0104\20\3\23\0"+
    "\3\3\12\0\15\3\1\u0105\15\3\23\0\3\3\12\0"+
    "\7\3\1\u0106\15\3\1\u0107\5\3\23\0\3\3\12\0"+
    "\6\3\1\u0108\11\3\1\u0109\12\3\23\0\3\3\12\0"+
    "\1\u010a\13\3\1\u010b\12\3\1\u010c\3\3\23\0\3\3"+
    "\12\0\1\u010d\11\3\1\u010e\13\3\1\u010f\4\3\23\0"+
    "\3\3\12\0\6\3\1\u0110\15\3\1\u0111\6\3\23\0"+
    "\3\3\12\0\1\3\1\u0112\3\3\1\u0113\12\3\1\u0114"+
    "\12\3\23\0\3\3\12\0\5\3\1\u0115\25\3\23\0"+
    "\3\3\12\0\2\3\1\u0116\6\3\1\u0117\5\3\1\u0118"+
    "\13\3\23\0\3\3\12\0\1\u0119\32\3\23\0\3\3"+
    "\12\0\20\3\1\u011a\12\3\23\0\3\3\12\0\16\3"+
    "\1\u011b\14\3\23\0\3\3\12\0\27\3\1\u011c\3\3"+
    "\23\0\3\3\12\0\1\3\1\u011d\31\3\23\0\3\3"+
    "\12\0\7\3\1\u011e\23\3\23\0\3\3\12\0\2\3"+
    "\1\u011f\1\3\1\u0120\26\3\23\0\3\3\12\0\4\3"+
    "\1\u0121\26\3\23\0\3\3\12\0\4\3\1\u0122\26\3"+
    "\23\0\3\3\12\0\14\3\1\u0123\16\3\23\0\3\3"+
    "\12\0\2\3\1\u0124\30\3\23\0\3\3\12\0\4\3"+
    "\1\u0125\13\3\1\u0126\12\3\23\0\3\3\12\0\2\3"+
    "\1\u0127\6\3\1\u0128\21\3\23\0\3\3\12\0\11\3"+
    "\1\u0129\1\3\1\u012a\17\3\23\0\3\3\12\0\1\u012b"+
    "\4\3\1\u012c\1\u012d\1\u012e\3\3\1\u012f\11\3\1\u0130"+
    "\5\3\23\0\3\3\12\0\5\3\1\u0131\25\3\23\0"+
    "\3\3\12\0\1\u0132\1\3\1\u0133\30\3\23\0\3\3"+
    "\12\0\10\3\1\u0134\6\3\1\u0135\4\3\1\u0136\6\3"+
    "\23\0\3\3\12\0\1\3\1\u0137\6\3\1\u0138\22\3"+
    "\23\0\3\3\12\0\1\u0139\1\3\1\u013a\14\3\1\u013b"+
    "\13\3\23\0\3\3\12\0\7\3\1\u013c\23\3\23\0"+
    "\3\3\12\0\4\3\1\u013d\26\3\23\0\3\3\12\0"+
    "\2\3\1\u013e\6\3\1\u013f\21\3\23\0\3\3\12\0"+
    "\11\3\1\u0140\21\3\23\0\3\3\12\0\5\3\1\u0141"+
    "\5\3\1\u0142\17\3\23\0\3\3\12\0\6\3\1\u0143"+
    "\1\u0144\23\3\23\0\3\3\12\0\5\3\1\u0145\1\3"+
    "\1\u0146\23\3\23\0\3\3\12\0\27\3\1\u0147\3\3"+
    "\23\0\3\3\12\0\7\3\1\u0148\3\3\1\u0149\17\3"+
    "\23\0\3\3\12\0\12\3\1\u014a\20\3\23\0\3\3"+
    "\12\0\4\3\1\u014b\15\3\1\u014c\10\3\23\0\3\3"+
    "\12\0\2\3\1\u014d\6\3\1\u014e\21\3\23\0\3\3"+
    "\12\0\4\3\1\u014f\26\3\23\0\3\3\12\0\7\3"+
    "\1\u0150\23\3\23\0\3\3\12\0\4\3\1\u0151\26\3"+
    "\23\0\3\3\12\0\2\3\1\u0152\30\3\23\0\3\3"+
    "\12\0\1\3\1\u0153\2\3\1\u0154\1\3\1\u0155\1\3"+
    "\1\u0156\1\3\1\u0157\4\3\1\u0158\1\u0159\12\3\23\0"+
    "\3\3\12\0\11\3\1\u015a\21\3\23\0\3\3\12\0"+
    "\25\3\1\u015b\5\3\23\0\3\3\12\0\7\3\1\u015c"+
    "\23\3\23\0\3\3\12\0\27\3\1\u015d\3\3\23\0"+
    "\3\3\12\0\4\3\1\u015e\2\3\1\u015f\2\3\1\u0160"+
    "\5\3\1\u0161\4\3\1\u0162\5\3\23\0\3\3\12\0"+
    "\1\u0163\32\3\23\0\3\3\12\0\1\u0164\32\3\23\0"+
    "\3\3\12\0\25\3\1\u0165\5\3\23\0\3\3\12\0"+
    "\5\3\1\u0166\7\3\1\u0167\15\3\23\0\3\3\12\0"+
    "\16\3\1\u0168\6\3\1\u0169\5\3\23\0\3\3\12\0"+
    "\13\3\1\u016a\17\3\23\0\3\3\12\0\23\3\1\u016b"+
    "\7\3\23\0\3\3\12\0\20\3\1\u016c\12\3\23\0"+
    "\3\3\12\0\1\u016d\32\3\23\0\3\3\12\0\1\u016e"+
    "\32\3\23\0\3\3\12\0\4\3\1\u016f\26\3\23\0"+
    "\3\3\12\0\1\u0170\10\3\1\u0171\21\3\23\0\3\3"+
    "\12\0\11\3\1\u0172\21\3\23\0\3\3\12\0\4\3"+
    "\1\u0173\26\3\10\0\1\u0174\12\0\3\3\12\0\6\3"+
    "\1\u0175\24\3\23\0\3\3\12\0\21\3\1\u0176\11\3"+
    "\23\0\3\3\12\0\7\3\1\u0177\23\3\23\0\3\3"+
    "\12\0\3\3\1\u0178\1\u0179\26\3\23\0\3\3\12\0"+
    "\5\3\1\u017a\25\3\23\0\3\3\12\0\1\3\1\u017b"+
    "\4\3\1\u017c\24\3\23\0\3\3\12\0\6\3\1\u017d"+
    "\24\3\23\0\3\3\12\0\17\3\1\u017e\13\3\23\0"+
    "\3\3\12\0\17\3\1\u017f\13\3\23\0\3\3\12\0"+
    "\5\3\1\u0180\25\3\23\0\3\3\12\0\2\3\1\u0181"+
    "\14\3\1\u0182\13\3\23\0\3\3\12\0\4\3\1\u0183"+
    "\26\3\23\0\3\3\12\0\5\3\1\u0184\1\3\1\u0185"+
    "\23\3\23\0\3\3\12\0\2\3\1\u0186\30\3\23\0"+
    "\3\3\12\0\17\3\1\u0187\13\3\51\0\1\u0174\46\0"+
    "\1\u0188\72\0\1\u0189\11\0\1\u018a\33\0\1\u018a\36\0"+
    "\1\u018b\33\0\1\u018b\21\0\13\u018c\1\u018d\57\u018c\12\300"+
    "\1\u018e\1\301\57\300\7\0\1\6\64\0\3\3\12\0"+
    "\2\3\1\u018f\30\3\23\0\3\3\12\0\11\3\1\u0190"+
    "\21\3\23\0\3\3\12\0\17\3\1\u0191\13\3\23\0"+
    "\3\3\12\0\15\3\1\u0192\15\3\23\0\3\3\12\0"+
    "\11\3\1\u0193\21\3\23\0\3\3\12\0\2\3\1\u0194"+
    "\30\3\23\0\3\3\12\0\1\u0195\1\3\1\u0196\30\3"+
    "\23\0\3\3\12\0\7\3\1\u0197\23\3\23\0\3\3"+
    "\12\0\21\3\1\u0198\11\3\23\0\3\3\12\0\2\3"+
    "\1\u0199\30\3\23\0\3\3\12\0\7\3\1\u019a\7\3"+
    "\1\u019b\13\3\23\0\3\3\12\0\1\u019c\1\3\1\u019d"+
    "\30\3\23\0\3\3\12\0\12\3\1\u019e\20\3\23\0"+
    "\3\3\12\0\10\3\1\u019f\22\3\23\0\3\3\12\0"+
    "\16\3\1\u01a0\14\3\23\0\3\3\12\0\1\u01a1\32\3"+
    "\23\0\3\3\12\0\10\3\1\u01a2\22\3\23\0\3\3"+
    "\12\0\12\3\1\u01a3\20\3\23\0\3\3\12\0\22\3"+
    "\1\u01a4\10\3\23\0\3\3\12\0\4\3\1\u01a5\5\3"+
    "\1\u01a6\11\3\1\u01a7\6\3\23\0\3\3\12\0\12\3"+
    "\1\u01a8\20\3\23\0\3\3\12\0\2\3\1\u01a9\2\3"+
    "\1\u01aa\25\3\23\0\3\3\12\0\2\3\1\u01ab\30\3"+
    "\23\0\3\3\12\0\4\3\1\u01ac\13\3\1\u01ad\12\3"+
    "\23\0\3\3\12\0\7\3\1\u01ae\23\3\23\0\3\3"+
    "\12\0\2\3\1\u01af\30\3\23\0\3\3\12\0\1\u01b0"+
    "\32\3\23\0\3\3\12\0\7\3\1\u01b1\23\3\23\0"+
    "\3\3\12\0\4\3\1\u01b2\26\3\23\0\3\3\12\0"+
    "\10\3\1\u01b3\22\3\23\0\3\3\12\0\6\3\1\u01b4"+
    "\10\3\1\u01b5\13\3\23\0\3\3\12\0\2\3\1\u01b6"+
    "\3\3\1\u01b7\24\3\23\0\3\3\12\0\22\3\1\u01b8"+
    "\2\3\1\u01b9\5\3\23\0\3\3\12\0\30\3\1\u01ba"+
    "\2\3\23\0\3\3\12\0\6\3\1\u01bb\24\3\23\0"+
    "\3\3\12\0\2\3\1\u01bc\30\3\23\0\1\u01bd\2\3"+
    "\12\0\33\3\23\0\3\3\12\0\20\3\1\u01be\12\3"+
    "\23\0\3\3\12\0\1\3\1\u01bf\5\3\1\u01c0\23\3"+
    "\23\0\3\3\12\0\13\3\1\u01c1\17\3\23\0\3\3"+
    "\12\0\1\u01c2\32\3\23\0\3\3\12\0\7\3\1\u01c3"+
    "\23\3\23\0\3\3\12\0\11\3\1\u01c4\21\3\23\0"+
    "\3\3\12\0\2\3\1\u01c5\30\3\23\0\3\3\12\0"+
    "\4\3\1\u01c6\26\3\23\0\3\3\12\0\2\3\1\u01c7"+
    "\6\3\1\u01c8\21\3\23\0\3\3\12\0\7\3\1\u01c9"+
    "\23\3\23\0\3\3\12\0\12\3\1\u01ca\5\3\1\u01cb"+
    "\1\3\1\u01cc\10\3\23\0\3\3\12\0\2\3\1\u01cd"+
    "\30\3\23\0\3\3\12\0\15\3\1\u01ce\15\3\23\0"+
    "\3\3\12\0\13\3\1\u01cf\3\3\1\u01d0\13\3\23\0"+
    "\3\3\12\0\2\3\1\u01d1\30\3\23\0\3\3\12\0"+
    "\4\3\1\u01d2\26\3\23\0\3\3\12\0\2\3\1\u01d3"+
    "\7\3\1\u01d4\20\3\23\0\3\3\12\0\15\3\1\u01d5"+
    "\15\3\23\0\3\3\12\0\1\u01d6\32\3\23\0\3\3"+
    "\12\0\7\3\1\u01d7\23\3\23\0\3\3\12\0\2\3"+
    "\1\u01d8\30\3\23\0\3\3\12\0\22\3\1\u01d9\10\3"+
    "\23\0\3\3\12\0\4\3\1\u01da\26\3\23\0\3\3"+
    "\12\0\1\3\1\u01db\31\3\23\0\3\3\12\0\4\3"+
    "\1\u01dc\26\3\23\0\3\3\12\0\2\3\1\u01dd\30\3"+
    "\23\0\3\3\12\0\1\3\1\u01de\31\3\23\0\3\3"+
    "\12\0\1\u01df\32\3\23\0\3\3\12\0\2\3\1\u01e0"+
    "\30\3\23\0\3\3\12\0\2\3\1\u01e1\30\3\23\0"+
    "\3\3\12\0\2\3\1\u01e2\30\3\23\0\3\3\12\0"+
    "\4\3\1\u01e3\26\3\23\0\3\3\12\0\12\3\1\u01e4"+
    "\20\3\23\0\3\3\12\0\12\3\1\u01e5\20\3\23\0"+
    "\3\3\12\0\10\3\1\u01e6\1\3\1\u01e7\5\3\1\u01e8"+
    "\12\3\23\0\3\3\12\0\12\3\1\u01e9\20\3\23\0"+
    "\3\3\12\0\6\3\1\u01ea\2\3\1\u01eb\13\3\1\u01ec"+
    "\1\3\1\u01ed\3\3\23\0\3\3\12\0\6\3\1\u01ee"+
    "\24\3\23\0\3\3\12\0\17\3\1\u01ef\13\3\23\0"+
    "\3\3\12\0\7\3\1\u01f0\23\3\23\0\3\3\12\0"+
    "\11\3\1\u01f1\21\3\23\0\3\3\12\0\2\3\1\u01f2"+
    "\30\3\23\0\3\3\12\0\21\3\1\u01f3\11\3\23\0"+
    "\3\3\12\0\6\3\1\u01f4\24\3\23\0\3\3\12\0"+
    "\17\3\1\u01f5\13\3\23\0\3\3\12\0\2\3\1\u01f6"+
    "\30\3\23\0\3\3\12\0\2\3\1\u01f7\5\3\1\u01f8"+
    "\22\3\23\0\3\3\12\0\20\3\1\u01f9\12\3\23\0"+
    "\3\3\12\0\5\3\1\u01fa\25\3\23\0\3\3\12\0"+
    "\1\u01fb\32\3\23\0\3\3\12\0\2\3\1\u01fc\1\3"+
    "\1\u01fd\5\3\1\u01fe\20\3\23\0\3\3\12\0\1\u01ff"+
    "\32\3\23\0\3\3\12\0\20\3\1\u0200\12\3\23\0"+
    "\3\3\12\0\20\3\1\u0201\12\3\23\0\3\3\12\0"+
    "\20\3\1\u0202\12\3\23\0\3\3\12\0\7\3\1\u0203"+
    "\23\3\23\0\3\3\12\0\5\3\1\u0204\25\3\23\0"+
    "\3\3\12\0\4\3\1\u0205\1\3\1\u0206\11\3\1\u0207"+
    "\6\3\1\u0208\3\3\23\0\3\3\12\0\7\3\1\u0209"+
    "\3\3\1\u020a\17\3\23\0\3\3\12\0\6\3\1\u020b"+
    "\24\3\23\0\3\3\12\0\10\3\1\u020c\14\3\1\u020d"+
    "\5\3\23\0\3\3\12\0\5\3\1\u020e\12\3\1\u020f"+
    "\12\3\23\0\3\3\12\0\5\3\1\u0210\25\3\23\0"+
    "\3\3\12\0\12\3\1\u0211\20\3\23\0\3\3\12\0"+
    "\17\3\1\u0212\13\3\23\0\1\u0213\2\3\12\0\11\3"+
    "\1\u0214\21\3\23\0\3\3\12\0\6\3\1\u0215\24\3"+
    "\23\0\3\3\12\0\1\u0216\32\3\23\0\3\3\12\0"+
    "\2\3\1\u0217\30\3\23\0\3\3\12\0\22\3\1\u0218"+
    "\10\3\23\0\3\3\12\0\5\3\1\u0219\25\3\23\0"+
    "\3\3\12\0\6\3\1\u021a\24\3\23\0\3\3\12\0"+
    "\20\3\1\u021b\12\3\23\0\3\3\12\0\12\3\1\u021c"+
    "\20\3\23\0\3\3\12\0\2\3\1\u021d\30\3\23\0"+
    "\3\3\12\0\25\3\1\u021e\5\3\23\0\3\3\12\0"+
    "\1\u021f\32\3\23\0\3\3\12\0\2\3\1\u0220\1\3"+
    "\1\u0221\26\3\23\0\3\3\12\0\6\3\1\u0222\24\3"+
    "\23\0\3\3\12\0\12\3\1\u0223\20\3\23\0\3\3"+
    "\12\0\7\3\1\u0224\23\3\23\0\3\3\12\0\20\3"+
    "\1\u0225\12\3\23\0\3\3\12\0\2\3\1\u0226\4\3"+
    "\1\u0227\23\3\23\0\3\3\12\0\17\3\1\u0228\13\3"+
    "\23\0\3\3\12\0\1\3\1\u0229\31\3\23\0\3\3"+
    "\12\0\5\3\1\u022a\25\3\23\0\3\3\12\0\24\3"+
    "\1\u022b\6\3\23\0\3\3\12\0\26\3\1\u022c\4\3"+
    "\23\0\3\3\12\0\17\3\1\u022d\13\3\23\0\3\3"+
    "\12\0\1\u022e\32\3\23\0\3\3\12\0\26\3\1\u022f"+
    "\4\3\23\0\3\3\12\0\15\3\1\u0230\15\3\23\0"+
    "\3\3\12\0\24\3\1\u0231\6\3\23\0\3\3\12\0"+
    "\30\3\1\u0232\2\3\23\0\3\3\12\0\6\3\1\u0233"+
    "\24\3\23\0\3\3\12\0\2\3\1\u0234\14\3\1\u0235"+
    "\13\3\23\0\3\3\12\0\2\3\1\u0236\6\3\1\u0237"+
    "\21\3\23\0\3\3\12\0\2\3\1\u0238\30\3\23\0"+
    "\3\3\12\0\13\3\1\u0239\17\3\23\0\3\3\12\0"+
    "\7\3\1\u023a\23\3\23\0\3\3\12\0\4\3\1\u023b"+
    "\26\3\23\0\3\3\12\0\2\3\1\u023c\30\3\23\0"+
    "\3\3\12\0\7\3\1\u023d\23\3\23\0\3\3\12\0"+
    "\2\3\1\u023e\30\3\23\0\3\3\12\0\2\3\1\u023f"+
    "\7\3\1\u0240\5\3\1\u0241\5\3\1\u0242\4\3\23\0"+
    "\3\3\12\0\2\3\1\u0243\30\3\23\0\3\3\12\0"+
    "\13\3\1\u0244\17\3\23\0\3\3\12\0\2\3\1\u0245"+
    "\30\3\23\0\3\3\12\0\4\3\1\u0246\4\3\1\u0247"+
    "\1\3\1\u0248\17\3\23\0\3\3\12\0\20\3\1\u0249"+
    "\12\3\23\0\3\3\12\0\1\u024a\32\3\23\0\3\3"+
    "\12\0\4\3\1\u024b\26\3\23\0\3\3\12\0\12\3"+
    "\1\u024c\20\3\23\0\3\3\12\0\2\3\1\u024d\30\3"+
    "\23\0\3\3\12\0\11\3\1\u024e\21\3\23\0\3\3"+
    "\12\0\2\3\1\u024f\30\3\23\0\3\3\12\0\20\3"+
    "\1\u0250\12\3\23\0\3\3\12\0\4\3\1\u0251\26\3"+
    "\23\0\3\3\12\0\2\3\1\u0252\30\3\23\0\3\3"+
    "\12\0\4\3\1\u0253\26\3\23\0\3\3\12\0\7\3"+
    "\1\u0254\23\3\23\0\3\3\12\0\5\3\1\u0255\25\3"+
    "\23\0\3\3\12\0\6\3\1\u0256\24\3\23\0\3\3"+
    "\12\0\13\3\1\u0257\17\3\23\0\3\3\12\0\16\3"+
    "\1\u0258\14\3\23\0\3\3\12\0\11\3\1\u0259\21\3"+
    "\23\0\3\3\12\0\2\3\1\u025a\30\3\23\0\3\3"+
    "\12\0\7\3\1\u025b\23\3\23\0\3\3\12\0\12\3"+
    "\1\u025c\20\3\23\0\3\3\12\0\22\3\1\u025d\10\3"+
    "\23\0\3\3\12\0\13\3\1\u025e\17\3\23\0\3\3"+
    "\12\0\4\3\1\u025f\26\3\23\0\3\3\12\0\13\3"+
    "\1\u0260\17\3\23\0\3\3\12\0\4\3\1\u0261\26\3"+
    "\23\0\3\3\12\0\4\3\1\u0262\26\3\23\0\3\3"+
    "\12\0\24\3\1\u0263\6\3\23\0\3\3\12\0\5\3"+
    "\1\u0264\1\u0265\24\3\23\0\3\3\12\0\7\3\1\u0266"+
    "\23\3\23\0\3\3\12\0\15\3\1\u0267\15\3\23\0"+
    "\3\3\12\0\12\3\1\u0268\6\3\1\u0269\11\3\23\0"+
    "\3\3\12\0\13\3\1\u026a\17\3\23\0\3\3\12\0"+
    "\26\3\1\u026b\4\3\23\0\3\3\12\0\6\3\1\u026c"+
    "\24\3\25\0\1\u0189\72\0\1\u026d\72\0\1\u026e\67\0"+
    "\13\u018c\1\u026f\71\u018c\1\u0270\1\u018d\57\u018c\1\0\3\3"+
    "\12\0\5\3\1\u0271\25\3\23\0\3\3\12\0\12\3"+
    "\1\u0272\20\3\23\0\3\3\12\0\11\3\1\u0273\21\3"+
    "\23\0\3\3\12\0\11\3\1\u0274\21\3\23\0\3\3"+
    "\12\0\7\3\1\u0275\23\3\23\0\3\3\12\0\5\3"+
    "\1\u0276\25\3\23\0\3\3\12\0\16\3\1\u0277\14\3"+
    "\23\0\3\3\12\0\7\3\1\u0278\23\3\23\0\3\3"+
    "\12\0\4\3\1\u0279\26\3\23\0\3\3\12\0\1\u027a"+
    "\32\3\23\0\3\3\12\0\25\3\1\u027b\5\3\23\0"+
    "\3\3\12\0\13\3\1\u027c\17\3\23\0\3\3\12\0"+
    "\5\3\1\u027d\25\3\23\0\3\3\12\0\5\3\1\u027e"+
    "\25\3\23\0\3\3\12\0\7\3\1\u027f\23\3\23\0"+
    "\3\3\12\0\17\3\1\u0280\13\3\23\0\3\3\12\0"+
    "\6\3\1\u0281\24\3\23\0\3\3\12\0\5\3\1\u0282"+
    "\11\3\1\u0283\13\3\23\0\3\3\12\0\11\3\1\u0284"+
    "\21\3\23\0\3\3\12\0\13\3\1\u0285\17\3\23\0"+
    "\3\3\12\0\5\3\1\u0286\25\3\23\0\3\3\12\0"+
    "\1\u0287\32\3\23\0\3\3\12\0\10\3\1\u0288\22\3"+
    "\23\0\3\3\12\0\4\3\1\u0289\26\3\23\0\3\3"+
    "\12\0\27\3\1\u028a\3\3\23\0\3\3\12\0\10\3"+
    "\1\u028b\22\3\23\0\3\3\12\0\2\3\1\u028c\30\3"+
    "\23\0\3\3\12\0\20\3\1\u028d\12\3\23\0\3\3"+
    "\12\0\11\3\1\u028e\21\3\23\0\3\3\12\0\20\3"+
    "\1\u028f\12\3\23\0\3\3\12\0\7\3\1\u0290\23\3"+
    "\23\0\3\3\12\0\12\3\1\u0291\20\3\23\0\3\3"+
    "\12\0\22\3\1\u0292\10\3\23\0\3\3\12\0\12\3"+
    "\1\u0293\20\3\23\0\3\3\12\0\20\3\1\u0294\2\3"+
    "\1\u0295\7\3\23\0\3\3\12\0\13\3\1\u0296\17\3"+
    "\23\0\3\3\12\0\2\3\1\u0297\30\3\23\0\3\3"+
    "\12\0\4\3\1\u0298\26\3\23\0\3\3\12\0\5\3"+
    "\1\u0299\25\3\23\0\3\3\12\0\4\3\1\u029a\26\3"+
    "\23\0\3\3\12\0\17\3\1\u029b\13\3\23\0\3\3"+
    "\12\0\6\3\1\u029c\24\3\23\0\3\3\12\0\5\3"+
    "\1\u029d\25\3\23\0\3\3\12\0\5\3\1\u029e\3\3"+
    "\1\u029f\21\3\23\0\3\3\12\0\5\3\1\u02a0\25\3"+
    "\23\0\3\3\12\0\24\3\1\u02a1\6\3\23\0\3\3"+
    "\12\0\16\3\1\u02a2\14\3\23\0\3\3\12\0\11\3"+
    "\1\u02a3\21\3\23\0\3\3\12\0\13\3\1\u02a4\17\3"+
    "\23\0\3\3\12\0\4\3\1\u02a5\26\3\23\0\3\3"+
    "\12\0\5\3\1\u02a6\25\3\23\0\3\3\12\0\11\3"+
    "\1\u02a7\21\3\23\0\3\3\12\0\20\3\1\u02a8\12\3"+
    "\23\0\3\3\12\0\7\3\1\u02a9\23\3\23\0\3\3"+
    "\12\0\2\3\1\u02aa\30\3\23\0\3\3\12\0\5\3"+
    "\1\u02ab\25\3\23\0\3\3\12\0\17\3\1\u02ac\13\3"+
    "\23\0\3\3\12\0\5\3\1\u02ad\25\3\23\0\3\3"+
    "\12\0\13\3\1\u02ae\17\3\23\0\3\3\12\0\17\3"+
    "\1\u02af\13\3\23\0\3\3\12\0\7\3\1\u02b0\23\3"+
    "\23\0\3\3\12\0\7\3\1\u02b1\23\3\23\0\3\3"+
    "\12\0\5\3\1\u02b2\25\3\23\0\3\3\12\0\6\3"+
    "\1\u02b3\24\3\23\0\3\3\12\0\17\3\1\u02b4\13\3"+
    "\23\0\3\3\12\0\1\u02b5\32\3\23\0\3\3\12\0"+
    "\2\3\1\u02b6\30\3\23\0\3\3\12\0\1\u02b7\32\3"+
    "\23\0\3\3\12\0\17\3\1\u02b8\13\3\23\0\3\3"+
    "\12\0\2\3\1\u02b9\30\3\23\0\3\3\12\0\2\3"+
    "\1\u02ba\30\3\23\0\3\3\12\0\4\3\1\u02bb\26\3"+
    "\23\0\3\3\12\0\5\3\1\u02bc\25\3\23\0\3\3"+
    "\12\0\1\u02bd\32\3\23\0\3\3\12\0\17\3\1\u02be"+
    "\13\3\23\0\3\3\12\0\4\3\1\u02bf\26\3\23\0"+
    "\3\3\12\0\17\3\1\u02c0\13\3\23\0\3\3\12\0"+
    "\4\3\1\u02c1\26\3\23\0\3\3\12\0\5\3\1\u02c2"+
    "\25\3\23\0\1\u02c3\2\3\12\0\1\3\1\u02c4\1\3"+
    "\1\u02c5\1\3\1\u02c6\25\3\23\0\3\3\12\0\11\3"+
    "\1\u02c7\21\3\23\0\3\3\12\0\4\3\1\u02c8\26\3"+
    "\23\0\3\3\12\0\5\3\1\u02c9\25\3\23\0\3\3"+
    "\12\0\13\3\1\u02ca\17\3\23\0\3\3\12\0\2\3"+
    "\1\u02cb\30\3\23\0\3\3\12\0\7\3\1\u02cc\23\3"+
    "\23\0\3\3\12\0\7\3\1\u02cd\23\3\23\0\3\3"+
    "\12\0\1\u02ce\32\3\23\0\3\3\12\0\4\3\1\u02cf"+
    "\26\3\23\0\3\3\12\0\20\3\1\u02d0\12\3\23\0"+
    "\3\3\12\0\2\3\1\u02d1\30\3\23\0\3\3\12\0"+
    "\4\3\1\u02d2\26\3\23\0\3\3\12\0\2\3\1\u02d3"+
    "\30\3\23\0\3\3\12\0\2\3\1\u02d4\30\3\23\0"+
    "\3\3\12\0\1\u02d5\16\3\1\u02d6\13\3\23\0\3\3"+
    "\12\0\2\3\1\u02d7\30\3\23\0\3\3\12\0\4\3"+
    "\1\u02d8\26\3\23\0\3\3\12\0\2\3\1\u02d9\30\3"+
    "\23\0\3\3\12\0\1\u02da\32\3\23\0\3\3\12\0"+
    "\25\3\1\u02db\5\3\23\0\3\3\12\0\4\3\1\u02dc"+
    "\26\3\23\0\3\3\12\0\13\3\1\u02dd\17\3\23\0"+
    "\3\3\12\0\17\3\1\u02de\13\3\23\0\3\3\12\0"+
    "\2\3\1\u02df\30\3\23\0\3\3\12\0\11\3\1\u02e0"+
    "\21\3\23\0\3\3\12\0\1\u02e1\27\3\1\u02e2\2\3"+
    "\23\0\3\3\12\0\24\3\1\u02e3\6\3\23\0\3\3"+
    "\12\0\27\3\1\u02e4\3\3\23\0\3\3\12\0\13\3"+
    "\1\u02e5\17\3\23\0\3\3\12\0\6\3\1\u02e6\24\3"+
    "\23\0\3\3\12\0\11\3\1\u02e7\21\3\23\0\3\3"+
    "\12\0\4\3\1\u02e8\26\3\23\0\3\3\12\0\5\3"+
    "\1\u02e9\25\3\23\0\3\3\12\0\2\3\1\u02ea\30\3"+
    "\23\0\3\3\12\0\22\3\1\u02eb\10\3\23\0\3\3"+
    "\12\0\2\3\1\u02ec\30\3\23\0\3\3\12\0\15\3"+
    "\1\u02ed\15\3\23\0\3\3\12\0\4\3\1\u02ee\26\3"+
    "\23\0\3\3\12\0\4\3\1\u02ef\26\3\23\0\3\3"+
    "\12\0\17\3\1\u02f0\13\3\23\0\3\3\12\0\5\3"+
    "\1\u02f1\25\3\23\0\3\3\12\0\1\3\1\u02f2\31\3"+
    "\23\0\3\3\12\0\4\3\1\u02f3\26\3\23\0\3\3"+
    "\12\0\4\3\1\u02f4\26\3\23\0\3\3\12\0\14\3"+
    "\1\u02f5\16\3\23\0\3\3\12\0\6\3\1\u02f6\24\3"+
    "\23\0\3\3\12\0\7\3\1\u02f7\23\3\23\0\3\3"+
    "\12\0\13\3\1\u02f8\17\3\23\0\3\3\12\0\2\3"+
    "\1\u02f9\30\3\23\0\3\3\12\0\6\3\1\u02fa\24\3"+
    "\23\0\3\3\12\0\24\3\1\u02fb\6\3\23\0\3\3"+
    "\12\0\20\3\1\u02fc\12\3\23\0\3\3\12\0\7\3"+
    "\1\u02fd\23\3\23\0\3\3\12\0\4\3\1\u02fe\26\3"+
    "\23\0\3\3\12\0\3\3\1\u02ff\27\3\23\0\3\3"+
    "\12\0\12\3\1\u0300\20\3\23\0\3\3\12\0\5\3"+
    "\1\u0301\14\3\1\u0302\10\3\23\0\3\3\12\0\5\3"+
    "\1\u0303\25\3\23\0\3\3\12\0\4\3\1\u0304\26\3"+
    "\23\0\3\3\12\0\13\3\1\u0305\17\3\23\0\3\3"+
    "\12\0\17\3\1\u0306\13\3\23\0\3\3\12\0\5\3"+
    "\1\u0307\1\u0308\24\3\23\0\3\3\12\0\1\u0309\32\3"+
    "\23\0\3\3\12\0\1\3\1\u030a\31\3\23\0\3\3"+
    "\12\0\5\3\1\u030b\25\3\23\0\3\3\12\0\1\u030c"+
    "\10\3\1\u030d\21\3\23\0\3\3\12\0\4\3\1\u030e"+
    "\26\3\23\0\3\3\12\0\1\u030f\32\3\23\0\3\3"+
    "\12\0\20\3\1\u0310\12\3\23\0\3\3\12\0\12\3"+
    "\1\u0311\20\3\23\0\3\3\12\0\17\3\1\u0312\13\3"+
    "\23\0\3\3\12\0\6\3\1\u0313\24\3\23\0\3\3"+
    "\12\0\5\3\1\u0314\25\3\23\0\3\3\12\0\17\3"+
    "\1\u0315\13\3\23\0\3\3\12\0\6\3\1\u0316\24\3"+
    "\23\0\3\3\12\0\17\3\1\u0317\13\3\23\0\3\3"+
    "\12\0\2\3\1\u0318\30\3\23\0\3\3\12\0\7\3"+
    "\1\u0319\23\3\23\0\3\3\12\0\25\3\1\u031a\5\3"+
    "\23\0\3\3\12\0\4\3\1\u031b\26\3\23\0\3\3"+
    "\12\0\1\3\1\u031c\31\3\23\0\3\3\12\0\2\3"+
    "\1\u031d\30\3\23\0\3\3\12\0\7\3\1\u031e\23\3"+
    "\23\0\3\3\12\0\4\3\1\u031f\26\3\23\0\3\3"+
    "\12\0\10\3\1\u0320\22\3\23\0\3\3\12\0\1\u0321"+
    "\32\3\23\0\3\3\12\0\15\3\1\u0322\15\3\23\0"+
    "\3\3\12\0\2\3\1\u0323\30\3\23\0\3\3\12\0"+
    "\7\3\1\u0324\23\3\23\0\3\3\12\0\15\3\1\u0325"+
    "\15\3\23\0\3\3\12\0\4\3\1\u0326\26\3\23\0"+
    "\3\3\12\0\14\3\1\u0327\16\3\23\0\3\3\12\0"+
    "\2\3\1\u0328\30\3\23\0\3\3\12\0\2\3\1\u0329"+
    "\30\3\23\0\3\3\12\0\2\3\1\u032a\30\3\23\0"+
    "\3\3\12\0\2\3\1\u032b\30\3\23\0\3\3\12\0"+
    "\17\3\1\u032c\13\3\23\0\3\3\12\0\15\3\1\u032d"+
    "\15\3\23\0\3\3\12\0\17\3\1\u032e\13\3\23\0"+
    "\3\3\12\0\2\3\1\u032f\30\3\22\0\12\u018c\1\6"+
    "\1\u026f\57\u018c\1\0\3\3\12\0\1\u0330\32\3\23\0"+
    "\3\3\12\0\6\3\1\u0331\24\3\23\0\3\3\12\0"+
    "\5\3\1\u0332\25\3\23\0\3\3\12\0\13\3\1\u0333"+
    "\17\3\23\0\3\3\12\0\4\3\1\u0334\26\3\23\0"+
    "\3\3\12\0\1\u0335\32\3\23\0\3\3\12\0\11\3"+
    "\1\u0336\21\3\23\0\3\3\12\0\2\3\1\u0337\30\3"+
    "\23\0\3\3\12\0\5\3\1\u0338\25\3\23\0\3\3"+
    "\12\0\1\u0339\32\3\23\0\3\3\12\0\7\3\1\u033a"+
    "\23\3\23\0\3\3\12\0\5\3\1\u033b\25\3\23\0"+
    "\3\3\12\0\17\3\1\u033c\13\3\23\0\3\3\12\0"+
    "\2\3\1\u033d\30\3\23\0\3\3\12\0\6\3\1\u033e"+
    "\24\3\23\0\3\3\12\0\11\3\1\u033f\21\3\23\0"+
    "\3\3\12\0\17\3\1\u0340\13\3\23\0\3\3\12\0"+
    "\6\3\1\u0341\24\3\23\0\3\3\12\0\6\3\1\u0342"+
    "\24\3\23\0\3\3\12\0\4\3\1\u0343\26\3\23\0"+
    "\3\3\12\0\6\3\1\u0344\24\3\23\0\3\3\12\0"+
    "\12\3\1\u0345\20\3\23\0\3\3\12\0\4\3\1\u0346"+
    "\26\3\23\0\3\3\12\0\20\3\1\u0347\12\3\23\0"+
    "\3\3\12\0\7\3\1\u0348\23\3\23\0\3\3\12\0"+
    "\2\3\1\u0349\30\3\23\0\3\3\12\0\20\3\1\u034a"+
    "\12\3\23\0\3\3\12\0\17\3\1\u034b\13\3\23\0"+
    "\3\3\12\0\5\3\1\u034c\25\3\23\0\3\3\12\0"+
    "\1\u034d\6\3\1\u034e\23\3\23\0\3\3\12\0\17\3"+
    "\1\u034f\13\3\23\0\3\3\12\0\1\u0350\32\3\23\0"+
    "\3\3\12\0\2\3\1\u0351\30\3\23\0\3\3\12\0"+
    "\11\3\1\u0352\21\3\23\0\3\3\12\0\4\3\1\u0353"+
    "\26\3\23\0\3\3\12\0\11\3\1\u0354\21\3\23\0"+
    "\3\3\12\0\1\u0355\32\3\23\0\3\3\12\0\5\3"+
    "\1\u0356\25\3\23\0\3\3\12\0\2\3\1\u0357\30\3"+
    "\23\0\3\3\12\0\6\3\1\u0358\24\3\23\0\3\3"+
    "\12\0\17\3\1\u0359\13\3\23\0\3\3\12\0\12\3"+
    "\1\u035a\20\3\23\0\3\3\12\0\14\3\1\u035b\16\3"+
    "\23\0\3\3\12\0\2\3\1\u035c\30\3\23\0\3\3"+
    "\12\0\17\3\1\u035d\13\3\23\0\3\3\12\0\5\3"+
    "\1\u035e\25\3\23\0\3\3\12\0\4\3\1\u035f\26\3"+
    "\23\0\3\3\12\0\2\3\1\u0360\30\3\23\0\3\3"+
    "\12\0\1\u0361\32\3\23\0\3\3\12\0\13\3\1\u0362"+
    "\17\3\23\0\3\3\12\0\17\3\1\u0363\13\3\23\0"+
    "\3\3\12\0\1\u0364\32\3\23\0\3\3\12\0\6\3"+
    "\1\u0365\24\3\23\0\3\3\12\0\13\3\1\u0366\17\3"+
    "\23\0\3\3\12\0\12\3\1\u0367\20\3\23\0\3\3"+
    "\12\0\14\3\1\u0368\16\3\23\0\3\3\12\0\17\3"+
    "\1\u0369\13\3\23\0\3\3\12\0\1\u036a\32\3\23\0"+
    "\3\3\12\0\6\3\1\u036b\24\3\23\0\3\3\12\0"+
    "\11\3\1\u036c\21\3\23\0\3\3\12\0\1\u036d\32\3"+
    "\23\0\3\3\12\0\7\3\1\u036e\23\3\23\0\3\3"+
    "\12\0\6\3\1\u036f\24\3\23\0\3\3\12\0\5\3"+
    "\1\u0370\25\3\23\0\3\3\12\0\20\3\1\u0371\12\3"+
    "\23\0\3\3\12\0\5\3\1\u0372\25\3\23\0\3\3"+
    "\12\0\1\3\1\u0373\31\3\23\0\3\3\12\0\5\3"+
    "\1\u0374\25\3\23\0\3\3\12\0\7\3\1\u0375\23\3"+
    "\23\0\3\3\12\0\17\3\1\u0376\13\3\23\0\3\3"+
    "\12\0\12\3\1\u0377\20\3\23\0\3\3\12\0\13\3"+
    "\1\u0378\17\3\23\0\3\3\12\0\1\u0379\32\3\23\0"+
    "\3\3\12\0\25\3\1\u037a\5\3\23\0\3\3\12\0"+
    "\11\3\1\u037b\21\3\23\0\3\3\12\0\6\3\1\u037c"+
    "\24\3\23\0\3\3\12\0\30\3\1\u037d\2\3\23\0"+
    "\3\3\12\0\4\3\1\u037e\26\3\23\0\3\3\12\0"+
    "\4\3\1\u037f\26\3\23\0\3\3\12\0\1\u0380\32\3"+
    "\23\0\3\3\12\0\11\3\1\u0381\21\3\23\0\3\3"+
    "\12\0\1\3\1\u0382\31\3\23\0\3\3\12\0\2\3"+
    "\1\u0383\30\3\23\0\3\3\12\0\2\3\1\u0384\30\3"+
    "\23\0\3\3\12\0\20\3\1\u0385\12\3\23\0\3\3"+
    "\12\0\20\3\1\u0386\12\3\23\0\3\3\12\0\17\3"+
    "\1\u0387\13\3\23\0\3\3\12\0\6\3\1\u0388\24\3"+
    "\23\0\3\3\12\0\12\3\1\u0389\20\3\23\0\3\3"+
    "\12\0\5\3\1\u038a\25\3\23\0\3\3\12\0\5\3"+
    "\1\u038b\25\3\23\0\3\3\12\0\4\3\1\u038c\26\3"+
    "\23\0\3\3\12\0\6\3\1\u038d\24\3\23\0\3\3"+
    "\12\0\4\3\1\u038e\26\3\23\0\3\3\12\0\4\3"+
    "\1\u038f\26\3\23\0\3\3\12\0\6\3\1\u0390\24\3"+
    "\23\0\3\3\12\0\5\3\1\u0391\25\3\23\0\3\3"+
    "\12\0\12\3\1\u0392\20\3\23\0\3\3\12\0\7\3"+
    "\1\u0393\23\3\23\0\3\3\12\0\10\3\1\u0394\22\3"+
    "\23\0\3\3\12\0\11\3\1\u0395\21\3\23\0\3\3"+
    "\12\0\2\3\1\u0396\30\3\23\0\3\3\12\0\26\3"+
    "\1\u0397\4\3\23\0\3\3\12\0\2\3\1\u0398\30\3"+
    "\23\0\3\3\12\0\2\3\1\u0399\30\3\23\0\3\3"+
    "\12\0\22\3\1\u039a\10\3\23\0\3\3\12\0\1\u039b"+
    "\32\3\23\0\3\3\12\0\17\3\1\u039c\13\3\23\0"+
    "\3\3\12\0\1\u039d\32\3\23\0\3\3\12\0\22\3"+
    "\1\u039e\10\3\23\0\3\3\12\0\11\3\1\u039f\21\3"+
    "\23\0\3\3\12\0\10\3\1\u03a0\22\3\23\0\3\3"+
    "\12\0\2\3\1\u03a1\30\3\23\0\3\3\12\0\2\3"+
    "\1\u03a2\30\3\23\0\3\3\12\0\2\3\1\u03a3\30\3"+
    "\23\0\3\3\12\0\17\3\1\u03a4\13\3\23\0\3\3"+
    "\12\0\1\u03a5\32\3\23\0\3\3\12\0\20\3\1\u03a6"+
    "\6\3\1\u03a7\3\3\23\0\3\3\12\0\2\3\1\u03a8"+
    "\30\3\23\0\3\3\12\0\1\3\1\u03a9\31\3\23\0"+
    "\3\3\12\0\1\u03aa\32\3\23\0\3\3\12\0\4\3"+
    "\1\u03ab\26\3\23\0\3\3\12\0\20\3\1\u03ac\12\3"+
    "\23\0\3\3\12\0\4\3\1\u03ad\26\3\23\0\3\3"+
    "\12\0\17\3\1\u03ae\13\3\23\0\3\3\12\0\5\3"+
    "\1\u03af\25\3\23\0\3\3\12\0\1\3\1\u03b0\31\3"+
    "\23\0\3\3\12\0\1\u03b1\32\3\23\0\3\3\12\0"+
    "\5\3\1\u03b2\25\3\23\0\3\3\12\0\2\3\1\u03b3"+
    "\30\3\23\0\3\3\12\0\4\3\1\u03b4\26\3\23\0"+
    "\3\3\12\0\11\3\1\u03b5\21\3\23\0\3\3\12\0"+
    "\1\3\1\u03b6\31\3\23\0\3\3\12\0\17\3\1\u03b7"+
    "\13\3\23\0\3\3\12\0\11\3\1\u03b8\21\3\23\0"+
    "\3\3\12\0\4\3\1\u03b9\26\3\23\0\3\3\12\0"+
    "\20\3\1\u03ba\12\3\23\0\3\3\12\0\7\3\1\u03bb"+
    "\23\3\23\0\3\3\12\0\1\u03bc\32\3\23\0\3\3"+
    "\12\0\5\3\1\u03bd\25\3\23\0\3\3\12\0\11\3"+
    "\1\u03be\21\3\23\0\3\3\12\0\25\3\1\u03bf\5\3"+
    "\23\0\3\3\12\0\17\3\1\u03c0\13\3\23\0\3\3"+
    "\12\0\7\3\1\u03c1\23\3\23\0\3\3\12\0\2\3"+
    "\1\u03c2\30\3\23\0\3\3\12\0\2\3\1\u03c3\30\3"+
    "\23\0\3\3\12\0\11\3\1\u03c4\21\3\23\0\3\3"+
    "\12\0\4\3\1\u03c5\26\3\23\0\3\3\12\0\27\3"+
    "\1\u03c6\3\3\23\0\3\3\12\0\6\3\1\u03c7\24\3"+
    "\23\0\3\3\12\0\1\u03c8\32\3\23\0\3\3\12\0"+
    "\6\3\1\u03c9\24\3\23\0\3\3\12\0\20\3\1\u03ca"+
    "\12\3\23\0\3\3\12\0\4\3\1\u03cb\26\3\23\0"+
    "\3\3\12\0\17\3\1\u03cc\13\3\23\0\3\3\12\0"+
    "\4\3\1\u03cd\26\3\23\0\3\3\12\0\17\3\1\u03ce"+
    "\13\3\23\0\3\3\12\0\20\3\1\u03cf\12\3\23\0"+
    "\3\3\12\0\12\3\1\u03d0\20\3\23\0\3\3\12\0"+
    "\2\3\1\u03d1\30\3\23\0\3\3\12\0\7\3\1\u03d2"+
    "\23\3\23\0\3\3\12\0\4\3\1\u03d3\26\3\23\0"+
    "\3\3\12\0\1\u03d4\1\3\1\u03d5\30\3\23\0\3\3"+
    "\12\0\10\3\1\u03d6\5\3\1\u03d7\14\3\23\0\3\3"+
    "\12\0\20\3\1\u03d8\12\3\23\0\3\3\12\0\16\3"+
    "\1\u03d9\14\3\23\0\3\3\12\0\12\3\1\u03da\20\3"+
    "\23\0\3\3\12\0\6\3\1\u03db\24\3\23\0\3\3"+
    "\12\0\2\3\1\u03dc\30\3\23\0\3\3\12\0\1\u03dd"+
    "\32\3\23\0\3\3\12\0\4\3\1\u03de\26\3\23\0"+
    "\3\3\12\0\17\3\1\u03df\13\3\23\0\3\3\12\0"+
    "\1\u03e0\32\3\23\0\3\3\12\0\23\3\1\u03e1\7\3"+
    "\23\0\3\3\12\0\1\u03e2\32\3\23\0\3\3\12\0"+
    "\12\3\1\u03e3\20\3\23\0\3\3\12\0\1\u03e4\32\3"+
    "\23\0\3\3\12\0\6\3\1\u03e5\24\3\23\0\3\3"+
    "\12\0\4\3\1\u03e6\26\3\23\0\3\3\12\0\5\3"+
    "\1\u03e7\25\3\23\0\3\3\12\0\6\3\1\u03e8\24\3"+
    "\23\0\3\3\12\0\1\u03e9\32\3\23\0\3\3\12\0"+
    "\6\3\1\u03ea\24\3\23\0\3\3\12\0\7\3\1\u03eb"+
    "\23\3\23\0\3\3\12\0\5\3\1\u03ec\25\3\23\0"+
    "\3\3\12\0\3\3\1\u03ed\27\3\23\0\3\3\12\0"+
    "\27\3\1\u03ee\3\3\23\0\3\3\12\0\1\u03ef\32\3"+
    "\23\0\3\3\12\0\17\3\1\u03f0\13\3\23\0\3\3"+
    "\12\0\6\3\1\u03f1\24\3\23\0\3\3\12\0\12\3"+
    "\1\u03f2\20\3\23\0\3\3\12\0\2\3\1\u03f3\30\3"+
    "\23\0\3\3\12\0\12\3\1\u03f4\20\3\23\0\3\3"+
    "\12\0\6\3\1\u03f5\24\3\23\0\3\3\12\0\1\3"+
    "\1\u03f6\31\3\23\0\3\3\12\0\7\3\1\u03f7\23\3"+
    "\23\0\3\3\12\0\1\u03f8\32\3\23\0\3\3\12\0"+
    "\20\3\1\u03f9\12\3\23\0\3\3\12\0\24\3\1\u03fa"+
    "\6\3\23\0\3\3\12\0\12\3\1\u03fb\20\3\23\0"+
    "\3\3\12\0\22\3\1\u03fc\10\3\23\0\3\3\12\0"+
    "\22\3\1\u03fd\10\3\23\0\3\3\12\0\7\3\1\u03fe"+
    "\23\3\23\0\3\3\12\0\4\3\1\u03ff\26\3\23\0"+
    "\3\3\12\0\2\3\1\u0400\30\3\23\0\3\3\12\0"+
    "\17\3\1\u0401\13\3\23\0\3\3\12\0\27\3\1\u0402"+
    "\3\3\23\0\3\3\12\0\13\3\1\u0403\17\3\23\0"+
    "\3\3\12\0\21\3\1\u0404\11\3\23\0\3\3\12\0"+
    "\2\3\1\u0405\30\3\23\0\3\3\12\0\11\3\1\u0406"+
    "\21\3\23\0\3\3\12\0\2\3\1\u0407\30\3\23\0"+
    "\3\3\12\0\4\3\1\u0408\26\3\23\0\3\3\12\0"+
    "\7\3\1\u0409\23\3\23\0\3\3\12\0\26\3\1\u040a"+
    "\4\3\23\0\3\3\12\0\7\3\1\u040b\23\3\23\0"+
    "\3\3\12\0\20\3\1\u040c\12\3\23\0\3\3\12\0"+
    "\10\3\1\u040d\22\3\23\0\3\3\12\0\22\3\1\u040e"+
    "\10\3\23\0\3\3\12\0\2\3\1\u040f\30\3\23\0"+
    "\3\3\12\0\5\3\1\u0410\25\3\23\0\3\3\12\0"+
    "\12\3\1\u0411\20\3\23\0\3\3\12\0\10\3\1\u0412"+
    "\22\3\23\0\3\3\12\0\6\3\1\u0413\24\3\23\0"+
    "\3\3\12\0\13\3\1\u0414\17\3\23\0\3\3\12\0"+
    "\4\3\1\u0415\26\3\23\0\3\3\12\0\1\u0416\32\3"+
    "\23\0\3\3\12\0\4\3\1\u0417\26\3\23\0\3\3"+
    "\12\0\2\3\1\u0418\14\3\1\u0419\13\3\23\0\3\3"+
    "\12\0\2\3\1\u041a\30\3\23\0\3\3\12\0\4\3"+
    "\1\u041b\26\3\23\0\3\3\12\0\4\3\1\u041c\26\3"+
    "\23\0\3\3\12\0\2\3\1\u041d\30\3\23\0\3\3"+
    "\12\0\11\3\1\u041e\21\3\23\0\3\3\12\0\4\3"+
    "\1\u041f\26\3\23\0\3\3\12\0\6\3\1\u0420\24\3"+
    "\23\0\3\3\12\0\4\3\1\u0421\26\3\23\0\3\3"+
    "\12\0\3\3\1\u0422\27\3\23\0\3\3\12\0\6\3"+
    "\1\u0423\24\3\23\0\3\3\12\0\6\3\1\u0424\24\3"+
    "\23\0\3\3\12\0\11\3\1\u0425\21\3\23\0\3\3"+
    "\12\0\12\3\1\u0426\20\3\23\0\3\3\12\0\12\3"+
    "\1\u0427\20\3\23\0\3\3\12\0\6\3\1\u0428\24\3"+
    "\23\0\3\3\12\0\6\3\1\u0429\24\3\23\0\3\3"+
    "\12\0\4\3\1\u042a\26\3\23\0\3\3\12\0\4\3"+
    "\1\u042b\26\3\23\0\3\3\12\0\2\3\1\u042c\30\3"+
    "\23\0\3\3\12\0\1\u042d\32\3\23\0\3\3\12\0"+
    "\5\3\1\u042e\25\3\23\0\3\3\12\0\2\3\1\u042f"+
    "\30\3\23\0\3\3\12\0\7\3\1\u0430\23\3\23\0"+
    "\3\3\12\0\17\3\1\u0431\13\3\23\0\3\3\12\0"+
    "\17\3\1\u0432\13\3\23\0\3\3\12\0\1\u0433\32\3"+
    "\23\0\3\3\12\0\11\3\1\u0434\21\3\23\0\3\3"+
    "\12\0\2\3\1\u0435\30\3\23\0\3\3\12\0\4\3"+
    "\1\u0436\26\3\23\0\3\3\12\0\6\3\1\u0437\24\3"+
    "\23\0\3\3\12\0\5\3\1\u0438\25\3\23\0\3\3"+
    "\12\0\6\3\1\u0439\24\3\23\0\3\3\12\0\4\3"+
    "\1\u043a\26\3\23\0\3\3\12\0\6\3\1\u043b\24\3"+
    "\23\0\3\3\12\0\17\3\1\u043c\13\3\23\0\3\3"+
    "\12\0\4\3\1\u043d\26\3\23\0\3\3\12\0\17\3"+
    "\1\u043e\13\3\23\0\3\3\12\0\26\3\1\u043f\4\3"+
    "\23\0\3\3\12\0\30\3\1\u0440\2\3\23\0\3\3"+
    "\12\0\6\3\1\u0441\24\3\23\0\3\3\12\0\5\3"+
    "\1\u0442\25\3\23\0\3\3\12\0\2\3\1\u0443\30\3"+
    "\23\0\3\3\12\0\2\3\1\u0444\30\3\23\0\3\3"+
    "\12\0\22\3\1\u0445\10\3\23\0\3\3\12\0\5\3"+
    "\1\u0446\25\3\23\0\3\3\12\0\22\3\1\u0447\10\3"+
    "\23\0\3\3\12\0\2\3\1\u0448\30\3\23\0\3\3"+
    "\12\0\23\3\1\u0449\7\3\23\0\3\3\12\0\2\3"+
    "\1\u044a\30\3\23\0\3\3\12\0\11\3\1\u044b\21\3"+
    "\23\0\3\3\12\0\2\3\1\u044c\30\3\23\0\3\3"+
    "\12\0\1\u044d\32\3\23\0\3\3\12\0\16\3\1\u044e"+
    "\14\3\23\0\3\3\12\0\1\3\1\u044f\31\3\23\0"+
    "\3\3\12\0\4\3\1\u0450\26\3\23\0\3\3\12\0"+
    "\2\3\1\u0451\30\3\23\0\3\3\12\0\4\3\1\u0452"+
    "\26\3\23\0\3\3\12\0\13\3\1\u0453\17\3\23\0"+
    "\3\3\12\0\4\3\1\u0454\26\3\23\0\3\3\12\0"+
    "\2\3\1\u0455\30\3\23\0\3\3\12\0\7\3\1\u0456"+
    "\23\3\23\0\3\3\12\0\11\3\1\u0457\21\3\23\0"+
    "\3\3\12\0\25\3\1\u0458\5\3\23\0\3\3\12\0"+
    "\2\3\1\u0459\30\3\23\0\3\3\12\0\5\3\1\u045a"+
    "\25\3\23\0\3\3\12\0\4\3\1\u045b\26\3\23\0"+
    "\3\3\12\0\4\3\1\u045c\26\3\23\0\3\3\12\0"+
    "\22\3\1\u045d\10\3\23\0\3\3\12\0\2\3\1\u045e"+
    "\30\3\23\0\3\3\12\0\27\3\1\u045f\3\3\23\0"+
    "\3\3\12\0\25\3\1\u0460\5\3\23\0\3\3\12\0"+
    "\2\3\1\u0461\30\3\23\0\3\3\12\0\11\3\1\u0462"+
    "\21\3\23\0\3\3\12\0\4\3\1\u0463\26\3\23\0"+
    "\3\3\12\0\2\3\1\u0464\30\3\23\0\3\3\12\0"+
    "\4\3\1\u0465\26\3\23\0\3\3\12\0\22\3\1\u0466"+
    "\10\3\23\0\3\3\12\0\12\3\1\u0467\20\3\23\0"+
    "\3\3\12\0\4\3\1\u0468\26\3\23\0\3\3\12\0"+
    "\24\3\1\u0469\6\3\23\0\3\3\12\0\4\3\1\u046a"+
    "\26\3\23\0\3\3\12\0\12\3\1\u046b\20\3\23\0"+
    "\3\3\12\0\7\3\1\u046c\23\3\23\0\3\3\12\0"+
    "\4\3\1\u046d\26\3\23\0\3\3\12\0\2\3\1\u046e"+
    "\30\3\23\0\3\3\12\0\11\3\1\u046f\21\3\23\0"+
    "\3\3\12\0\2\3\1\u0470\30\3\23\0\3\3\12\0"+
    "\5\3\1\u0471\25\3\23\0\3\3\12\0\22\3\1\u0472"+
    "\10\3\23\0\3\3\12\0\6\3\1\u0473\24\3\23\0"+
    "\3\3\12\0\5\3\1\u0474\25\3\23\0\3\3\12\0"+
    "\1\u0475\32\3\23\0\3\3\12\0\20\3\1\u0476\12\3"+
    "\23\0\3\3\12\0\2\3\1\u0477\30\3\23\0\3\3"+
    "\12\0\20\3\1\u0478\12\3\23\0\3\3\12\0\1\3"+
    "\1\u0479\31\3\23\0\3\3\12\0\2\3\1\u047a\30\3"+
    "\23\0\3\3\12\0\2\3\1\u047b\30\3\23\0\3\3"+
    "\12\0\11\3\1\u047c\21\3\23\0\3\3\12\0\20\3"+
    "\1\u047d\12\3\23\0\3\3\12\0\2\3\1\u047e\30\3"+
    "\23\0\3\3\12\0\17\3\1\u047f\13\3\23\0\3\3"+
    "\12\0\17\3\1\u0480\13\3\23\0\3\3\12\0\11\3"+
    "\1\u0481\21\3\23\0\3\3\12\0\30\3\1\u0482\2\3"+
    "\23\0\3\3\12\0\2\3\1\u0483\30\3\23\0\3\3"+
    "\12\0\6\3\1\u0484\24\3\23\0\3\3\12\0\17\3"+
    "\1\u0485\13\3\23\0\3\3\12\0\2\3\1\u0486\30\3"+
    "\23\0\3\3\12\0\4\3\1\u0487\26\3\23\0\3\3"+
    "\12\0\6\3\1\u0488\24\3\23\0\3\3\12\0\4\3"+
    "\1\u0489\26\3\23\0\3\3\12\0\24\3\1\u048a\6\3"+
    "\23\0\3\3\12\0\22\3\1\u048b\10\3\23\0\3\3"+
    "\12\0\21\3\1\u048c\11\3\23\0\3\3\12\0\11\3"+
    "\1\u048d\21\3\23\0\3\3\12\0\12\3\1\u048e\20\3"+
    "\23\0\3\3\12\0\7\3\1\u048f\23\3\23\0\3\3"+
    "\12\0\7\3\1\u0490\23\3\23\0\3\3\12\0\4\3"+
    "\1\u0491\26\3\23\0\3\3\12\0\11\3\1\u0492\21\3"+
    "\23\0\3\3\12\0\4\3\1\u0493\26\3\23\0\3\3"+
    "\12\0\5\3\1\u0494\25\3\23\0\3\3\12\0\2\3"+
    "\1\u0495\30\3\23\0\3\3\12\0\17\3\1\u0496\13\3"+
    "\23\0\3\3\12\0\21\3\1\u0497\11\3\23\0\3\3"+
    "\12\0\30\3\1\u0498\2\3\23\0\3\3\12\0\12\3"+
    "\1\u0499\20\3\23\0\3\3\12\0\17\3\1\u049a\13\3"+
    "\23\0\3\3\12\0\6\3\1\u049b\24\3\23\0\3\3"+
    "\12\0\6\3\1\u049c\24\3\23\0\3\3\12\0\13\3"+
    "\1\u049d\17\3\23\0\3\3\12\0\4\3\1\u049e\26\3"+
    "\23\0\3\3\12\0\3\3\1\u049f\27\3\23\0\3\3"+
    "\12\0\5\3\1\u04a0\25\3\23\0\3\3\12\0\5\3"+
    "\1\u04a1\25\3\23\0\3\3\12\0\1\u04a2\32\3\23\0"+
    "\3\3\12\0\6\3\1\u04a3\24\3\23\0\3\3\12\0"+
    "\4\3\1\u04a4\26\3\23\0\3\3\12\0\7\3\1\u04a5"+
    "\23\3\23\0\3\3\12\0\11\3\1\u04a6\21\3\23\0"+
    "\3\3\12\0\17\3\1\u04a7\13\3\23\0\3\3\12\0"+
    "\4\3\1\u04a8\26\3\23\0\3\3\12\0\12\3\1\u04a9"+
    "\20\3\23\0\3\3\12\0\6\3\1\u04aa\24\3\23\0"+
    "\3\3\12\0\10\3\1\u04ab\22\3\23\0\3\3\12\0"+
    "\21\3\1\u04ac\11\3\23\0\3\3\12\0\17\3\1\u04ad"+
    "\13\3\23\0\3\3\12\0\2\3\1\u04ae\14\3\1\u04af"+
    "\13\3\23\0\3\3\12\0\2\3\1\u04b0\30\3\23\0"+
    "\3\3\12\0\10\3\1\u04b1\22\3\23\0\3\3\12\0"+
    "\30\3\1\u04b2\2\3\23\0\3\3\12\0\5\3\1\u04b3"+
    "\25\3\23\0\3\3\12\0\17\3\1\u04b4\13\3\23\0"+
    "\3\3\12\0\13\3\1\u04b5\17\3\23\0\3\3\12\0"+
    "\2\3\1\u04b6\30\3\23\0\3\3\12\0\11\3\1\u04b7"+
    "\21\3\23\0\3\3\12\0\2\3\1\u04b8\30\3\23\0"+
    "\3\3\12\0\6\3\1\u04b9\24\3\23\0\3\3\12\0"+
    "\2\3\1\u04ba\30\3\23\0\3\3\12\0\2\3\1\u04bb"+
    "\30\3\23\0\3\3\12\0\21\3\1\u04bc\11\3\23\0"+
    "\3\3\12\0\20\3\1\u04bd\12\3\23\0\3\3\12\0"+
    "\2\3\1\u04be\30\3\23\0\3\3\12\0\6\3\1\u04bf"+
    "\24\3\23\0\3\3\12\0\1\3\1\u04c0\31\3\23\0"+
    "\3\3\12\0\6\3\1\u04c1\24\3\23\0\3\3\12\0"+
    "\4\3\1\u04c2\26\3\23\0\3\3\12\0\11\3\1\u04c3"+
    "\21\3\23\0\3\3\12\0\6\3\1\u04c4\24\3\23\0"+
    "\3\3\12\0\6\3\1\u04c5\24\3\23\0\3\3\12\0"+
    "\1\3\1\u04c6\2\3\1\u04c7\6\3\1\u04c8\17\3\23\0"+
    "\3\3\12\0\5\3\1\u04c9\25\3\23\0\3\3\12\0"+
    "\22\3\1\u04ca\10\3\23\0\3\3\12\0\6\3\1\u04cb"+
    "\24\3\23\0\3\3\12\0\3\3\1\u04cc\27\3\23\0"+
    "\3\3\12\0\4\3\1\u04cd\26\3\23\0\3\3\12\0"+
    "\11\3\1\u04ce\21\3\23\0\3\3\12\0\4\3\1\u04cf"+
    "\26\3\23\0\3\3\12\0\12\3\1\u04d0\15\3\1\u04d1"+
    "\2\3\23\0\3\3\12\0\5\3\1\u04d2\25\3\23\0"+
    "\3\3\12\0\4\3\1\u04d3\26\3\23\0\3\3\12\0"+
    "\21\3\1\u04d4\11\3\23\0\3\3\12\0\17\3\1\u04d5"+
    "\13\3\23\0\3\3\12\0\6\3\1\u04d6\24\3\23\0"+
    "\3\3\12\0\2\3\1\u04d7\30\3\23\0\3\3\12\0"+
    "\6\3\1\u04d8\24\3\23\0\3\3\12\0\1\u04d9\32\3"+
    "\23\0\3\3\12\0\13\3\1\u04da\17\3\23\0\3\3"+
    "\12\0\20\3\1\u04db\3\3\1\u04dc\6\3\23\0\3\3"+
    "\12\0\12\3\1\u04dd\20\3\23\0\3\3\12\0\22\3"+
    "\1\u04de\10\3\23\0\3\3\12\0\20\3\1\u04df\12\3"+
    "\23\0\3\3\12\0\4\3\1\u04e0\26\3\23\0\3\3"+
    "\12\0\11\3\1\u04e1\21\3\23\0\3\3\12\0\4\3"+
    "\1\u04e2\26\3\23\0\3\3\12\0\2\3\1\u04e3\30\3"+
    "\23\0\3\3\12\0\2\3\1\u04e4\30\3\23\0\3\3"+
    "\12\0\5\3\1\u04e5\25\3\23\0\3\3\12\0\12\3"+
    "\1\u04e6\20\3\23\0\3\3\12\0\2\3\1\u04e7\30\3"+
    "\23\0\3\3\12\0\4\3\1\u04e8\26\3\23\0\3\3"+
    "\12\0\7\3\1\u04e9\23\3\23\0\3\3\12\0\11\3"+
    "\1\u04ea\21\3\23\0\3\3\12\0\11\3\1\u04eb\21\3"+
    "\23\0\3\3\12\0\5\3\1\u04ec\25\3\23\0\3\3"+
    "\12\0\15\3\1\u04ed\7\3\1\u04ee\5\3\23\0\3\3"+
    "\12\0\11\3\1\u04ef\21\3\23\0\3\3\12\0\5\3"+
    "\1\u04f0\25\3\23\0\3\3\12\0\20\3\1\u04f1\12\3"+
    "\23\0\3\3\12\0\7\3\1\u04f2\23\3\23\0\3\3"+
    "\12\0\5\3\1\u04f3\25\3\23\0\3\3\12\0\20\3"+
    "\1\u04f4\12\3\23\0\3\3\12\0\11\3\1\u04f5\21\3"+
    "\23\0\3\3\12\0\4\3\1\u04f6\26\3\23\0\3\3"+
    "\12\0\22\3\1\u04f7\10\3\23\0\3\3\12\0\1\3"+
    "\1\u04f8\31\3\23\0\3\3\12\0\1\u04f9\32\3\23\0"+
    "\3\3\12\0\6\3\1\u04fa\24\3\23\0\3\3\12\0"+
    "\4\3\1\u04fb\26\3\23\0\3\3\12\0\1\u04fc\32\3"+
    "\23\0\3\3\12\0\17\3\1\u04fd\13\3\23\0\3\3"+
    "\12\0\20\3\1\u04fe\12\3\23\0\3\3\12\0\30\3"+
    "\1\u04ff\2\3\23\0\3\3\12\0\4\3\1\u0500\26\3"+
    "\23\0\3\3\12\0\4\3\1\u0501\26\3\23\0\3\3"+
    "\12\0\4\3\1\u0502\26\3\23\0\3\3\12\0\1\u0503"+
    "\32\3\23\0\3\3\12\0\5\3\1\u0504\25\3\23\0"+
    "\3\3\12\0\15\3\1\u0505\15\3\23\0\3\3\12\0"+
    "\11\3\1\u0506\21\3\23\0\3\3\12\0\17\3\1\u0507"+
    "\13\3\23\0\3\3\12\0\27\3\1\u0508\3\3\23\0"+
    "\3\3\12\0\22\3\1\u0509\10\3\23\0\3\3\12\0"+
    "\13\3\1\u050a\17\3\23\0\3\3\12\0\20\3\1\u050b"+
    "\12\3\23\0\3\3\12\0\17\3\1\u050c\13\3\23\0"+
    "\3\3\12\0\2\3\1\u050d\30\3\23\0\3\3\12\0"+
    "\20\3\1\u050e\12\3\23\0\3\3\12\0\2\3\1\u050f"+
    "\30\3\23\0\3\3\12\0\13\3\1\u0510\17\3\23\0"+
    "\3\3\12\0\17\3\1\u0511\13\3\23\0\3\3\12\0"+
    "\20\3\1\u0512\12\3\23\0\3\3\12\0\1\3\1\u0513"+
    "\31\3\23\0\3\3\12\0\2\3\1\u0514\30\3\23\0"+
    "\3\3\12\0\6\3\1\u0515\24\3\23\0\3\3\12\0"+
    "\6\3\1\u0516\24\3\23\0\3\3\12\0\4\3\1\u0517"+
    "\26\3\23\0\3\3\12\0\11\3\1\u0518\21\3\23\0"+
    "\3\3\12\0\17\3\1\u0519\13\3\23\0\3\3\12\0"+
    "\6\3\1\u051a\24\3\23\0\3\3\12\0\2\3\1\u051b"+
    "\30\3\23\0\3\3\12\0\2\3\1\u051c\30\3\23\0"+
    "\3\3\12\0\13\3\1\u051d\17\3\23\0\3\3\12\0"+
    "\4\3\1\u051e\26\3\23\0\3\3\12\0\17\3\1\u051f"+
    "\13\3\23\0\3\3\12\0\16\3\1\u0520\14\3\23\0"+
    "\3\3\12\0\20\3\1\u0521\12\3\23\0\3\3\12\0"+
    "\4\3\1\u0522\26\3\23\0\3\3\12\0\25\3\1\u0523"+
    "\5\3\23\0\3\3\12\0\2\3\1\u0524\30\3\23\0"+
    "\3\3\12\0\7\3\1\u0525\23\3\23\0\3\3\12\0"+
    "\15\3\1\u0526\15\3\23\0\3\3\12\0\16\3\1\u0527"+
    "\14\3\23\0\3\3\12\0\7\3\1\u0528\23\3\23\0"+
    "\3\3\12\0\6\3\1\u0529\24\3\23\0\3\3\12\0"+
    "\2\3\1\u052a\30\3\23\0\3\3\12\0\1\3\1\u052b"+
    "\31\3\23\0\3\3\12\0\2\3\1\u052c\30\3\23\0"+
    "\3\3\12\0\25\3\1\u052d\5\3\23\0\3\3\12\0"+
    "\21\3\1\u052e\11\3\23\0\3\3\12\0\5\3\1\u052f"+
    "\25\3\23\0\3\3\12\0\10\3\1\u0530\22\3\23\0"+
    "\3\3\12\0\11\3\1\u0531\21\3\23\0\3\3\12\0"+
    "\13\3\1\u0532\17\3\23\0\3\3\12\0\6\3\1\u0533"+
    "\24\3\23\0\3\3\12\0\1\3\1\u0534\31\3\23\0"+
    "\3\3\12\0\5\3\1\u0535\25\3\23\0\3\3\12\0"+
    "\15\3\1\u0536\15\3\23\0\3\3\12\0\6\3\1\u0537"+
    "\24\3\23\0\3\3\12\0\7\3\1\u0538\23\3\23\0"+
    "\3\3\12\0\2\3\1\u0539\30\3\23\0\3\3\12\0"+
    "\2\3\1\u053a\30\3\23\0\3\3\12\0\5\3\1\u053b"+
    "\25\3\23\0\3\3\12\0\2\3\1\u053c\30\3\23\0"+
    "\3\3\12\0\7\3\1\u053d\23\3\23\0\3\3\12\0"+
    "\20\3\1\u053e\12\3\23\0\3\3\12\0\17\3\1\u053f"+
    "\13\3\23\0\3\3\12\0\5\3\1\u0540\25\3\23\0"+
    "\3\3\12\0\17\3\1\u0541\13\3\23\0\3\3\12\0"+
    "\10\3\1\u0542\22\3\23\0\3\3\12\0\6\3\1\u0543"+
    "\24\3\23\0\3\3\12\0\5\3\1\u0544\25\3\23\0"+
    "\3\3\12\0\13\3\1\u0545\17\3\23\0\3\3\12\0"+
    "\12\3\1\u0546\20\3\23\0\3\3\12\0\22\3\1\u0547"+
    "\10\3\23\0\3\3\12\0\2\3\1\u0548\30\3\23\0"+
    "\3\3\12\0\20\3\1\u0549\12\3\23\0\3\3\12\0"+
    "\6\3\1\u054a\24\3\23\0\3\3\12\0\2\3\1\u054b"+
    "\30\3\23\0\3\3\12\0\2\3\1\u054c\30\3\23\0"+
    "\3\3\12\0\4\3\1\u054d\26\3\23\0\3\3\12\0"+
    "\7\3\1\u054e\23\3\23\0\3\3\12\0\15\3\1\u054f"+
    "\15\3\23\0\3\3\12\0\4\3\1\u0550\26\3\23\0"+
    "\3\3\12\0\2\3\1\u0551\30\3\23\0\3\3\12\0"+
    "\4\3\1\u0552\26\3\23\0\3\3\12\0\22\3\1\u0553"+
    "\10\3\23\0\3\3\12\0\5\3\1\u0554\25\3\23\0"+
    "\3\3\12\0\1\u0555\32\3\23\0\3\3\12\0\5\3"+
    "\1\u0556\25\3\23\0\3\3\12\0\2\3\1\u0557\30\3"+
    "\23\0\3\3\12\0\1\u0558\32\3\23\0\3\3\12\0"+
    "\4\3\1\u0559\26\3\23\0\3\3\12\0\4\3\1\u055a"+
    "\26\3\23\0\3\3\12\0\5\3\1\u055b\25\3\23\0"+
    "\3\3\12\0\1\u055c\32\3\23\0\3\3\12\0\25\3"+
    "\1\u055d\5\3\23\0\3\3\12\0\15\3\1\u055e\15\3"+
    "\23\0\3\3\12\0\17\3\1\u055f\13\3\23\0\3\3"+
    "\12\0\20\3\1\u0560\12\3\23\0\3\3\12\0\10\3"+
    "\1\u0561\22\3\23\0\3\3\12\0\4\3\1\u0562\26\3"+
    "\23\0\3\3\12\0\2\3\1\u0563\30\3\23\0\3\3"+
    "\12\0\21\3\1\u0564\11\3\23\0\3\3\12\0\4\3"+
    "\1\u0565\26\3\23\0\3\3\12\0\1\3\1\u0566\2\3"+
    "\1\u0567\26\3\23\0\3\3\12\0\1\u0568\32\3\23\0"+
    "\3\3\12\0\2\3\1\u0569\30\3\23\0\3\3\12\0"+
    "\1\u056a\32\3\23\0\3\3\12\0\16\3\1\u056b\14\3"+
    "\23\0\3\3\12\0\4\3\1\u056c\26\3\23\0\3\3"+
    "\12\0\16\3\1\u056d\14\3\23\0\3\3\12\0\7\3"+
    "\1\u056e\23\3\23\0\3\3\12\0\1\u056f\32\3\23\0"+
    "\3\3\12\0\7\3\1\u0570\23\3\23\0\3\3\12\0"+
    "\2\3\1\u0571\30\3\23\0\3\3\12\0\17\3\1\u0572"+
    "\13\3\23\0\3\3\12\0\2\3\1\u0573\30\3\23\0"+
    "\3\3\12\0\7\3\1\u0574\23\3\23\0\3\3\12\0"+
    "\20\3\1\u0575\12\3\23\0\3\3\12\0\4\3\1\u0576"+
    "\26\3\23\0\3\3\12\0\1\u0577\32\3\23\0\3\3"+
    "\12\0\16\3\1\u0578\14\3\23\0\3\3\12\0\7\3"+
    "\1\u0579\23\3\23\0\3\3\12\0\2\3\1\u057a\30\3"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\32\1\1\11"+
    "\1\1\1\11\10\1\1\11\1\1\2\11\3\1\2\0"+
    "\1\11\171\1\6\11\1\0\4\11\5\0\262\1\1\11"+
    "\25\1\4\0\341\1\1\0\u030b\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
	/*public String lexeme;   
    public int linea;
    public int columna;
    public int columnaInicial;  */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.ERROR);
          }
        case 350: break;
        case 2: 
          { if(yylength()>31){return symbol(sym.ErrorCadenaLarga);}else{return symbol(sym.Identificador);}
          }
        case 351: break;
        case 3: 
          { return symbol(sym.Numero);
          }
        case 352: break;
        case 4: 
          { return symbol(sym.Coma);
          }
        case 353: break;
        case 5: 
          { /*Ignore*/
          }
        case 354: break;
        case 6: 
          { return symbol(sym.Punto);
          }
        case 355: break;
        case 7: 
          { return symbol(sym.Division);
          }
        case 356: break;
        case 8: 
          { return symbol(sym.Multiplicacion);
          }
        case 357: break;
        case 9: 
          { return symbol(sym.Resta);
          }
        case 358: break;
        case 10: 
          { return symbol(sym.Suma);
          }
        case 359: break;
        case 11: 
          { return symbol(sym.Igual);
          }
        case 360: break;
        case 12: 
          { return symbol(sym.Porcentaje);
          }
        case 361: break;
        case 13: 
          { return symbol(sym.MenorQue);
          }
        case 362: break;
        case 14: 
          { return symbol(sym.MayorQue);
          }
        case 363: break;
        case 15: 
          { return symbol(sym.SignoAdmiracionInverso);
          }
        case 364: break;
        case 16: 
          { return symbol(sym.PuntoComa);
          }
        case 365: break;
        case 17: 
          { return symbol(sym.AbrirParentesis);
          }
        case 366: break;
        case 18: 
          { return symbol(sym.CerrarParentesis);
          }
        case 367: break;
        case 19: 
          { return symbol(sym.AbrirLlave);
          }
        case 368: break;
        case 20: 
          { return symbol(sym.CerrarLlave);
          }
        case 369: break;
        case 21: 
          { return symbol(sym.Arroba);
          }
        case 370: break;
        case 22: 
          { return symbol(sym.Numeral);
          }
        case 371: break;
        case 23: 
          { return symbol(sym.Float);
          }
        case 372: break;
        case 24: 
          { return symbol(sym.ErrorFloatPunto);
          }
        case 373: break;
        case 25: 
          { return symbol(sym.Cadena);
          }
        case 374: break;
        case 26: 
          { return symbol(sym.AT);
          }
        case 375: break;
        case 27: 
          { return symbol(sym.AS);
          }
        case 376: break;
        case 28: 
          { return symbol(sym.TO);
          }
        case 377: break;
        case 29: 
          { return symbol(sym.NO);
          }
        case 378: break;
        case 30: 
          { return symbol(sym.OR);
          }
        case 379: break;
        case 31: 
          { return symbol(sym.ON);
          }
        case 380: break;
        case 32: 
          { return symbol(sym.OF);
          }
        case 381: break;
        case 33: 
          { return symbol(sym.BY);
          }
        case 382: break;
        case 34: 
          { return symbol(sym.IN);
          }
        case 383: break;
        case 35: 
          { return symbol(sym.IF);
          }
        case 384: break;
        case 36: 
          { return symbol(sym.IS);
          }
        case 385: break;
        case 37: 
          { return symbol(sym.GO);
          }
        case 386: break;
        case 38: 
          { return symbol(sym.IgualA);
          }
        case 387: break;
        case 39: 
          { return symbol(sym.MenorIgual);
          }
        case 388: break;
        case 40: 
          { return symbol(sym.MayorIgual);
          }
        case 389: break;
        case 41: 
          { return symbol(sym.DiferenteDe);
          }
        case 390: break;
        case 42: 
          { return symbol(sym.And);
          }
        case 391: break;
        case 43: 
          { return symbol(sym.Or);
          }
        case 392: break;
        case 44: 
          { return symbol(sym.DobleParentesis);
          }
        case 393: break;
        case 45: 
          { return symbol(sym.DobleCorchete);
          }
        case 394: break;
        case 46: 
          { return symbol(sym.DobleLlave);
          }
        case 395: break;
        case 47: 
          { return symbol(sym.DobleNumeral);
          }
        case 396: break;
        case 48: 
          { return symbol(sym.ADA);
          }
        case 397: break;
        case 49: 
          { return symbol(sym.ADD);
          }
        case 398: break;
        case 50: 
          { return symbol(sym.ARE);
          }
        case 399: break;
        case 51: 
          { return symbol(sym.AND);
          }
        case 400: break;
        case 52: 
          { return symbol(sym.ANY);
          }
        case 401: break;
        case 53: 
          { return symbol(sym.ALL);
          }
        case 402: break;
        case 54: 
          { return symbol(sym.ASC);
          }
        case 403: break;
        case 55: 
          { return symbol(sym.AVG);
          }
        case 404: break;
        case 56: 
          { return symbol(sym.DAY);
          }
        case 405: break;
        case 57: 
          { return symbol(sym.DEC);
          }
        case 406: break;
        case 58: 
          { return symbol(sym.END);
          }
        case 407: break;
        case 59: 
          { return symbol(sym.TOP);
          }
        case 408: break;
        case 60: 
          { return symbol(sym.NOT);
          }
        case 409: break;
        case 61: 
          { return symbol(sym.PAD);
          }
        case 410: break;
        case 62: 
          { return symbol(sym.OFF);
          }
        case 411: break;
        case 63: 
          { return symbol(sym.USE);
          }
        case 412: break;
        case 64: 
          { return symbol(sym.FOR);
          }
        case 413: break;
        case 65: 
          { return symbol(sym.BIT);
          }
        case 414: break;
        case 66: 
          { return symbol(sym.INT);
          }
        case 415: break;
        case 67: 
          { return symbol(sym.SQL);
          }
        case 416: break;
        case 68: 
          { return symbol(sym.SET);
          }
        case 417: break;
        case 69: 
          { return symbol(sym.SUM);
          }
        case 418: break;
        case 70: 
          { return symbol(sym.GET);
          }
        case 419: break;
        case 71: 
          { return symbol(sym.Ambos);
          }
        case 420: break;
        case 72: 
          { return symbol(sym.KEY);
          }
        case 421: break;
        case 73: 
          { return symbol(sym.MAX);
          }
        case 422: break;
        case 74: 
          { return symbol(sym.MIN);
          }
        case 423: break;
        case 75: 
          { return symbol(sym.ErrorFloatE);
          }
        case 424: break;
        case 76: 
          { return symbol(sym.ErrorFloatMas);
          }
        case 425: break;
        case 77: 
          { return symbol(sym.DATE);
          }
        case 426: break;
        case 78: 
          { return symbol(sym.DENY);
          }
        case 427: break;
        case 79: 
          { return symbol(sym.DESC);
          }
        case 428: break;
        case 80: 
          { return symbol(sym.DROP);
          }
        case 429: break;
        case 81: 
          { return symbol(sym.DUMP);
          }
        case 430: break;
        case 82: 
          { return symbol(sym.DBCC);
          }
        case 431: break;
        case 83: 
          { return symbol(sym.DISK);
          }
        case 432: break;
        case 84: 
          { return symbol(sym.EXEC);
          }
        case 433: break;
        case 85: 
          { return symbol(sym.EXIT);
          }
        case 434: break;
        case 86: 
          { return symbol(sym.ELSE);
          }
        case 435: break;
        case 87: 
          { return symbol(sym.TRAN);
          }
        case 436: break;
        case 88: 
          { return symbol(sym.TRUE);
          }
        case 437: break;
        case 89: 
          { return symbol(sym.TRIM);
          }
        case 438: break;
        case 90: 
          { return symbol(sym.THEN);
          }
        case 439: break;
        case 91: 
          { return symbol(sym.TIME);
          }
        case 440: break;
        case 92: 
          { return symbol(sym.READ);
          }
        case 441: break;
        case 93: 
          { return symbol(sym.REAL);
          }
        case 442: break;
        case 94: 
          { return symbol(sym.ROWS);
          }
        case 443: break;
        case 95: 
          { return symbol(sym.RULE);
          }
        case 444: break;
        case 96: 
          { return symbol(sym.NEXT);
          }
        case 445: break;
        case 97: 
          { return symbol(sym.NONE);
          }
        case 446: break;
        case 98: 
          { return symbol(sym.NULL);
          }
        case 447: break;
        case 99: 
          { return symbol(sym.LAST);
          }
        case 448: break;
        case 100: 
          { return symbol(sym.LEFT);
          }
        case 449: break;
        case 101: 
          { return symbol(sym.LOAD);
          }
        case 450: break;
        case 102: 
          { return symbol(sym.LIKE);
          }
        case 451: break;
        case 103: 
          { return symbol(sym.PROC);
          }
        case 452: break;
        case 104: 
          { return symbol(sym.PLAN);
          }
        case 453: break;
        case 105: 
          { return symbol(sym.ONLY);
          }
        case 454: break;
        case 106: 
          { return symbol(sym.OPEN);
          }
        case 455: break;
        case 107: 
          { return symbol(sym.OVER);
          }
        case 456: break;
        case 108: 
          { return symbol(sym.CASE);
          }
        case 457: break;
        case 109: 
          { return symbol(sym.CAST);
          }
        case 458: break;
        case 110: 
          { return symbol(sym.CHAR);
          }
        case 459: break;
        case 111: 
          { return symbol(sym.USER);
          }
        case 460: break;
        case 112: 
          { return symbol(sym.FROM);
          }
        case 461: break;
        case 113: 
          { return symbol(sym.FULL);
          }
        case 462: break;
        case 114: 
          { return symbol(sym.FILE);
          }
        case 463: break;
        case 115: 
          { return symbol(sym.HOUR);
          }
        case 464: break;
        case 116: 
          { return symbol(sym.BOTH);
          }
        case 465: break;
        case 117: 
          { return symbol(sym.BULK);
          }
        case 466: break;
        case 118: 
          { return symbol(sym.INTO);
          }
        case 467: break;
        case 119: 
          { return symbol(sym.SAVE);
          }
        case 468: break;
        case 120: 
          { return symbol(sym.SOME);
          }
        case 469: break;
        case 121: 
          { return symbol(sym.SIZE);
          }
        case 470: break;
        case 122: 
          { return symbol(sym.YEAR);
          }
        case 471: break;
        case 123: 
          { return symbol(sym.GOTO);
          }
        case 472: break;
        case 124: 
          { return symbol(sym.ZONE);
          }
        case 473: break;
        case 125: 
          { return symbol(sym.KILL);
          }
        case 474: break;
        case 126: 
          { return symbol(sym.WORK);
          }
        case 475: break;
        case 127: 
          { return symbol(sym.WHEN);
          }
        case 476: break;
        case 128: 
          { return symbol(sym.WITH);
          }
        case 477: break;
        case 129: 
          { return symbol(sym.VIEW);
          }
        case 478: break;
        case 130: 
          { return symbol(sym.JOIN);
          }
        case 479: break;
        case 131: 
          { return symbol(sym.ALTER);
          }
        case 480: break;
        case 132: 
          { return symbol(sym.TABLE);
          }
        case 481: break;
        case 133: 
          { return symbol(sym.RIGHT);
          }
        case 482: break;
        case 134: 
          { return symbol(sym.NAMES);
          }
        case 483: break;
        case 135: 
          { return symbol(sym.NCHAR);
          }
        case 484: break;
        case 136: 
          { return symbol(sym.LEVEL);
          }
        case 485: break;
        case 137: 
          { return symbol(sym.LOCAL);
          }
        case 486: break;
        case 138: 
          { return symbol(sym.LOWER);
          }
        case 487: break;
        case 139: 
          { return symbol(sym.PRINT);
          }
        case 488: break;
        case 140: 
          { return symbol(sym.PRIOR);
          }
        case 489: break;
        case 141: 
          { return symbol(sym.PIVOT);
          }
        case 490: break;
        case 142: 
          { return symbol(sym.ORDER);
          }
        case 491: break;
        case 143: 
          { return symbol(sym.OUTER);
          }
        case 492: break;
        case 144: 
          { return symbol(sym.CROSS);
          }
        case 493: break;
        case 145: 
          { return symbol(sym.CLOSE);
          }
        case 494: break;
        case 146: 
          { return symbol(sym.COUNT);
          }
        case 495: break;
        case 147: 
          { return symbol(sym.CHECK);
          }
        case 496: break;
        case 148: 
          { return symbol(sym.UNION);
          }
        case 497: break;
        case 149: 
          { return symbol(sym.UPPER);
          }
        case 498: break;
        case 150: 
          { return symbol(sym.USAGE);
          }
        case 499: break;
        case 151: 
          { return symbol(sym.USING);
          }
        case 500: break;
        case 152: 
          { return symbol(sym.FALSE);
          }
        case 501: break;
        case 153: 
          { return symbol(sym.FETCH);
          }
        case 502: break;
        case 154: 
          { return symbol(sym.FLOAT);
          }
        case 503: break;
        case 155: 
          { return symbol(sym.FOUND);
          }
        case 504: break;
        case 156: 
          { return symbol(sym.FIRST);
          }
        case 505: break;
        case 157: 
          { return symbol(sym.BEGIN);
          }
        case 506: break;
        case 158: 
          { return symbol(sym.BREAK);
          }
        case 507: break;
        case 159: 
          { return symbol(sym.INDEX);
          }
        case 508: break;
        case 160: 
          { return symbol(sym.INNER);
          }
        case 509: break;
        case 161: 
          { return symbol(sym.INPUT);
          }
        case 510: break;
        case 162: 
          { return symbol(sym.SQLCA);
          }
        case 511: break;
        case 163: 
          { return symbol(sym.SPACE);
          }
        case 512: break;
        case 164: 
          { return symbol(sym.GRANT);
          }
        case 513: break;
        case 165: 
          { return symbol(sym.GROUP);
          }
        case 514: break;
        case 166: 
          { return symbol(sym.MATCH);
          }
        case 515: break;
        case 167: 
          { return symbol(sym.MERGE);
          }
        case 516: break;
        case 168: 
          { return symbol(sym.MONTH);
          }
        case 517: break;
        case 169: 
          { return symbol(sym.WRITE);
          }
        case 518: break;
        case 170: 
          { return symbol(sym.WHERE);
          }
        case 519: break;
        case 171: 
          { return symbol(sym.WHILE);
          }
        case 520: break;
        case 172: 
          { return symbol(sym.VALUE);
          }
        case 521: break;
        case 173: 
          { return symbol(sym.ACTION);
          }
        case 522: break;
        case 174: 
          { return symbol(sym.DELETE);
          }
        case 523: break;
        case 175: 
          { return symbol(sym.DOUBLE);
          }
        case 524: break;
        case 176: 
          { return symbol(sym.DOMAIN);
          }
        case 525: break;
        case 177: 
          { return symbol(sym.EXCEPT);
          }
        case 526: break;
        case 178: 
          { return symbol(sym.EXISTS);
          }
        case 527: break;
        case 179: 
          { return symbol(sym.ERRLVL);
          }
        case 528: break;
        case 180: 
          { return symbol(sym.ESCAPE);
          }
        case 529: break;
        case 181: 
          { return symbol(sym.RETURN);
          }
        case 530: break;
        case 182: 
          { return symbol(sym.REVERT);
          }
        case 531: break;
        case 183: 
          { return symbol(sym.REVOKE);
          }
        case 532: break;
        case 184: 
          { return symbol(sym.NULLIF);
          }
        case 533: break;
        case 185: 
          { return symbol(sym.LINENO);
          }
        case 534: break;
        case 186: 
          { return symbol(sym.PASCAL);
          }
        case 535: break;
        case 187: 
          { return symbol(sym.PUBLIC);
          }
        case 536: break;
        case 188: 
          { return symbol(sym.OPTION);
          }
        case 537: break;
        case 189: 
          { return symbol(sym.OUTPUT);
          }
        case 538: break;
        case 190: 
          { return symbol(sym.CREATE);
          }
        case 539: break;
        case 191: 
          { return symbol(sym.COLUMN);
          }
        case 540: break;
        case 192: 
          { return symbol(sym.COMMIT);
          }
        case 541: break;
        case 193: 
          { return symbol(sym.CURSOR);
          }
        case 542: break;
        case 194: 
          { return symbol(sym.UNIQUE);
          }
        case 543: break;
        case 195: 
          { return symbol(sym.UPDATE);
          }
        case 544: break;
        case 196: 
          { return symbol(sym.HAVING);
          }
        case 545: break;
        case 197: 
          { return symbol(sym.BACKUP);
          }
        case 546: break;
        case 198: 
          { return symbol(sym.BROWSE);
          }
        case 547: break;
        case 199: 
          { return symbol(sym.INSERT);
          }
        case 548: break;
        case 200: 
          { return symbol(sym.SELECT);
          }
        case 549: break;
        case 201: 
          { return symbol(sym.SECOND);
          }
        case 550: break;
        case 202: 
          { return symbol(sym.SCROLL);
          }
        case 551: break;
        case 203: 
          { return symbol(sym.SCHEMA);
          }
        case 552: break;
        case 204: 
          { return symbol(sym.GLOBAL);
          }
        case 553: break;
        case 205: 
          { return symbol(sym.MODULE);
          }
        case 554: break;
        case 206: 
          { return symbol(sym.MINUTE);
          }
        case 555: break;
        case 207: 
          { return symbol(sym.VALUES);
          }
        case 556: break;
        case 208: 
          { return symbol(sym.DECLARE);
          }
        case 557: break;
        case 209: 
          { return symbol(sym.DECIMAL);
          }
        case 558: break;
        case 210: 
          { return symbol(sym.DEFAULT);
          }
        case 559: break;
        case 211: 
          { return symbol(sym.EXECUTE);
          }
        case 560: break;
        case 212: 
          { return symbol(sym.EXTRACT);
          }
        case 561: break;
        case 213: 
          { return symbol(sym.TRIGGER);
          }
        case 562: break;
        case 214: 
          { return symbol(sym.TSEQUAL);
          }
        case 563: break;
        case 215: 
          { return symbol(sym.RESTORE);
          }
        case 564: break;
        case 216: 
          { return symbol(sym.NATURAL);
          }
        case 565: break;
        case 217: 
          { return symbol(sym.NOCHECK);
          }
        case 566: break;
        case 218: 
          { return symbol(sym.NUMERIC);
          }
        case 567: break;
        case 219: 
          { return symbol(sym.LEADING);
          }
        case 568: break;
        case 220: 
          { return symbol(sym.PARTIAL);
          }
        case 569: break;
        case 221: 
          { return symbol(sym.PERCENT);
          }
        case 570: break;
        case 222: 
          { return symbol(sym.PREPARE);
          }
        case 571: break;
        case 223: 
          { return symbol(sym.PRIMARY);
          }
        case 572: break;
        case 224: 
          { return symbol(sym.OPENXML);
          }
        case 573: break;
        case 225: 
          { return symbol(sym.OFFSETS);
          }
        case 574: break;
        case 226: 
          { return symbol(sym.CATALOG);
          }
        case 575: break;
        case 227: 
          { return symbol(sym.CASCADE);
          }
        case 576: break;
        case 228: 
          { return symbol(sym.CONNECT);
          }
        case 577: break;
        case 229: 
          { return symbol(sym.CONVERT);
          }
        case 578: break;
        case 230: 
          { return symbol(sym.COLLATE);
          }
        case 579: break;
        case 231: 
          { return symbol(sym.COMPUTE);
          }
        case 580: break;
        case 232: 
          { return symbol(sym.CURRENT);
          }
        case 581: break;
        case 233: 
          { return symbol(sym.UNPIVOT);
          }
        case 582: break;
        case 234: 
          { return symbol(sym.UNKNOWN);
          }
        case 583: break;
        case 235: 
          { return symbol(sym.FOREIGN);
          }
        case 584: break;
        case 236: 
          { return symbol(sym.FORTRAN);
          }
        case 585: break;
        case 237: 
          { return symbol(sym.BETWEEN);
          }
        case 586: break;
        case 238: 
          { return symbol(sym.INTEGER);
          }
        case 587: break;
        case 239: 
          { return symbol(sym.INCLUDE);
          }
        case 588: break;
        case 240: 
          { return symbol(sym.SQLCODE);
          }
        case 589: break;
        case 241: 
          { return symbol(sym.SETUSER);
          }
        case 590: break;
        case 242: 
          { return symbol(sym.SECTION);
          }
        case 591: break;
        case 243: 
          { return symbol(sym.SESSION);
          }
        case 592: break;
        case 244: 
          { return symbol(sym.WAITFOR);
          }
        case 593: break;
        case 245: 
          { return symbol(sym.VARCHAR);
          }
        case 594: break;
        case 246: 
          { return symbol(sym.VARYING);
          }
        case 595: break;
        case 247: 
          { return symbol(sym.ALLOCATE);
          }
        case 596: break;
        case 248: 
          { return symbol(sym.ABSOLUTE);
          }
        case 597: break;
        case 249: 
          { return symbol(sym.DATABASE);
          }
        case 598: break;
        case 250: 
          { return symbol(sym.DEFERRED);
          }
        case 599: break;
        case 251: 
          { return symbol(sym.DESCRIBE);
          }
        case 600: break;
        case 252: 
          { return symbol(sym.DISTINCT);
          }
        case 601: break;
        case 253: 
          { return symbol(sym.EXTERNAL);
          }
        case 602: break;
        case 254: 
          { return symbol(sym.TEXTSIZE);
          }
        case 603: break;
        case 255: 
          { return symbol(sym.TRAILING);
          }
        case 604: break;
        case 256: 
          { return symbol(sym.TRUNCATE);
          }
        case 605: break;
        case 257: 
          { return symbol(sym.READTEXT);
          }
        case 606: break;
        case 258: 
          { return symbol(sym.RELATIVE);
          }
        case 607: break;
        case 259: 
          { return symbol(sym.RESTRICT);
          }
        case 608: break;
        case 260: 
          { return symbol(sym.ROLLBACK);
          }
        case 609: break;
        case 261: 
          { return symbol(sym.ROWCOUNT);
          }
        case 610: break;
        case 262: 
          { return symbol(sym.NATIONAL);
          }
        case 611: break;
        case 263: 
          { return symbol(sym.LANGUAGE);
          }
        case 612: break;
        case 264: 
          { return symbol(sym.PRESERVE);
          }
        case 613: break;
        case 265: 
          { return symbol(sym.POSITION);
          }
        case 614: break;
        case 266: 
          { return symbol(sym.OVERLAPS);
          }
        case 615: break;
        case 267: 
          { return symbol(sym.CASCADED);
          }
        case 616: break;
        case 268: 
          { return symbol(sym.COALESCE);
          }
        case 617: break;
        case 269: 
          { return symbol(sym.CONTAINS);
          }
        case 618: break;
        case 270: 
          { return symbol(sym.CONTINUE);
          }
        case 619: break;
        case 271: 
          { return symbol(sym.FREETEXT);
          }
        case 620: break;
        case 272: 
          { return symbol(sym.FUNCTION);
          }
        case 621: break;
        case 273: 
          { return symbol(sym.HOLDLOCK);
          }
        case 622: break;
        case 274: 
          { return symbol(sym.IDENTITY);
          }
        case 623: break;
        case 275: 
          { return symbol(sym.INTERVAL);
          }
        case 624: break;
        case 276: 
          { return symbol(sym.SQLERROR);
          }
        case 625: break;
        case 277: 
          { return symbol(sym.SQLSTATE);
          }
        case 626: break;
        case 278: 
          { return symbol(sym.SHUTDOWN);
          }
        case 627: break;
        case 279: 
          { return symbol(sym.SMALLINT);
          }
        case 628: break;
        case 280: 
          { return symbol(sym.WHENEVER);
          }
        case 629: break;
        case 281: 
          { return symbol(sym.ASSERTION);
          }
        case 630: break;
        case 282: 
          { return symbol(sym.EXCEPTION);
          }
        case 631: break;
        case 283: 
          { return symbol(sym.TEMPORARY);
          }
        case 632: break;
        case 284: 
          { return symbol(sym.TRANSLATE);
          }
        case 633: break;
        case 285: 
          { return symbol(sym.TIMESTAMP);
          }
        case 634: break;
        case 286: 
          { return symbol(sym.RAISERROR);
          }
        case 635: break;
        case 287: 
          { return symbol(sym.PRECISION);
          }
        case 636: break;
        case 288: 
          { return symbol(sym.PROCEDURE);
          }
        case 637: break;
        case 289: 
          { return symbol(sym.OPENQUERY);
          }
        case 638: break;
        case 290: 
          { return symbol(sym.CLUSTERED);
          }
        case 639: break;
        case 291: 
          { return symbol(sym.COLLATION);
          }
        case 640: break;
        case 292: 
          { return symbol(sym.CHARACTER);
          }
        case 641: break;
        case 293: 
          { return symbol(sym.INDICATOR);
          }
        case 642: break;
        case 294: 
          { return symbol(sym.INTERSECT);
          }
        case 643: break;
        case 295: 
          { return symbol(sym.INITIALLY);
          }
        case 644: break;
        case 296: 
          { return symbol(sym.ISOLATION);
          }
        case 645: break;
        case 297: 
          { return symbol(sym.IMMEDIATE);
          }
        case 646: break;
        case 298: 
          { return symbol(sym.SUBSTRING);
          }
        case 647: break;
        case 299: 
          { return symbol(sym.WRITETEXT);
          }
        case 648: break;
        case 300: 
          { return symbol(sym.DEALLOCATE);
          }
        case 649: break;
        case 301: 
          { return symbol(sym.DEFERRABLE);
          }
        case 650: break;
        case 302: 
          { return symbol(sym.DESCRIPTOR);
          }
        case 651: break;
        case 303: 
          { return symbol(sym.DISCONNECT);
          }
        case 652: break;
        case 304: 
          { return symbol(sym.REFERENCES);
          }
        case 653: break;
        case 305: 
          { return symbol(sym.ROWGUIDCOL);
          }
        case 654: break;
        case 306: 
          { return symbol(sym.PRIVILEGES);
          }
        case 655: break;
        case 307: 
          { return symbol(sym.OPENROWSET);
          }
        case 656: break;
        case 308: 
          { return symbol(sym.CONNECTION);
          }
        case 657: break;
        case 309: 
          { return symbol(sym.CONSTRAINT);
          }
        case 658: break;
        case 310: 
          { return symbol(sym.CHECKPOINT);
          }
        case 659: break;
        case 311: 
          { return symbol(sym.UPDATETEXT);
          }
        case 660: break;
        case 312: 
          { return symbol(sym.FILLFACTOR);
          }
        case 661: break;
        case 313: 
          { return symbol(sym.BIT_LENGTH);
          }
        case 662: break;
        case 314: 
          { return symbol(sym.SQLWARNING);
          }
        case 663: break;
        case 315: 
          { return symbol(sym.STATISTICS);
          }
        case 664: break;
        case 316: 
          { return symbol(sym.DIAGNOSTICS);
          }
        case 665: break;
        case 317: 
          { return symbol(sym.DISTRIBUTED);
          }
        case 666: break;
        case 318: 
          { return symbol(sym.TABLESAMPLE);
          }
        case 667: break;
        case 319: 
          { return symbol(sym.TRANSACTION);
          }
        case 668: break;
        case 320: 
          { return symbol(sym.TRANSLATION);
          }
        case 669: break;
        case 321: 
          { return symbol(sym.TRY_CONVERT);
          }
        case 670: break;
        case 322: 
          { return symbol(sym.REPLICATION);
          }
        case 671: break;
        case 323: 
          { return symbol(sym.RECONFIGURE);
          }
        case 672: break;
        case 324: 
          { return symbol(sym.CONSTRAINTS);
          }
        case 673: break;
        case 325: 
          { return symbol(sym.CHAR_LENGTH);
          }
        case 674: break;
        case 326: 
          { return symbol(sym.IDENTITYCOL);
          }
        case 675: break;
        case 327: 
          { return symbol(sym.INSENSITIVE);
          }
        case 676: break;
        case 328: 
          { return symbol(sym.SYSTEM_USER);
          }
        case 677: break;
        case 329: 
          { return symbol(sym.WITHINGROUP);
          }
        case 678: break;
        case 330: 
          { return symbol(sym.NONCLUSTERED);
          }
        case 679: break;
        case 331: 
          { return symbol(sym.OCTET_LENGTH);
          }
        case 680: break;
        case 332: 
          { return symbol(sym.CURRENT_DATE);
          }
        case 681: break;
        case 333: 
          { return symbol(sym.CURRENT_TIME);
          }
        case 682: break;
        case 334: 
          { return symbol(sym.CURRENT_USER);
          }
        case 683: break;
        case 335: 
          { return symbol(sym.SESSION_USER);
          }
        case 684: break;
        case 336: 
          { return symbol(sym.AUTHORIZATION);
          }
        case 685: break;
        case 337: 
          { return symbol(sym.TIMEZONE_HOUR);
          }
        case 686: break;
        case 338: 
          { return symbol(sym.CORRESPONDING);
          }
        case 687: break;
        case 339: 
          { return symbol(sym.CONTAINSTABLE);
          }
        case 688: break;
        case 340: 
          { return symbol(sym.FREETEXTTABLE);
          }
        case 689: break;
        case 341: 
          { return symbol(sym.SECURITYAUDIT);
          }
        case 690: break;
        case 342: 
          { return symbol(sym.OPENDATASOURCE);
          }
        case 691: break;
        case 343: 
          { return symbol(sym.TIMEZONE_MINUTE);
          }
        case 692: break;
        case 344: 
          { return symbol(sym.IDENTITY_INSERT);
          }
        case 693: break;
        case 345: 
          { return symbol(sym.CHARACTER_LENGTH);
          }
        case 694: break;
        case 346: 
          { return symbol(sym.CURRENT_TIMESTAMP);
          }
        case 695: break;
        case 347: 
          { return symbol(sym.SEMANTICKEYPHRASETABLE);
          }
        case 696: break;
        case 348: 
          { return symbol(sym.SEMANTICSIMILARITYTABLE);
          }
        case 697: break;
        case 349: 
          { return symbol(sym.SEMANTICSIMILARITYDETAILSTABLE);
          }
        case 698: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
