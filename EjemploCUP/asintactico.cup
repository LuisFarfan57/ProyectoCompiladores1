 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package ejemplocup;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }        
        m.append(" : "+message);
        m.append("\n");
        errores += m;
        //System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public static String errores;

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            errores = "";
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            //System.out.println("\n*** Resultados finales ***");            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           
Igual, Suma, Resta, Multiplicacion, Division, ClausulaKleant, Porcentaje, MenorQue, MayorQue, MenorIgual, MayorIgual, IgualA, DiferenteDe,
And, Or, SignoAdmiracionInverso, PuntoComa, Coma, Punto, AbrirCorchete, CerrarCorchete, AbrirParentesis, CerrarParentesis, AbrirLlave,
CerrarLlave, DobleCorchete, DobleParentesis, DobleLlave, Arroba, Numeral, DobleNumeral, ERROR, Ambos,
ErrorNuevaLineaCadena, ErrorApostrofeCadena, ErrorCadenaLarga, ErrorComentarioMulti, ErrorFloatPunto, ErrorFloatE, ErrorFloatMas, ErrorComentarioAnidado,
ErrorCadenaIncompleta, ADD,EXTERNAL,PROCEDURE,ALL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,AND,FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,
ASC,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,
REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,
CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,
SEMANTICSIMILARITYDETAILSTABLE,COMMIT,INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,
CONTAINSTABLE,KEY,SHUTDOWN,CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,
CURRENT_DATE,MERGE,TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,
NULL,TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,ON,UNION,DENY,OPEN,
UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,USER,
DROP,OR,VALUES,DUMP,ORDER,VARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,EXEC,PRECISION,
WITH,EXECUTE,PRIMARY,WITHINGROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,EXTRACT,POSITION,ALLOCATE,
FALSE,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,FORTRAN,ASSERTION,FOUND,AT,REAL,AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,
ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,CHAR_LENGTH,INDICATOR,CHARACTER,INITIALLY,CHARACTER_LENGTH,
SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,
SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,
MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,TRIM,MONTH,TRUE,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,
UPPER,DEFERRED,NO,USAGE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,DOMAIN,ONLY,WHENEVER,WORK,WRITE,
YEAR,OUTPUT,ZONE,EXCEPTION,NONE;

terminal Integer Numero, Bit;
terminal Identificador, Cadena;
terminal Float Float;

/* No terminales usados en la seccion gramatical. */

non terminal Object Start, Start1, Truncate, TableRef, TableRef1, TableRef2, ColumnRef, ColumnRef1, Fin_state, TopExpression, Sig_top, IfExists, AscDesc,
Constraint, Constraint1, Constraint3, DataType, Varchar, VarOp, ConstantTerm, Expression, Expression2, Expression3, FExpression, TExpression,
ExpressionOpcion, Predicado, Escape_exp, Cont_exp, StateLogic, State1, Search_condition, OtroSearch, Logic_word, Result_exp, Compare, Not, 
ColumnDef, ColumnDef1, ColumnDef3, Value, Function, FAvg, FCount, FCount1, FCount2, FMax, FMin, FSum, Case, Const, Case1, Case2, WhereExpression,
Insert, Into, Insert1, Insert2, Insert3, Insert4, Insert5, Delete, From, Delete1, Update, Update1, Update2, Update3, Update4, Update55, Update5,
Update6814, Update6, Update7, Update8, Update9, Update1011, Update10, Update11, Update12, Update13, Update14, Rep, FromU1, FromU2, FromU3, WhereU1,
Select, Selaction, Sigexp, Groupby_exp, Siggroup, Group_state, Having_exp, Orderby_exp, Orderby_exp1, Sigorder, Selstate, Option, Search_conditionHaving,
PredicadoHaving, OtroSearchHaving, SelectExpression, ColExp, Sig_as, OtroSelect, TableExp, Alias_tabla, Join_tabla, On_exp, Outer_exp, Cast_exp, Lenght_exp,
Convert_exp, Create, CreateX, CreateTable, Create1, Create2, Create3, Create4, CreateIndex,Unique, Clustered, Index1, Index3, Index4, Index5, Index6, Index7,
CreateDatabase, Database2, Primary, Database3, Database4, Database6, CreateUser, User12, User6, With, User7, User8, CreateView, OrAlter, Col,
View1, View2, View3, View4, With2, Alter, AlterX, AlterTable, AlterT, AlterTColumn, NulNot, AlterTAdd, AlterAdd1, AlterTAdd2, RepAdd, AlterTDrop,
AlterTDrop1, ConsCol, AlterTDrop2, AlterTDrop3, RepDrop, AlterDatabase, Name, AlterD1, AlterD2, AlterD3, AlterView, AlterViewCol, AlterViewCol1,
AlterViewCheck, AlterIndex, IndexName, Drop, Droppers, Drop_table, SigDrop_table, Drop_view, SigDrop_view, Drop_database, SigDrop_db_user, Drop_user,
Drop_index, Find_index, Sigcolumn, SigId, ConstraintOpciones, Predicado1, State2, Identity, ColumnDef13, OnPrimary, AbrirParentesis1, CerrarParentesis1,

Go, AscDesc1, AlterTDrop4, 

BeginTransaction, NombreTran,
Commit, Commit1, Commit2, Rollback, Savepoint, Savepoint1, End,
Procedure, Proc, Procedure1, Procedure2, Parametros, Varying, Varying1,
ValorParametro, ValorParametro1, OutputOp, OutputOp1, RepParametro, Execute,
RepParametro1, Stmts, Stmts1, Stmts2, Stmt, FuncionesT, Cursor, Cursor1, Variable, MandarParametros, MasParametro, ExecProcedureFunction,
Transaction, As, As1, Rollback1, LikeIgual, SetVariables, DeclararVariables, Database7, Database8, Database9, Database10;

/* -------------------------------Precedencia ------------------------------------*/


precedence left ASC;
precedence left DESC;
precedence left NOT;
precedence left NULL;

/* ------------------- Seccion de la gramatica ------------------------ */       


start with Start;

Start ::= Start1 | ;

Start1 ::= Stmt Start | error Start;

Stmt ::= Insert | Update | Delete | Truncate | Create | Alter | Drop | Select | Cursor | DeclararVariables | SetVariables |
		BeginTransaction | Commit | Rollback | Savepoint | Procedure | FuncionesT | ExecProcedureFunction;

TableRef ::= Identificador TableRef1;
TableRef1 ::= Punto Identificador TableRef2 | ;
TableRef2 ::= Punto Identificador | ;

ColumnRef ::= Identificador ColumnRef1;
ColumnRef1 ::= Punto Identificador | ;

TopExpression ::= TOP AbrirParentesis Numero CerrarParentesis Sig_top | ;
Sig_top ::= PERCENT | ;

IfExists ::= IF EXISTS | ;

AscDesc ::= ASC | DESC | ;

Fin_state ::= Ambos | PuntoComa | GO;

Constraint ::= CONSTRAINT Identificador ConstraintOpciones;
Constraint1 ::= Identificador AscDesc Constraint3;
Constraint3 ::= Coma Constraint1 | ;
ConstraintOpciones ::= PRIMARY KEY Clustered AbrirParentesis Constraint1 CerrarParentesis | CHECK AbrirParentesis Predicado CerrarParentesis
						| FOREIGN KEY AbrirParentesis ColumnRef CerrarParentesis REFERENCES TableRef AbrirParentesis ColumnRef CerrarParentesis;

DataType ::= INT | FLOAT | BIT | Varchar;
Varchar ::= VARCHAR VarOp;
VarOp ::= AbrirParentesis Numero CerrarParentesis;

ConstantTerm ::= Expression | Function | Case;

Expression ::= TExpression Expression2;
Expression2 ::= Suma TExpression | Resta TExpression | ;
TExpression ::= FExpression Expression3;
Expression3 ::= Multiplicacion FExpression | Division FExpression | ;
FExpression ::= AbrirParentesis Expression CerrarParentesis | ExpressionOpcion;
ExpressionOpcion ::= TableRef | Value;

/*Predicado ::= Expression StateLogic |
			Cadena Predicado1 | 			
			CONTAINS AbrirParentesis Cont_exp CerrarParentesis | 
			FREETEXT AbrirParentesis Cont_exp CerrarParentesis;
Escape_exp ::= ESCAPE Cadena | ;
Cont_exp ::= TableRef Coma Cadena | Multiplicacion Coma Cadena;
Predicado1 ::= NOT LikeIgual Cadena Escape_exp | LikeIgual Cadena Escape_exp;
LikeIgual ::= LIKE | Igual;*/

Predicado ::= Expression StateLogic |
			Cadena StateLogic | 			
			CONTAINS AbrirParentesis Cont_exp CerrarParentesis | 
			FREETEXT AbrirParentesis Cont_exp CerrarParentesis;
Escape_exp ::= ESCAPE Cadena | ;
Cont_exp ::= TableRef Coma Cadena | Multiplicacion Coma Cadena;
Predicado1 ::= NOT LikeIgual Cadena Escape_exp | LikeIgual Cadena Escape_exp;
LikeIgual ::= LIKE | Igual;
			
StateLogic ::= Compare ConstantTerm | IS State2 | Not State1 | Predicado1;
State2 ::= NOT NULL | NULL;
State1 ::= IN Expression | BETWEEN Expression AND Expression;

Search_condition ::= Not Predicado OtroSearch;// | AbrirParentesis Search_condition CerrarParentesis;
OtroSearch ::= Logic_word Search_condition | ;
Logic_word ::= AND | OR;

Result_exp ::= Expression | Cadena;

Compare ::= DiferenteDe | MenorIgual | MayorIgual | Igual | MenorQue | MayorQue;

Not ::= NOT | ;

ColumnDef ::= ColumnRef DataType Identity ColumnDef1 ColumnDef3;
ColumnDef1 ::= NOT NULL | NULL | ;
Identity ::= IDENTITY AbrirParentesis Numero Coma Numero CerrarParentesis | ;
ColumnDef3 ::= PRIMARY KEY AscDesc | ;

Value ::= Numero | Bit | Float;

Function ::= FAvg | FCount | FMax | FMin | FSum;

FAvg ::= AVG AbrirParentesis ConstantTerm CerrarParentesis;

FCount ::= COUNT AbrirParentesis FCount1 FCount2 CerrarParentesis;
FCount1 ::= DISTINCT | ;
FCount2 ::= Multiplicacion | ConstantTerm;

FMax ::= MAX AbrirParentesis ConstantTerm CerrarParentesis;

FMin ::= MIN AbrirParentesis ConstantTerm CerrarParentesis;

FSum ::= SUM AbrirParentesis ConstantTerm CerrarParentesis;

Case ::= CASE Const Case1 Case2 END;
Const ::= ConstantTerm | ;
Case1 ::= WHEN Search_condition THEN Result_exp Case1 | ;
Case2 ::= ELSE Result_exp | ;

WhereExpression ::= WHERE Search_condition;

//Insert:

Insert ::= INSERT Into TableRef Insert1 VALUES AbrirParentesis Insert4 CerrarParentesis Fin_state;
Into ::= INTO | ;
Insert1 ::= AbrirParentesis Insert2 CerrarParentesis | ;
Insert2 ::= ColumnRef Insert3;
Insert3 ::= Coma Insert2 | ;
Insert4 ::= ConstantTerm Insert5 | Cadena Insert5;
Insert5 ::= Coma Insert4 | ;

//Delete:

Delete ::= DELETE TopExpression From TableRef Delete1 Fin_state;
From ::= FROM | ;
Delete1 ::= WHERE Search_condition | ;

//Update:

Update ::= UPDATE TopExpression TableRef Update2 SET Update55 FromU1 WhereU1 Fin_state;
Update2 ::= WITH Update3 | ;
Update3 ::= TableRef Update4;
Update4 ::= Coma Update3 | ;
Update55 ::= Update5 Rep;
Update5 ::= Identificador Update6814;
Update6814 ::= Update6 | Update8 | Update14;
Update6 ::= Igual Update7;
Update7 ::= Expression | DEFAULT | NULL;
Update8 ::= Punto Update9;
Update9 ::= Identificador Update1011;
Update1011 ::= Update10 | Update11;
Update10 ::= Igual Expression;
Update11 ::= AbrirParentesis Update12 CerrarParentesis;
Update12 ::= Expression Update13;
Update13 ::= Coma Update12 | ;
Update14 ::= AbrirParentesis Punto WRITE AbrirParentesis Expression Coma Numero Coma Numero CerrarParentesis;
Rep ::= Coma Update55 | ;
FromU1 ::= FROM FromU2 | ;
FromU2 ::= TableRef FromU3;
FromU3 ::= Coma FromU2 | ;
WhereU1 ::= WhereExpression | ;

//Select:

Select ::= SELECT Selstate Selaction | AbrirParentesis Select CerrarParentesis;
Selaction ::=  FROM TableExp Sigexp Groupby_exp Having_exp Orderby_exp Fin_state;
Sigexp ::= WHERE Search_condition | ;
Groupby_exp ::= GROUP BY Group_state | ;
Siggroup ::= Coma Group_state | ;
Group_state ::= TableRef Siggroup | Case Siggroup;// | AbrirParentesis Group_state CerrarParentesis;
Having_exp ::= HAVING Search_conditionHaving | ;
Orderby_exp ::= ORDER BY Orderby_exp1 | AbrirParentesis Orderby_exp CerrarParentesis | ;
Orderby_exp1 ::= ConstantTerm Sigorder AscDesc;
Sigorder ::= Coma Orderby_exp1 | ;
Selstate ::= Option TopExpression SelectExpression;
Option ::= DISTINCT | ALL | ;

Search_conditionHaving ::= Not PredicadoHaving OtroSearchHaving;
PredicadoHaving ::= Expression StateLogic | Function StateLogic
			Cadena StateLogic | 
			CONTAINS AbrirParentesis Cont_exp CerrarParentesis | 
			FREETEXT AbrirParentesis Cont_exp CerrarParentesis;	
OtroSearchHaving ::= Logic_word Search_conditionHaving | ;

SelectExpression ::= Multiplicacion ColExp OtroSelect | Case ColExp OtroSelect | 
	Cadena ColExp OtroSelect | Function ColExp OtroSelect  | 
	Expression ColExp OtroSelect | CAST AbrirParentesis Cast_exp CerrarParentesis  | CONVERT AbrirParentesis Convert_exp CerrarParentesis;

ColExp ::= AS Sig_as | ;
Sig_as ::= Identificador | Cadena;
OtroSelect ::=  Coma SelectExpression | ;

TableExp ::= AbrirParentesis TableExp CerrarParentesis | TableRef Alias_tabla Join_tabla;
Alias_tabla ::= Identificador | AS Identificador | ;
Join_tabla ::= FULL Outer_exp  JOIN TableRef Alias_tabla On_exp Join_tabla |
	LEFT Outer_exp JOIN TableRef Alias_tabla On_exp Join_tabla |
	RIGHT Outer_exp JOIN TableRef Alias_tabla On_exp Join_tabla |
	INNER JOIN TableRef Alias_tabla On_exp Join_tabla | 
	JOIN TableRef Alias_tabla On_exp Join_tabla | ;

On_exp ::= AbrirParentesis ON TableRef Igual TableRef CerrarParentesis| ON TableRef Igual TableRef;
Outer_exp ::= OUTER | ;

Cast_exp ::= Expression AS DataType Lenght_exp | CAST AbrirParentesis Cast_exp CerrarParentesis;
Lenght_exp ::= AbrirParentesis Numero CerrarParentesis | ;
Convert_exp ::= DataType Lenght_exp Coma Expression | CONVERT AbrirParentesis Convert_exp CerrarParentesis;

//Create:

Create ::= CREATE CreateX Fin_state;
CreateX ::= CreateTable | CreateView | CreateDatabase | CreateUser | CreateIndex;

CreateTable ::= TABLE TableRef AbrirParentesis Create1 CerrarParentesis OnPrimary;
Create1 ::= ColumnDef Create2 | Create3;
Create2 ::= Coma Create1 | ;
Create3 ::= Constraint Create4 | ;
Create4 ::= Coma Create3 | ;
OnPrimary ::= ON PRIMARY | ;

CreateIndex ::= Unique Clustered INDEX Identificador ON TableRef AbrirParentesis Index1 CerrarParentesis
		Index4 Index7;
Unique ::= UNIQUE | ;
Clustered ::=  CLUSTERED | NONCLUSTERED | ;
Index1 ::= ColumnRef AscDesc Index3;
Index3 ::= Coma Index1 | ;
Index4 ::= INCLUDE AbrirParentesis Index5 CerrarParentesis | ;
Index5 ::= ColumnRef Index6;
Index6 ::= Coma Index5 | ;
Index7 ::= WHERE Search_condition | ;

CreateDatabase ::= DATABASE Identificador Database2 Database6 Database7;
Database2 ::= ON Primary Database3 | ;
Primary ::= PRIMARY | ;
Database3 ::= Identificador Database4 | ;
Database4 ::= Coma Database3 | ;
Database6 ::= COLLATE Identificador | ;
Database7 ::= AbrirParentesis NAMES Igual Cadena Database8 CerrarParentesis Database10 | ;
Database8 ::= Coma FILE Igual Cadena Database9 | ;
Database9 ::= Coma SIZE Igual Numero | ;
Database10 ::= Coma Database7 | ;

CreateUser ::= USER User12;
User12 ::= Identificador User6;
User6 ::= With Identificador | ;
With ::= WITH | ;

CreateView ::= OrAlter VIEW ColumnRef View2 AS Select With2;
OrAlter ::= OR ALTER | ;
View2 ::= WITH View3 | ;
View3 ::= Identificador View4;
View4 ::= Coma View3 | ;
With2 ::= WITH CHECK OPTION | ;

//Alter:

Alter ::= ALTER AlterX Fin_state;
AlterX ::= AlterTable | AlterDatabase | AlterView | AlterIndex;

AlterTable ::= TABLE TableRef AlterT;
AlterT ::= AlterTColumn | AlterTAdd | AlterTDrop;

AlterTColumn ::= ALTER COLUMN ColumnDef NulNot;
NulNot ::= NULL | NOT NULL | ;

AlterTAdd ::= ADD AlterAdd1;
AlterAdd1 ::= AlterTAdd2 RepAdd;
AlterTAdd2 ::= ColumnDef | Constraint;
RepAdd ::= Coma AlterAdd1 | ;

AlterTDrop ::= DROP AlterTDrop1;
AlterTDrop1 ::= ConsCol IfExists AlterTDrop2 RepDrop;
ConsCol ::= CONSTRAINT | COLUMN;
AlterTDrop2 ::= Identificador | AlterTDrop4;
AlterTDrop4 ::= Coma AlterTDrop2;
//AlterTDrop3 ::= Coma AlterTDrop2;
RepDrop ::= Coma AlterTDrop1 | ;

AlterDatabase ::= DATABASE Name AlterD1;
Name ::= Identificador | CURRENT;
AlterD1 ::= COLLATE Identificador | SET AlterD2 WITH AlterD2;
AlterD2 ::= Identificador AlterD3;
AlterD3 ::= Coma AlterD2 | ;

AlterView ::= VIEW TableRef  AS Select AlterViewCheck;
AlterViewCheck ::= WITH CHECK OPTION | ;

AlterIndex ::= INDEX IndexName ON TableRef;
IndexName ::= Identificador | ALL;

//Drop:

Drop ::= DROP Droppers Fin_state;
Droppers ::= Drop_table | Drop_view | Drop_database | Drop_user | Drop_index;

Drop_table ::= TABLE IfExists TableRef SigDrop_table;
SigDrop_table ::= Coma TableRef SigDrop_table | ;


Drop_view ::= VIEW IfExists ColumnRef SigDrop_view;
SigDrop_view ::= Coma ColumnRef SigDrop_view | ;


Drop_database ::= DATABASE IfExists Identificador SigDrop_db_user;
SigDrop_db_user ::= Coma Identificador SigDrop_db_user | ;


Drop_user ::= USER IfExists Identificador SigDrop_db_user;


Drop_index ::= INDEX IfExists Identificador Find_index;
Find_index ::= TableRef Sigcolumn | ON TableRef SigId;
Sigcolumn ::= Coma TableRef Sigcolumn | ;
SigId ::= Coma TableRef Find_index | ;

//Truncate:

Truncate ::= TRUNCATE TABLE TableRef Fin_state;

//Fase 2------------------------------------------------------

Variable ::= Arroba Identificador;
Transaction ::= TRAN | TRANSACTION;

DeclararVariables ::= DECLARE Variable DataType Fin_state;
SetVariables ::= SET Variable Igual ConstantTerm Fin_state;

Stmts ::= Stmt Stmts1;
Stmts1 ::= Stmts | ;

//Begin Transaction:

BeginTransaction ::= BEGIN Transaction NombreTran Fin_state;
NombreTran ::= Identificador | Variable | ;

//Commit:

Commit ::= COMMIT Commit1 Fin_state;
Commit1 ::= Transaction Commit2 | ;
Commit2 ::= Identificador | Variable | ;

//Rollback:

Rollback ::= ROLLBACK Rollback1 Commit2 Fin_state;
Rollback1 ::= Transaction | ;

//Savepoint:

Savepoint ::= SAVE Transaction Savepoint1 Fin_state;
Savepoint1 ::= Identificador | Variable;

//Store procedures:

Procedure ::= CREATE OrAlter Proc ColumnRef Procedure2 Procedure1 AS BEGIN Stmts END Fin_state;
Proc ::= PROC | PROCEDURE;
Procedure2 ::= PuntoComa Numero | ;
Procedure1 ::= AbrirParentesis1 Parametros CerrarParentesis1 | ;
Parametros ::= Variable DataType Varying ValorParametro OutputOp RepParametro;
Varying ::= Varying1 | ;
Varying1 ::= VARYING;
ValorParametro ::= ValorParametro1 |  ;
ValorParametro1 ::= Igual ConstantTerm;
OutputOp ::= OutputOp1 |  ;
OutputOp1 ::= OUTPUT;
RepParametro ::= RepParametro1 |  ;
RepParametro1 ::= Coma Parametros;
AbrirParentesis1 ::= AbrirParentesis | ;
CerrarParentesis1 ::= CerrarParentesis | ;

ExecProcedureFunction ::= Execute TableRef MandarParametros Fin_state;
MandarParametros ::= ConstantTerm MasParametro | Variable MasParametro | ;
MasParametro ::= Coma MandarParametros | ;
Execute ::= EXEC | EXECUTE;

//Funciones:

FuncionesT ::= CREATE OrAlter FUNCTION ColumnRef Procedure1 RETURN DataType As BEGIN Stmts RETURN ConstantTerm END Fin_state;
As ::= As1 |  ;
As1 ::= AS;

//Cursor

Cursor ::= DECLARE Identificador CURSOR FOR Select Fin_state;