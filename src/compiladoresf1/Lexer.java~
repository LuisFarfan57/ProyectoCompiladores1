/* The following code was generated by JFlex 1.4.3 on 30/09/19 03:04 PM */

package compiladoresf1;
import static compiladoresf1.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/09/19 03:04 PM from the specification file
 * <tt>C:/Users/luise/ProyectoCompiladores1/src/compiladoresf1/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\7\2\0\1\6\22\0\1\5\1\57\1\0\1\72"+
    "\1\0\1\54\1\60\1\12\1\65\1\66\1\11\1\51\1\4\1\15"+
    "\1\10\1\14\1\52\1\52\10\3\1\0\1\62\1\55\1\53\1\56"+
    "\1\0\1\71\1\16\1\34\1\30\1\17\1\20\1\32\1\40\1\33"+
    "\1\35\1\47\1\42\1\25\1\43\1\24\1\27\1\26\1\1\1\23"+
    "\1\36\1\22\1\31\1\45\1\44\1\21\1\37\1\41\1\63\1\0"+
    "\1\64\1\0\1\46\1\0\4\2\1\50\25\2\1\67\1\61\1\70"+
    "\1\13\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\30\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\0"+
    "\1\35\1\36\1\3\1\5\1\2\1\37\6\2\1\40"+
    "\20\2\1\41\12\2\1\42\15\2\1\43\1\44\3\2"+
    "\1\45\31\2\1\46\1\2\1\47\1\50\1\51\21\2"+
    "\1\52\17\2\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\3\0\1\65\1\0\1\66"+
    "\1\36\1\0\1\36\2\0\2\5\1\67\1\70\1\71"+
    "\1\72\1\73\1\2\1\74\3\2\1\75\1\2\1\76"+
    "\1\2\1\77\3\2\1\100\16\2\1\101\11\2\1\102"+
    "\23\2\1\103\17\2\1\104\20\2\1\105\26\2\1\106"+
    "\6\2\1\107\17\2\1\110\2\2\1\111\7\2\1\112"+
    "\1\2\1\113\12\2\1\114\5\2\1\115\5\2\1\116"+
    "\1\2\1\117\4\2\1\120\12\2\1\121\1\0\1\122"+
    "\1\0\1\36\1\0\1\36\2\0\7\2\1\123\1\2"+
    "\1\124\5\2\1\125\1\126\2\2\1\127\1\130\3\2"+
    "\1\131\1\132\3\2\1\133\2\2\1\134\4\2\1\135"+
    "\1\2\1\136\2\2\1\137\1\2\1\140\1\141\2\2"+
    "\1\142\1\143\12\2\1\144\1\2\1\145\4\2\1\146"+
    "\1\147\3\2\1\150\2\2\1\151\1\2\1\152\1\2"+
    "\1\153\3\2\1\154\6\2\1\155\4\2\1\156\4\2"+
    "\1\157\1\160\5\2\1\161\1\2\1\162\1\163\22\2"+
    "\1\164\10\2\1\165\4\2\1\166\5\2\1\167\1\2"+
    "\1\170\3\2\1\171\5\2\1\172\1\173\5\2\1\174"+
    "\13\2\1\175\11\2\1\176\4\2\1\177\2\2\1\200"+
    "\3\2\1\201\1\202\1\203\7\2\1\204\1\2\1\205"+
    "\1\2\1\206\3\2\1\207\1\210\1\33\1\34\2\0"+
    "\1\211\32\2\1\212\30\2\1\213\2\2\1\214\2\2"+
    "\1\215\4\2\1\216\1\217\1\220\10\2\1\221\1\222"+
    "\4\2\1\223\1\224\6\2\1\225\6\2\1\226\1\227"+
    "\12\2\1\230\6\2\1\231\2\2\1\232\2\2\1\233"+
    "\1\234\1\235\1\236\1\237\1\2\1\240\2\2\1\241"+
    "\1\2\1\242\5\2\1\243\1\244\3\2\1\245\3\2"+
    "\1\246\1\247\7\2\1\250\13\2\1\251\6\2\1\252"+
    "\1\253\1\2\1\254\1\255\1\2\1\256\2\2\1\257"+
    "\1\260\1\2\1\261\3\2\1\262\2\0\1\2\1\263"+
    "\5\2\1\264\5\2\1\265\1\266\7\2\1\267\1\270"+
    "\1\271\1\272\16\2\1\273\6\2\1\274\1\275\7\2"+
    "\1\276\3\2\1\277\1\2\1\300\10\2\1\301\4\2"+
    "\1\302\1\2\1\303\4\2\1\304\11\2\1\305\1\2"+
    "\1\306\1\2\1\307\4\2\1\310\1\2\1\311\5\2"+
    "\1\312\1\2\1\313\1\2\1\314\10\2\1\315\10\2"+
    "\1\316\1\2\1\317\4\2\1\320\1\321\4\2\1\322"+
    "\1\323\1\324\6\2\1\325\2\0\6\2\1\326\1\327"+
    "\1\330\10\2\1\331\1\2\1\332\10\2\1\333\3\2"+
    "\1\334\7\2\1\335\3\2\1\336\2\2\1\337\1\340"+
    "\1\2\1\341\1\342\1\343\1\344\3\2\1\345\4\2"+
    "\1\346\2\2\1\347\1\2\1\350\1\351\5\2\1\352"+
    "\1\2\1\353\1\354\1\2\1\355\1\356\3\2\1\357"+
    "\1\360\2\2\1\361\1\362\3\2\1\363\5\2\1\364"+
    "\1\365\5\2\1\366\2\2\1\367\1\370\1\2\1\371"+
    "\6\2\1\372\3\2\1\373\1\374\1\375\1\376\1\2"+
    "\1\377\1\2\1\u0100\2\2\1\u0101\1\2\1\u0102\2\2"+
    "\1\u0103\1\2\1\u0104\2\2\1\u0105\3\2\1\u0106\1\u0107"+
    "\4\2\1\u0108\1\u0109\3\2\1\u010a\1\u010b\1\u010c\1\2"+
    "\1\u010d\1\2\1\u010e\1\2\1\u010f\2\2\1\u0110\4\2"+
    "\1\u0111\1\u0112\1\2\1\u0113\1\2\1\u0114\1\u0115\10\2"+
    "\1\u0116\1\u0117\1\2\1\u0118\1\2\1\u0119\2\2\1\u011a"+
    "\4\2\1\u011b\1\u011c\6\2\1\u011d\1\2\1\u011e\1\2"+
    "\1\u011f\2\2\1\u0120\6\2\1\u0121\1\2\1\u0122\1\2"+
    "\1\u0123\2\2\1\u0124\1\2\1\u0125\5\2\1\u0126\1\u0127"+
    "\1\2\1\u0128\3\2\1\u0129\4\2\1\u012a\3\2\1\u012b"+
    "\10\2\1\u012c\1\u012d\1\u012e\1\2\1\u012f\1\u0130\6\2"+
    "\1\u0131\1\2\1\u0132\2\2\1\u0133\1\u0134\1\u0135\2\2"+
    "\1\u0136\10\2\1\u0137\1\u0138\1\2\1\u0139\1\2\1\u013a"+
    "\3\2\1\u013b\1\u013c\5\2\1\u013d\1\u013e\1\2\1\u013f"+
    "\1\u0140\3\2\1\u0141\4\2\1\u0142\3\2\1\u0143\1\u0144"+
    "\1\u0145\1\u0146\1\u0147\1\u0148\2\2\1\u0149\1\u014a\5\2"+
    "\1\u014b\4\2\1\u014c\1\2\1\u014d\1\2\1\u014e\4\2"+
    "\1\u014f\1\u0150\3\2\1\u0151\1\2\1\u0152\2\2\1\u0153"+
    "\1\u0154\1\u0155\4\2\1\u0156\2\2\1\u0157\1\u0158\2\2"+
    "\1\u0159\1\u015a\2\2\1\u015b\1\2\1\u015c\3\2\1\u015d"+
    "\5\2\1\u015e\2\2\1\u015f\3\2\1\u0160\2\2\1\u0161"+
    "\17\2\1\u0162\1\2\1\u0163\6\2\1\u0164";

  private static int [] zzUnpackAction() {
    int [] result = new int[1417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\73"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\73\0\261\0\u079b\0\73\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\73\0\u08fd\0\73\0\u0938"+
    "\0\73\0\u0973\0\73\0\73\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\166\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\166\0\u1e31"+
    "\0\u1e6c\0\166\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u267d\0\u26b8"+
    "\0\u26f3\0\73\0\u0ad5\0\73\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\73\0\166\0\166\0\166\0\166\0\166"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\166\0\u29b7\0\166"+
    "\0\u29f2\0\166\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\166\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\166\0\u3066"+
    "\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\166\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\166\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928"+
    "\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8"+
    "\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0"+
    "\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98"+
    "\0\u4bd3\0\166\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\166"+
    "\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\166\0\u4e5c\0\166"+
    "\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034"+
    "\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u26b8\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\166"+
    "\0\u5581\0\166\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\166\0\u571e\0\u5759\0\166\0\166\0\u5794\0\u57cf\0\u580a"+
    "\0\166\0\u5845\0\u5880\0\u58bb\0\u58f6\0\166\0\u5931\0\u596c"+
    "\0\166\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\166"+
    "\0\u5b09\0\u5b44\0\166\0\u5b7f\0\166\0\u5bba\0\u5bf5\0\u5c30"+
    "\0\u5c6b\0\166\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd"+
    "\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\166\0\u5ef4\0\166\0\u5f2f"+
    "\0\u5f6a\0\u5fa5\0\u5fe0\0\166\0\166\0\u601b\0\u6056\0\u6091"+
    "\0\u60cc\0\u6107\0\u6142\0\166\0\u617d\0\166\0\u61b8\0\166"+
    "\0\u61f3\0\u622e\0\u6269\0\166\0\u62a4\0\u62df\0\u631a\0\u6355"+
    "\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\166"+
    "\0\u652d\0\u6568\0\u65a3\0\u65de\0\166\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\166\0\166\0\u67f1"+
    "\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9"+
    "\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1"+
    "\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79"+
    "\0\u6db4\0\u6def\0\166\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\166"+
    "\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\166\0\u703d\0\166"+
    "\0\u7078\0\u70b3\0\u70ee\0\166\0\u7129\0\u7164\0\u719f\0\u71da"+
    "\0\u7215\0\166\0\166\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c"+
    "\0\166\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9"+
    "\0\u7514\0\u754f\0\u758a\0\u75c5\0\166\0\u7600\0\u763b\0\u7676"+
    "\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\166\0\u7813"+
    "\0\u784e\0\u7889\0\u78c4\0\166\0\u78ff\0\u793a\0\166\0\u7975"+
    "\0\u79b0\0\u79eb\0\166\0\166\0\166\0\u7a26\0\u7a61\0\u7a9c"+
    "\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\166\0\u7bc3\0\u7bfe\0\u7c39"+
    "\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\166\0\166\0\u5247\0\u5282"+
    "\0\u7d60\0\u7d9b\0\166\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2"+
    "\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a"+
    "\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272"+
    "\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a"+
    "\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622"+
    "\0\u865d\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa"+
    "\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\166\0\u8997"+
    "\0\u89d2\0\166\0\u8a0d\0\u8a48\0\166\0\u8a83\0\u8abe\0\u8af9"+
    "\0\u8b34\0\166\0\166\0\166\0\u8b6f\0\u8baa\0\u8be5\0\u8c20"+
    "\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\166\0\166\0\u8d47\0\u8d82"+
    "\0\u8dbd\0\u8df8\0\166\0\166\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4"+
    "\0\u8f1f\0\u8f5a\0\166\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081"+
    "\0\u90bc\0\166\0\166\0\u90f7\0\u9132\0\u916d\0\u91a8\0\u91e3"+
    "\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\166\0\u9345\0\u9380"+
    "\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2\0\u951d\0\166"+
    "\0\u9558\0\u9593\0\166\0\166\0\166\0\166\0\166\0\u95ce"+
    "\0\166\0\u9609\0\u9644\0\166\0\u967f\0\166\0\u96ba\0\u96f5"+
    "\0\u9730\0\u976b\0\u97a6\0\166\0\166\0\u97e1\0\u981c\0\u9857"+
    "\0\166\0\u9892\0\u98cd\0\u9908\0\166\0\166\0\u9943\0\u997e"+
    "\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\166\0\u9ae0\0\u9b1b"+
    "\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3"+
    "\0\u9d2e\0\166\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90"+
    "\0\166\0\166\0\u9ecb\0\166\0\166\0\u9f06\0\166\0\u9f41"+
    "\0\u9f7c\0\u9fb7\0\166\0\u9ff2\0\166\0\ua02d\0\ua068\0\ua0a3"+
    "\0\ua0de\0\ua119\0\ua154\0\ua18f\0\166\0\ua1ca\0\ua205\0\ua240"+
    "\0\ua27b\0\ua2b6\0\166\0\ua2f1\0\ua32c\0\ua367\0\ua3a2\0\ua3dd"+
    "\0\166\0\166\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\ua504\0\ua53f"+
    "\0\ua57a\0\ua5b5\0\166\0\166\0\166\0\ua5f0\0\ua62b\0\ua666"+
    "\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e"+
    "\0\ua879\0\ua8b4\0\ua8ef\0\166\0\ua92a\0\ua965\0\ua9a0\0\ua9db"+
    "\0\uaa16\0\uaa51\0\166\0\166\0\uaa8c\0\uaac7\0\uab02\0\uab3d"+
    "\0\uab78\0\uabb3\0\uabee\0\166\0\uac29\0\uac64\0\uac9f\0\166"+
    "\0\uacda\0\166\0\uad15\0\uad50\0\uad8b\0\uadc6\0\uae01\0\uae3c"+
    "\0\uae77\0\uaeb2\0\166\0\uaeed\0\uaf28\0\uaf63\0\uaf9e\0\166"+
    "\0\uafd9\0\166\0\ub014\0\ub04f\0\ub08a\0\ub0c5\0\166\0\ub100"+
    "\0\ub13b\0\ub176\0\ub1b1\0\ub1ec\0\ub227\0\ub262\0\ub29d\0\ub2d8"+
    "\0\166\0\ub313\0\166\0\ub34e\0\166\0\ub389\0\ub3c4\0\ub3ff"+
    "\0\ub43a\0\166\0\ub475\0\ub4b0\0\ub4eb\0\ub526\0\ub561\0\ub59c"+
    "\0\ub5d7\0\166\0\ub612\0\166\0\ub64d\0\166\0\ub688\0\ub6c3"+
    "\0\ub6fe\0\ub739\0\ub774\0\ub7af\0\ub7ea\0\ub825\0\166\0\ub860"+
    "\0\ub89b\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\166"+
    "\0\uba38\0\166\0\uba73\0\ubaae\0\ubae9\0\ubb24\0\166\0\166"+
    "\0\ubb5f\0\ubb9a\0\ubbd5\0\ubc10\0\166\0\166\0\166\0\ubc4b"+
    "\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\ubd72\0\166\0\ubdad\0\ubde8"+
    "\0\ube23\0\ube5e\0\ube99\0\ubed4\0\ubf0f\0\ubf4a\0\166\0\166"+
    "\0\166\0\ubf85\0\ubfc0\0\ubffb\0\uc036\0\uc071\0\uc0ac\0\uc0e7"+
    "\0\uc122\0\166\0\uc15d\0\166\0\uc198\0\uc1d3\0\uc20e\0\uc249"+
    "\0\uc284\0\uc2bf\0\uc2fa\0\uc335\0\166\0\uc370\0\uc3ab\0\uc3e6"+
    "\0\166\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\uc50d\0\uc548\0\uc583"+
    "\0\166\0\uc5be\0\uc5f9\0\uc634\0\166\0\uc66f\0\uc6aa\0\166"+
    "\0\166\0\uc6e5\0\166\0\166\0\166\0\166\0\uc720\0\uc75b"+
    "\0\uc796\0\166\0\uc7d1\0\uc80c\0\uc847\0\uc882\0\166\0\uc8bd"+
    "\0\uc8f8\0\166\0\uc933\0\166\0\uc96e\0\uc9a9\0\uc9e4\0\uca1f"+
    "\0\uca5a\0\uca95\0\ucad0\0\ucb0b\0\166\0\166\0\ucb46\0\166"+
    "\0\ucb81\0\ucbbc\0\ucbf7\0\ucc32\0\166\0\166\0\ucc6d\0\ucca8"+
    "\0\166\0\166\0\ucce3\0\ucd1e\0\ucd59\0\166\0\ucd94\0\ucdcf"+
    "\0\uce0a\0\uce45\0\uce80\0\166\0\166\0\ucebb\0\ucef6\0\ucf31"+
    "\0\ucf6c\0\ucfa7\0\166\0\ucfe2\0\ud01d\0\166\0\166\0\ud058"+
    "\0\ud093\0\ud0ce\0\ud109\0\ud144\0\ud17f\0\ud1ba\0\ud1f5\0\166"+
    "\0\ud230\0\ud26b\0\ud2a6\0\166\0\166\0\73\0\166\0\ud2e1"+
    "\0\166\0\ud31c\0\166\0\ud357\0\ud392\0\166\0\ud3cd\0\166"+
    "\0\ud408\0\ud443\0\166\0\ud47e\0\166\0\ud4b9\0\ud4f4\0\166"+
    "\0\ud52f\0\ud56a\0\ud5a5\0\166\0\166\0\ud5e0\0\ud61b\0\ud656"+
    "\0\ud691\0\166\0\166\0\ud6cc\0\ud707\0\ud742\0\166\0\166"+
    "\0\166\0\ud77d\0\166\0\ud7b8\0\166\0\ud7f3\0\166\0\ud82e"+
    "\0\ud869\0\166\0\ud8a4\0\ud8df\0\ud91a\0\ud955\0\166\0\166"+
    "\0\ud990\0\166\0\ud9cb\0\uda06\0\166\0\uda41\0\uda7c\0\udab7"+
    "\0\udaf2\0\udb2d\0\udb68\0\udba3\0\udbde\0\udc19\0\166\0\udc54"+
    "\0\166\0\udc8f\0\udcca\0\udd05\0\udd40\0\166\0\udd7b\0\uddb6"+
    "\0\uddf1\0\ude2c\0\166\0\166\0\ude67\0\udea2\0\udedd\0\udf18"+
    "\0\udf53\0\udf8e\0\166\0\udfc9\0\166\0\ue004\0\166\0\ue03f"+
    "\0\ue07a\0\166\0\ue0b5\0\ue0f0\0\ue12b\0\ue166\0\ue1a1\0\ue1dc"+
    "\0\166\0\ue217\0\166\0\ue252\0\166\0\ue28d\0\ue2c8\0\166"+
    "\0\ue303\0\166\0\ue33e\0\ue379\0\ue3b4\0\ue3ef\0\ue42a\0\166"+
    "\0\166\0\ue465\0\166\0\ue4a0\0\ue4db\0\ue516\0\166\0\ue551"+
    "\0\ue58c\0\ue5c7\0\ue602\0\166\0\ue63d\0\ue678\0\ue6b3\0\ue6ee"+
    "\0\ue729\0\ue764\0\ue79f\0\ue7da\0\ue815\0\ue850\0\ue88b\0\ue8c6"+
    "\0\166\0\166\0\166\0\ue901\0\166\0\166\0\ue93c\0\ue977"+
    "\0\ue9b2\0\ue9ed\0\uea28\0\uea63\0\166\0\uea9e\0\166\0\uead9"+
    "\0\ueb14\0\166\0\166\0\166\0\ueb4f\0\ueb8a\0\166\0\uebc5"+
    "\0\uec00\0\uec3b\0\uec76\0\uecb1\0\uecec\0\ued27\0\ued62\0\166"+
    "\0\166\0\ued9d\0\166\0\uedd8\0\166\0\uee13\0\uee4e\0\uee89"+
    "\0\166\0\ueec4\0\ueeff\0\uef3a\0\uef75\0\uefb0\0\uefeb\0\166"+
    "\0\166\0\uf026\0\166\0\166\0\uf061\0\uf09c\0\uf0d7\0\166"+
    "\0\uf112\0\uf14d\0\uf188\0\uf1c3\0\166\0\uf1fe\0\uf239\0\uf274"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\uf2af\0\uf2ea"+
    "\0\166\0\166\0\uf325\0\uf360\0\uf39b\0\uf3d6\0\uf411\0\166"+
    "\0\uf44c\0\uf487\0\uf4c2\0\uf4fd\0\166\0\uf538\0\166\0\uf573"+
    "\0\166\0\uf5ae\0\uf5e9\0\uf624\0\uf65f\0\166\0\166\0\uf69a"+
    "\0\uf6d5\0\uf710\0\166\0\uf74b\0\166\0\uf786\0\uf7c1\0\166"+
    "\0\uf7fc\0\166\0\uf837\0\uf872\0\uf8ad\0\uf8e8\0\166\0\uf923"+
    "\0\uf95e\0\166\0\166\0\uf999\0\uf9d4\0\166\0\166\0\ufa0f"+
    "\0\ufa4a\0\166\0\ufa85\0\166\0\ufac0\0\ufafb\0\ufb36\0\166"+
    "\0\ufb71\0\ufbac\0\ufbe7\0\ufc22\0\ufc5d\0\166\0\ufc98\0\ufcd3"+
    "\0\166\0\ufd0e\0\ufd49\0\ufd84\0\166\0\ufdbf\0\ufdfa\0\166"+
    "\0\ufe35\0\ufe70\0\ufeab\0\ufee6\0\uff21\0\uff5c\0\uff97\0\uffd2"+
    "\1\15\1\110\1\203\1\276\1\371\1\u0134\1\u016f\0\166"+
    "\1\u01aa\0\166\1\u01e5\1\u0220\1\u025b\1\u0296\1\u02d1\1\u030c"+
    "\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\3\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\3\1\43\1\3\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\74\0\3\3\12\0\33\3\1\0\1\3\23\0\1\4"+
    "\4\0\1\66\41\0\1\4\25\0\3\6\66\0\1\67"+
    "\46\0\1\67\20\0\6\11\1\70\1\71\2\11\1\72"+
    "\1\0\57\11\11\0\1\73\64\0\1\74\11\0\1\75"+
    "\34\0\1\74\21\0\3\3\12\0\1\3\1\76\2\3"+
    "\1\77\1\100\1\101\1\102\2\3\1\103\1\104\2\3"+
    "\1\105\1\3\1\106\6\3\1\107\3\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\110\1\3\1\111\2\3\1\112"+
    "\3\3\1\113\1\3\1\114\2\3\1\115\1\116\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\3\3\1\117\1\3"+
    "\1\120\1\121\1\122\10\3\1\123\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\124\1\3\1\125\2\3\1\126"+
    "\3\3\1\127\3\3\1\130\1\3\1\131\1\132\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\133\1\3\1\134"+
    "\6\3\1\135\1\3\1\136\3\3\1\137\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\140\1\3\1\141\6\3"+
    "\1\142\1\143\1\144\17\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\145\1\3\1\146\6\3\1\147\5\3\1\150"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\1\151\1\3"+
    "\1\152\2\3\1\153\1\3\1\154\1\3\1\155\1\3"+
    "\1\156\3\3\1\157\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\160\1\161\1\3\1\162\1\3\1\163"+
    "\1\164\1\165\12\3\1\166\3\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\167\4\3\1\170\1\3\1\171\1\3"+
    "\1\172\1\3\1\173\1\3\1\174\15\3\1\0\1\3"+
    "\21\0\3\3\12\0\6\3\1\175\1\3\1\176\7\3"+
    "\1\177\12\3\1\0\1\3\21\0\3\3\12\0\1\200"+
    "\1\3\1\201\2\3\1\202\1\3\1\203\1\3\1\204"+
    "\1\3\1\205\3\3\1\206\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\207\10\3\1\210\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\211\1\3\1\212\2\3\1\213"+
    "\3\3\1\214\1\3\1\215\3\3\1\216\1\3\1\217"+
    "\11\3\1\0\1\3\21\0\3\3\12\0\1\3\1\220"+
    "\4\3\1\221\5\3\1\222\3\3\1\223\4\3\1\224"+
    "\5\3\1\0\1\3\21\0\1\225\2\3\12\0\1\226"+
    "\1\3\1\227\1\3\1\230\3\3\1\231\1\232\1\233"+
    "\1\234\1\3\1\235\1\3\1\236\1\3\1\237\3\3"+
    "\1\240\5\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\241\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\242\2\3\1\243\1\3\1\244\1\3\1\245\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\246\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\247\14\3"+
    "\1\250\13\3\1\0\1\3\21\0\3\3\12\0\1\251"+
    "\1\3\1\252\6\3\1\253\5\3\1\254\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\255\4\3\1\256\3\3"+
    "\1\257\3\3\1\260\1\3\1\261\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\262\16\3\1\263\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\11\3\1\264\21\3\1\0"+
    "\1\3\73\0\1\265\72\0\1\266\72\0\1\267\72\0"+
    "\1\270\77\0\1\271\73\0\1\272\75\0\1\273\74\0"+
    "\1\274\74\0\1\275\74\0\1\276\3\0\1\66\14\0"+
    "\1\277\27\0\1\277\1\300\1\66\23\0\1\67\14\0"+
    "\1\301\27\0\1\301\1\0\1\67\20\0\6\71\1\0"+
    "\3\71\1\302\1\0\65\71\2\0\2\71\1\302\1\0"+
    "\57\71\6\303\2\0\2\303\1\304\1\0\57\303\6\305"+
    "\2\306\1\307\1\310\1\305\1\0\1\311\56\305\3\0"+
    "\1\74\46\0\1\74\20\0\6\75\1\312\1\313\63\75"+
    "\1\0\3\3\12\0\1\314\1\315\31\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\316\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\3\1\317\17\3\1\320\11\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\321\2\3"+
    "\1\322\23\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\323\26\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\324\26\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\325\12\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\326\5\3\1\327\12\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\330\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\331\14\3\1\332\11\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\333\5\3\1\334\1\335\2\3"+
    "\1\336\1\3\1\337\3\3\1\340\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\11\3\1\341\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\13\3\1\342\11\3\1\343\5\3"+
    "\1\0\1\3\21\0\3\3\12\0\25\3\1\344\5\3"+
    "\1\0\1\3\21\0\3\3\12\0\12\3\1\345\20\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\346\17\3\1\347"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\2\3\1\350"+
    "\1\3\1\351\5\3\1\352\4\3\1\353\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\354\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\3\1\355\31\3\1\0"+
    "\1\3\21\0\3\3\12\0\20\3\1\356\12\3\1\0"+
    "\1\3\21\0\3\3\12\0\12\3\1\357\20\3\1\0"+
    "\1\3\21\0\3\3\12\0\16\3\1\360\14\3\1\0"+
    "\1\3\21\0\3\3\12\0\3\3\1\361\21\3\1\362"+
    "\5\3\1\0\1\3\21\0\3\3\12\0\1\363\12\3"+
    "\1\364\3\3\1\365\1\3\1\366\11\3\1\0\1\3"+
    "\21\0\3\3\12\0\10\3\1\367\22\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\370\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\25\3\1\371\5\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\372\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\373\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\374\3\3\1\375\2\3\1\376"+
    "\1\377\1\3\1\u0100\1\3\1\u0101\3\3\1\u0102\6\3"+
    "\1\u0103\3\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0104\16\3\1\u0105\4\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u0106\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\u0107\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0108\20\3\1\u0109\5\3\1\0\1\3"+
    "\21\0\3\3\12\0\3\3\1\u010a\27\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u010b\1\3\1\u010c\3\3"+
    "\1\u010d\20\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u010e\15\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u010f\15\3\1\u0110\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0111\11\3\1\u0112\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0113\13\3\1\u0114\12\3\1\u0115"+
    "\3\3\1\0\1\3\21\0\3\3\12\0\1\u0116\11\3"+
    "\1\u0117\13\3\1\u0118\4\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0119\15\3\1\u011a\6\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\3\1\u011b\3\3\1\u011c\12\3"+
    "\1\u011d\12\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u011e\25\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u011f\6\3\1\u0120\5\3\1\u0121\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0122\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u0123\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\16\3\1\u0124\14\3\1\0\1\3\21\0"+
    "\3\3\12\0\27\3\1\u0125\3\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\3\1\u0126\31\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u0127\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u0128\1\3\1\u0129\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u012a\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u012b\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\14\3\1\u012c\16\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u012d\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u012e\13\3\1\u012f"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0130"+
    "\6\3\1\u0131\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u0132\1\3\1\u0133\17\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u0134\4\3\1\u0135\1\u0136\1\u0137\3\3"+
    "\1\u0138\11\3\1\u0139\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u013a\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u013b\1\3\1\u013c\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\10\3\1\u013d\6\3\1\u013e\4\3\1\u013f"+
    "\6\3\1\0\1\3\21\0\3\3\12\0\1\3\1\u0140"+
    "\6\3\1\u0141\22\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u0142\1\3\1\u0143\14\3\1\u0144\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u0145\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u0146\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u0147\6\3\1\u0148\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u0149\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u014a\5\3"+
    "\1\u014b\17\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u014c\1\u014d\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u014e\1\3\1\u014f\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\27\3\1\u0150\3\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u0151\3\3\1\u0152\17\3\1\0"+
    "\1\3\21\0\3\3\12\0\12\3\1\u0153\20\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u0154\15\3\1\u0155"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0156"+
    "\6\3\1\u0157\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0158\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u0159\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u015a\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u015b\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\3\1\u015c\2\3\1\u015d\1\3\1\u015e\1\3\1\u015f"+
    "\1\3\1\u0160\4\3\1\u0161\1\u0162\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\11\3\1\u0163\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\25\3\1\u0164\5\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u0165\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\27\3\1\u0166\3\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u0167\2\3\1\u0168\2\3"+
    "\1\u0169\5\3\1\u016a\4\3\1\u016b\5\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u016c\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u016d\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\25\3\1\u016e\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u016f\7\3\1\u0170\15\3\1\0\1\3"+
    "\21\0\3\3\12\0\16\3\1\u0171\6\3\1\u0172\5\3"+
    "\1\0\1\3\21\0\3\3\12\0\13\3\1\u0173\17\3"+
    "\1\0\1\3\21\0\3\3\12\0\23\3\1\u0174\7\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u0175\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u0176\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u0177\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u0178\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0179\10\3\1\u017a\21\3\1\0"+
    "\1\3\21\0\3\3\12\0\11\3\1\u017b\21\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u017c\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\6\3\1\u017d\24\3\1\0"+
    "\1\3\21\0\3\3\12\0\21\3\1\u017e\11\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u017f\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\3\3\1\u0180\1\u0181\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0182\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\3\1\u0183\4\3"+
    "\1\u0184\24\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0185\24\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0186\13\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0187\13\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0188\25\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0189\14\3\1\u018a\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u018b\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u018c\1\3\1\u018d\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u018e\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\u018f\13\3\1\0\1\3"+
    "\23\0\1\u0190\45\0\1\u0191\1\u0190\23\0\1\u0192\46\0"+
    "\1\u0192\71\0\1\u0193\21\0\6\u0194\2\0\1\u0194\1\u0195"+
    "\1\u0194\2\0\56\u0194\6\0\3\306\3\0\1\311\56\0"+
    "\6\u0194\2\306\1\u0196\1\u0195\1\u0194\1\0\1\311\56\u0194"+
    "\6\u0197\2\0\1\u0197\1\310\1\u0197\1\0\1\313\56\u0197"+
    "\11\0\1\u0198\70\0\1\313\64\0\3\3\12\0\2\3"+
    "\1\u0199\30\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u019a\21\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u019b\13\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u019c\15\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u019d\21\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u019e\30\3\1\0\1\3\21\0\3\3\12\0\1\u019f"+
    "\1\3\1\u01a0\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u01a1\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\21\3\1\u01a2\11\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u01a3\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u01a4\7\3\1\u01a5\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u01a6\1\3\1\u01a7\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\12\3\1\u01a8\20\3\1\0\1\3"+
    "\21\0\3\3\12\0\10\3\1\u01a9\22\3\1\0\1\3"+
    "\21\0\3\3\12\0\16\3\1\u01aa\14\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u01ab\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\10\3\1\u01ac\22\3\1\0\1\3\21\0"+
    "\3\3\12\0\12\3\1\u01ad\20\3\1\0\1\3\21\0"+
    "\3\3\12\0\22\3\1\u01ae\10\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u01af\5\3\1\u01b0\11\3\1\u01b1"+
    "\6\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u01b2"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u01b3"+
    "\2\3\1\u01b4\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u01b5\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u01b6\13\3\1\u01b7\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u01b8\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u01b9\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u01ba\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u01bb\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u01bc\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\10\3\1\u01bd\22\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u01be\10\3\1\u01bf\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u01c0\3\3\1\u01c1\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\22\3\1\u01c2\2\3"+
    "\1\u01c3\5\3\1\0\1\3\21\0\3\3\12\0\30\3"+
    "\1\u01c4\2\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u01c5\24\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01c6\30\3\1\0\1\3\21\0\1\u01c7\2\3\12\0"+
    "\33\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u01c8"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\1\3\1\u01c9"+
    "\5\3\1\u01ca\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u01cb\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u01cc\32\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u01cd\23\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u01ce\21\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01cf\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u01d0\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01d1\6\3\1\u01d2\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u01d3\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u01d4\5\3\1\u01d5\1\3\1\u01d6\10\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u01d7\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\15\3\1\u01d8\15\3"+
    "\1\0\1\3\21\0\3\3\12\0\13\3\1\u01d9\3\3"+
    "\1\u01da\13\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01db\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u01dc\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01dd\7\3\1\u01de\20\3\1\0\1\3\21\0\3\3"+
    "\12\0\15\3\1\u01df\15\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u01e0\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u01e1\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u01e2\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\22\3\1\u01e3\10\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u01e4\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\3\1\u01e5\31\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u01e6\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u01e7\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\3\1\u01e8\31\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u01e9\32\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01ea\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01eb\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u01ec\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u01ed\26\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u01ee\20\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u01ef\20\3\1\0\1\3\21\0\3\3\12\0\10\3"+
    "\1\u01f0\1\3\1\u01f1\5\3\1\u01f2\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\12\3\1\u01f3\20\3\1\0\1\3"+
    "\21\0\3\3\12\0\6\3\1\u01f4\2\3\1\u01f5\13\3"+
    "\1\u01f6\1\3\1\u01f7\3\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u01f8\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\17\3\1\u01f9\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u01fa\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u01fb\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u01fc\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\21\3\1\u01fd\11\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u01fe\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\17\3\1\u01ff\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0200\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0201\5\3\1\u0202\22\3\1\0\1\3"+
    "\21\0\3\3\12\0\20\3\1\u0203\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\5\3\1\u0204\25\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0205\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u0206\1\3\1\u0207\5\3\1\u0208"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\1\u0209\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u020a\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u020b\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u020c\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\7\3\1\u020d\23\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u020e\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u020f\1\3"+
    "\1\u0210\11\3\1\u0211\6\3\1\u0212\3\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u0213\3\3\1\u0214\17\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u0215\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\10\3\1\u0216\14\3"+
    "\1\u0217\5\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0218\12\3\1\u0219\12\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u021a\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u021b\20\3\1\0\1\3\21\0\3\3"+
    "\12\0\17\3\1\u021c\13\3\1\0\1\3\21\0\1\u021d"+
    "\2\3\12\0\11\3\1\u021e\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\6\3\1\u021f\24\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u0220\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0221\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\u0222\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u0223\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0224\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\20\3\1\u0225\12\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u0226\20\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0227\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\25\3\1\u0228\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u0229\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u022a\1\3\1\u022b\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\6\3\1\u022c\24\3\1\0\1\3\21\0"+
    "\3\3\12\0\12\3\1\u022d\20\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u022e\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u022f\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u0230\4\3\1\u0231\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u0232\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\3\1\u0233\31\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u0234\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\24\3\1\u0235\6\3\1\0"+
    "\1\3\21\0\3\3\12\0\26\3\1\u0236\4\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u0237\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u0238\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\26\3\1\u0239\4\3\1\0\1\3"+
    "\21\0\3\3\12\0\15\3\1\u023a\15\3\1\0\1\3"+
    "\21\0\3\3\12\0\24\3\1\u023b\6\3\1\0\1\3"+
    "\21\0\3\3\12\0\30\3\1\u023c\2\3\1\0\1\3"+
    "\21\0\3\3\12\0\6\3\1\u023d\24\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u023e\14\3\1\u023f\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0240\6\3"+
    "\1\u0241\21\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0242\30\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u0243\17\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0244\23\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0245\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0246\30\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0247\23\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0248\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0249\7\3\1\u024a\5\3\1\u024b\5\3\1\u024c\4\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u024d\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\13\3\1\u024e\17\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u024f\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0250\4\3"+
    "\1\u0251\1\3\1\u0252\17\3\1\0\1\3\21\0\3\3"+
    "\12\0\20\3\1\u0253\12\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u0254\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0255\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u0256\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0257\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u0258\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0259\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u025a\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u025b\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u025c\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u025d\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u025e\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u025f\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u0260\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u0261\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\16\3\1\u0262\14\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u0263\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0264\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u0265\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u0266\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\22\3\1\u0267\10\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u0268\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0269\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u026a\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u026b\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u026c\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\24\3\1\u026d\6\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u026e\1\u026f\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u0270\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\15\3\1\u0271\15\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u0272\6\3\1\u0273\11\3\1\0\1\3"+
    "\21\0\3\3\12\0\13\3\1\u0274\17\3\1\0\1\3"+
    "\21\0\3\3\12\0\26\3\1\u0275\4\3\1\0\1\3"+
    "\21\0\3\3\12\0\6\3\1\u0276\24\3\1\0\1\3"+
    "\23\0\1\u0190\46\0\1\u0190\23\0\1\u0277\46\0\1\u0277"+
    "\23\0\1\u0278\46\0\1\u0278\20\0\6\u0194\2\0\1\u0194"+
    "\1\0\1\u0194\2\0\56\u0194\11\0\1\u0195\2\0\1\313"+
    "\56\0\6\u0194\2\306\1\u0196\1\0\1\u0194\1\0\1\311"+
    "\56\u0194\11\0\1\u0195\61\0\6\u0279\2\0\1\u0279\1\u027a"+
    "\1\u0279\2\0\56\u0279\1\0\3\3\12\0\5\3\1\u027b"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u027c"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u027d"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u027e"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u027f"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0280"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\16\3\1\u0281"+
    "\14\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u0282"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0283"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\1\u0284\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\25\3\1\u0285\5\3"+
    "\1\0\1\3\21\0\3\3\12\0\13\3\1\u0286\17\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0287\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0288\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\7\3\1\u0289\23\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u028a\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u028b\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u028c\11\3"+
    "\1\u028d\13\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u028e\21\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u028f\17\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0290\25\3\1\0\1\3\21\0\3\3\12\0\1\u0291"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u0292"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0293"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\27\3\1\u0294"+
    "\3\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u0295"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0296"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u0297"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u0298"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u0299"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u029a"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u029b"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\22\3\1\u029c"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u029d"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u029e"+
    "\2\3\1\u029f\7\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u02a0\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u02a1\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u02a2\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u02a3\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u02a4\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u02a5\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u02a6\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u02a7\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u02a8\3\3\1\u02a9\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u02aa\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\24\3\1\u02ab\6\3\1\0\1\3\21\0"+
    "\3\3\12\0\16\3\1\u02ac\14\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u02ad\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\13\3\1\u02ae\17\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u02af\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u02b0\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u02b1\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u02b2\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u02b3\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u02b4\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u02b5\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u02b6\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u02b7\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\13\3\1\u02b8\17\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u02b9\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u02ba\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u02bb\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u02bc\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\6\3\1\u02bd\24\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u02be\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u02bf\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u02c0\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u02c1\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u02c2\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u02c3\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u02c4\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u02c5\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u02c6\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u02c7\32\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u02c8\13\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u02c9\26\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u02ca\13\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u02cb\26\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u02cc\25\3\1\0\1\3\21\0\1\u02cd\2\3\12\0"+
    "\1\3\1\u02ce\1\3\1\u02cf\1\3\1\u02d0\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\11\3\1\u02d1\21\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02d2\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u02d3\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\13\3\1\u02d4\17\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u02d5\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u02d6\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u02d7\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u02d8\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u02d9\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\20\3\1\u02da\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u02db\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u02dc\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u02dd\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u02de\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u02df\16\3\1\u02e0\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u02e1\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02e2\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u02e3\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u02e4\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\25\3\1\u02e5\5\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u02e6\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\13\3\1\u02e7\17\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\u02e8\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u02e9\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\11\3\1\u02ea\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u02eb\27\3\1\u02ec\2\3\1\0"+
    "\1\3\21\0\3\3\12\0\24\3\1\u02ed\6\3\1\0"+
    "\1\3\21\0\3\3\12\0\27\3\1\u02ee\3\3\1\0"+
    "\1\3\21\0\3\3\12\0\13\3\1\u02ef\17\3\1\0"+
    "\1\3\21\0\3\3\12\0\6\3\1\u02f0\24\3\1\0"+
    "\1\3\21\0\3\3\12\0\11\3\1\u02f1\21\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02f2\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u02f3\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u02f4\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\22\3\1\u02f5\10\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u02f6\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\15\3\1\u02f7\15\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02f8\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02f9\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u02fa\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u02fb\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\3\1\u02fc\31\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02fd\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u02fe\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\14\3\1\u02ff\16\3\1\0"+
    "\1\3\21\0\3\3\12\0\6\3\1\u0300\24\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u0301\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\13\3\1\u0302\17\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u0303\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\6\3\1\u0304\24\3\1\0"+
    "\1\3\21\0\3\3\12\0\24\3\1\u0305\6\3\1\0"+
    "\1\3\21\0\3\3\12\0\20\3\1\u0306\12\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u0307\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u0308\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\3\3\1\u0309\27\3\1\0"+
    "\1\3\21\0\3\3\12\0\12\3\1\u030a\20\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u030b\14\3\1\u030c"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u030d"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u030e"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\13\3\1\u030f"+
    "\17\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u0310"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0311"+
    "\1\u0312\24\3\1\0\1\3\21\0\3\3\12\0\1\u0313"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\1\3\1\u0314"+
    "\31\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0315"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\1\u0316\10\3"+
    "\1\u0317\21\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0318\26\3\1\0\1\3\21\0\3\3\12\0\1\u0319"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u031a"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u031b"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u031c"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u031d"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u031e"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u031f"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u0320"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u0321"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0322"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u0323"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\25\3\1\u0324"+
    "\5\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0325"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\1\3\1\u0326"+
    "\31\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0327"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u0328"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0329"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u032a"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\1\u032b\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\15\3\1\u032c\15\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u032d\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\7\3\1\u032e\23\3"+
    "\1\0\1\3\21\0\3\3\12\0\15\3\1\u032f\15\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0330\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\14\3\1\u0331\16\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0332\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0333\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0334\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0335\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u0336\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\15\3\1\u0337\15\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u0338\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0339\30\3"+
    "\1\0\1\3\31\0\1\u033a\61\0\6\u0279\2\0\1\u0279"+
    "\1\u027a\1\u0279\1\0\1\u033b\56\u0279\1\0\3\3\12\0"+
    "\1\u033c\32\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u033d\24\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u033e\25\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u033f\17\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0340\26\3\1\0\1\3\21\0\3\3\12\0\1\u0341"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u0342"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0343"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0344"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\1\u0345\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\7\3\1\u0346\23\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0347\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u0348\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0349\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u034a\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u034b\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u034c\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u034d\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u034e\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u034f\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u0350\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\12\3\1\u0351\20\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0352\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u0353\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\7\3\1\u0354\23\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0355\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u0356\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u0357\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0358\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u0359\6\3\1\u035a"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u035b"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\1\u035c\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u035d\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u035e\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u035f\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u0360\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u0361\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u0362\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u0363\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\6\3\1\u0364\24\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u0365\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\12\3\1\u0366\20\3\1\0"+
    "\1\3\21\0\3\3\12\0\14\3\1\u0367\16\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u0368\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u0369\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u036a\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u036b\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u036c\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u036d\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\13\3\1\u036e\17\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\u036f\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0370\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\6\3\1\u0371\24\3\1\0\1\3\21\0"+
    "\3\3\12\0\13\3\1\u0372\17\3\1\0\1\3\21\0"+
    "\3\3\12\0\12\3\1\u0373\20\3\1\0\1\3\21\0"+
    "\3\3\12\0\14\3\1\u0374\16\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u0375\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u0376\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0377\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u0378\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u0379\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u037a\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u037b\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u037c\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u037d\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u037e\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\3\1\u037f\31\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u0380\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u0381\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u0382\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u0383\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u0384\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u0385\32\3\1\0\1\3\21\0\3\3\12\0\25\3"+
    "\1\u0386\5\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u0387\21\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0388\24\3\1\0\1\3\21\0\3\3\12\0\30\3"+
    "\1\u0389\2\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u038a\26\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u038b\26\3\1\0\1\3\21\0\3\3\12\0\1\u038c"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u038d"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\1\3\1\u038e"+
    "\31\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u038f"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0390"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u0391"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u0392"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u0393"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u0394"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u0395"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0396"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0397"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0398"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u0399"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u039a"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u039b"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u039c"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u039d"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u039e"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u039f"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u03a0"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u03a1"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u03a2"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\26\3\1\u03a3"+
    "\4\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u03a4"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u03a5"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\22\3\1\u03a6"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\1\u03a7\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u03a8\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u03a9\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\22\3\1\u03aa\10\3\1\0"+
    "\1\3\21\0\3\3\12\0\11\3\1\u03ab\21\3\1\0"+
    "\1\3\21\0\3\3\12\0\10\3\1\u03ac\22\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u03ad\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u03ae\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u03af\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u03b0\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u03b1\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\20\3\1\u03b2\6\3\1\u03b3\3\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u03b4\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\3\1\u03b5\31\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u03b6\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u03b7\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\20\3\1\u03b8\12\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u03b9\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u03ba\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\5\3\1\u03bb\25\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\3\1\u03bc\31\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u03bd\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\5\3\1\u03be\25\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u03bf\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u03c0\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\11\3\1\u03c1\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\3\1\u03c2\31\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\u03c3\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\11\3\1\u03c4\21\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u03c5\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\20\3\1\u03c6\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u03c7\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u03c8\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u03c9\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u03ca\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\25\3\1\u03cb\5\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u03cc\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u03cd\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u03ce\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u03cf\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u03d0\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u03d1\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\27\3\1\u03d2\3\3\1\0\1\3\21\0"+
    "\3\3\12\0\6\3\1\u03d3\24\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u03d4\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u03d5\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\20\3\1\u03d6\12\3\1\0\1\3\31\0\1\u033a"+
    "\2\0\1\u033b\64\0\3\u03d7\1\u03d8\2\0\1\311\57\0"+
    "\3\3\12\0\4\3\1\u03d9\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u03da\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u03db\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\17\3\1\u03dc\13\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u03dd\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\12\3\1\u03de\20\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u03df\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u03e0\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u03e1\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u03e2\1\3\1\u03e3\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\10\3\1\u03e4\5\3\1\u03e5\14\3"+
    "\1\0\1\3\21\0\3\3\12\0\20\3\1\u03e6\12\3"+
    "\1\0\1\3\21\0\3\3\12\0\16\3\1\u03e7\14\3"+
    "\1\0\1\3\21\0\3\3\12\0\12\3\1\u03e8\20\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u03e9\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u03ea\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u03eb\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u03ec\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u03ed\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u03ee\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\23\3\1\u03ef\7\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u03f0\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\12\3\1\u03f1\20\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u03f2\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u03f3\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u03f4\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u03f5\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u03f6\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u03f7\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u03f8\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u03f9\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u03fa\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\3\3\1\u03fb\27\3\1\0\1\3\21\0\3\3\12\0"+
    "\27\3\1\u03fc\3\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u03fd\32\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u03fe\13\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u03ff\24\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u0400\20\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0401\30\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u0402\20\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0403\24\3\1\0\1\3\21\0\3\3\12\0\1\3"+
    "\1\u0404\31\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0405\23\3\1\0\1\3\21\0\3\3\12\0\1\u0406"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u0407"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\24\3\1\u0408"+
    "\6\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u0409"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\22\3\1\u040a"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\22\3\1\u040b"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u040c"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u040d"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u040e"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u040f"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\27\3\1\u0410"+
    "\3\3\1\0\1\3\21\0\3\3\12\0\13\3\1\u0411"+
    "\17\3\1\0\1\3\21\0\3\3\12\0\21\3\1\u0412"+
    "\11\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0413"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\11\3\1\u0414"+
    "\21\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0415"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0416"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u0417"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\26\3\1\u0418"+
    "\4\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u0419"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u041a"+
    "\12\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u041b"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\22\3\1\u041c"+
    "\10\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u041d"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u041e"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\12\3\1\u041f"+
    "\20\3\1\0\1\3\21\0\3\3\12\0\10\3\1\u0420"+
    "\22\3\1\0\1\3\21\0\3\3\12\0\6\3\1\u0421"+
    "\24\3\1\0\1\3\21\0\3\3\12\0\13\3\1\u0422"+
    "\17\3\1\0\1\3\21\0\3\3\12\0\4\3\1\u0423"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\1\u0424\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0425\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0426\14\3"+
    "\1\u0427\13\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0428\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0429\26\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u042a\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u042b\30\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u042c\21\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u042d\26\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u042e\24\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u042f\26\3\1\0\1\3\21\0\3\3\12\0\3\3"+
    "\1\u0430\27\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0431\24\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0432\24\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u0433\21\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u0434\20\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u0435\20\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0436\24\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0437\24\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0438\26\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0439\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u043a\30\3\1\0\1\3\21\0\3\3\12\0\1\u043b"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u043c"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u043d"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\7\3\1\u043e"+
    "\23\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u043f"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\17\3\1\u0440"+
    "\13\3\1\0\1\3\21\0\3\3\12\0\1\u0441\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u0442\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0443\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0444\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u0445\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0446\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u0447\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0448\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u0449\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u044a\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u044b\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\17\3\1\u044c\13\3"+
    "\1\0\1\3\21\0\3\3\12\0\26\3\1\u044d\4\3"+
    "\1\0\1\3\21\0\3\3\12\0\30\3\1\u044e\2\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u044f\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0450\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0451\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0452\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\22\3\1\u0453\10\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u0454\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\22\3\1\u0455\10\3"+
    "\1\0\1\3\26\0\3\u03d7\1\u03d8\75\0\1\u0456\57\0"+
    "\3\3\12\0\2\3\1\u0457\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\23\3\1\u0458\7\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u0459\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u045a\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u045b\30\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u045c\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\16\3\1\u045d\14\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\3\1\u045e\31\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u045f\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0460\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0461\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\13\3\1\u0462\17\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0463\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0464\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u0465\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u0466\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\25\3\1\u0467\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0468\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u0469\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u046a\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u046b\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\u046c\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u046d\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\27\3\1\u046e\3\3\1\0\1\3\21\0\3\3"+
    "\12\0\25\3\1\u046f\5\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0470\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u0471\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0472\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u0473\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0474\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\u0475\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u0476\20\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0477\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\24\3\1\u0478\6\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u0479\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\12\3\1\u047a\20\3\1\0\1\3\21\0\3\3"+
    "\12\0\7\3\1\u047b\23\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u047c\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u047d\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u047e\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u047f\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u0480\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\22\3\1\u0481\10\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0482\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u0483\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u0484\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u0485\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0486\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u0487\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\3\1\u0488\31\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0489\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u048a\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u048b\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u048c\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u048d\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u048e\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u048f\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u0490\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\30\3\1\u0491\2\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0492\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u0493\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u0494\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u0495\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0496\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u0497\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0498\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\24\3\1\u0499\6\3\1\0\1\3\21\0\3\3\12\0"+
    "\22\3\1\u049a\10\3\1\0\1\3\21\0\3\3\12\0"+
    "\21\3\1\u049b\11\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u049c\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u049d\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u049e\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u049f\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04a0\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u04a1\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04a2\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u04a3\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u04a4\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u04a5\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\21\3\1\u04a6\11\3\1\0\1\3\21\0\3\3\12\0"+
    "\30\3\1\u04a7\2\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u04a8\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u04a9\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u04aa\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\6\3\1\u04ab\24\3\1\0\1\3\21\0\3\3\12\0"+
    "\13\3\1\u04ac\17\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04ad\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\3\3\1\u04ae\27\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u04af\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u04b0\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u04b1\32\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u04b2\24\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u04b3\26\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u04b4\23\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u04b5\21\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u04b6\13\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u04b7\26\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u04b8\20\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u04b9\24\3\1\0\1\3\21\0\3\3\12\0\10\3"+
    "\1\u04ba\22\3\1\0\1\3\21\0\3\3\12\0\21\3"+
    "\1\u04bb\11\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u04bc\13\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u04bd\14\3\1\u04be\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04bf\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\10\3\1\u04c0\22\3\1\0\1\3\21\0\3\3"+
    "\12\0\30\3\1\u04c1\2\3\1\0\1\3\21\0\3\3"+
    "\12\0\5\3\1\u04c2\25\3\1\0\1\3\21\0\3\3"+
    "\12\0\17\3\1\u04c3\13\3\1\0\1\3\21\0\3\3"+
    "\12\0\13\3\1\u04c4\17\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04c5\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u04c6\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04c7\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u04c8\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04c9\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04ca\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\21\3\1\u04cb\11\3\1\0\1\3\21\0\3\3"+
    "\12\0\20\3\1\u04cc\12\3\1\0\1\3\21\0\3\3"+
    "\12\0\2\3\1\u04cd\30\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u04ce\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\3\1\u04cf\31\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u04d0\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u04d1\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\11\3\1\u04d2\21\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u04d3\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u04d4\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\3\1\u04d5\2\3\1\u04d6\6\3\1\u04d7\17\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u04d8\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\22\3\1\u04d9\10\3"+
    "\1\0\1\3\21\0\3\3\12\0\6\3\1\u04da\24\3"+
    "\1\0\1\3\21\0\3\3\12\0\3\3\1\u04db\27\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u04dc\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\11\3\1\u04dd\21\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u04de\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\12\3\1\u04df\15\3"+
    "\1\u04e0\2\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u04e1\25\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u04e2\26\3\1\0\1\3\21\0\3\3\12\0\21\3"+
    "\1\u04e3\11\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u04e4\13\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u04e5\24\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u04e6\30\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u04e7\24\3\1\0\1\3\21\0\3\3\12\0\1\u04e8"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\13\3\1\u04e9"+
    "\17\3\1\0\1\3\21\0\3\3\12\0\20\3\1\u04ea"+
    "\3\3\1\u04eb\6\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u04ec\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\22\3\1\u04ed\10\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u04ee\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04ef\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u04f0\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04f1\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u04f2\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u04f3\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u04f4\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\12\3\1\u04f5\20\3\1\0\1\3\21\0\3\3\12\0"+
    "\2\3\1\u04f6\30\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u04f7\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\7\3\1\u04f8\23\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u04f9\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\11\3\1\u04fa\21\3\1\0\1\3\21\0\3\3\12\0"+
    "\5\3\1\u04fb\25\3\1\0\1\3\21\0\3\3\12\0"+
    "\15\3\1\u04fc\7\3\1\u04fd\5\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u04fe\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u04ff\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u0500\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u0501\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\5\3\1\u0502\25\3\1\0\1\3\21\0"+
    "\3\3\12\0\20\3\1\u0503\12\3\1\0\1\3\21\0"+
    "\3\3\12\0\11\3\1\u0504\21\3\1\0\1\3\21\0"+
    "\3\3\12\0\4\3\1\u0505\26\3\1\0\1\3\21\0"+
    "\3\3\12\0\22\3\1\u0506\10\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\3\1\u0507\31\3\1\0\1\3\21\0"+
    "\3\3\12\0\1\u0508\32\3\1\0\1\3\21\0\3\3"+
    "\12\0\6\3\1\u0509\24\3\1\0\1\3\21\0\3\3"+
    "\12\0\4\3\1\u050a\26\3\1\0\1\3\21\0\3\3"+
    "\12\0\1\u050b\32\3\1\0\1\3\21\0\3\3\12\0"+
    "\17\3\1\u050c\13\3\1\0\1\3\21\0\3\3\12\0"+
    "\20\3\1\u050d\12\3\1\0\1\3\21\0\3\3\12\0"+
    "\30\3\1\u050e\2\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u050f\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0510\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\4\3\1\u0511\26\3\1\0\1\3\21\0\3\3\12\0"+
    "\1\u0512\32\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0513\25\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u0514\15\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u0515\21\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0516\13\3\1\0\1\3\21\0\3\3\12\0\27\3"+
    "\1\u0517\3\3\1\0\1\3\21\0\3\3\12\0\22\3"+
    "\1\u0518\10\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u0519\17\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u051a\12\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u051b\13\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u051c\30\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u051d\12\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u051e\30\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u051f\17\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0520\13\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u0521\12\3\1\0\1\3\21\0\3\3\12\0\1\3"+
    "\1\u0522\31\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0523\30\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0524\24\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0525\24\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0526\26\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u0527\21\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0528\13\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0529\24\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u052a\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u052b\30\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u052c\17\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u052d\26\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u052e\13\3\1\0\1\3\21\0\3\3\12\0\16\3"+
    "\1\u052f\14\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u0530\12\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0531\26\3\1\0\1\3\21\0\3\3\12\0\25\3"+
    "\1\u0532\5\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0533\30\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0534\23\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u0535\15\3\1\0\1\3\21\0\3\3\12\0\16\3"+
    "\1\u0536\14\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0537\23\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0538\24\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0539\30\3\1\0\1\3\21\0\3\3\12\0\1\3"+
    "\1\u053a\31\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u053b\30\3\1\0\1\3\21\0\3\3\12\0\25\3"+
    "\1\u053c\5\3\1\0\1\3\21\0\3\3\12\0\21\3"+
    "\1\u053d\11\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u053e\25\3\1\0\1\3\21\0\3\3\12\0\10\3"+
    "\1\u053f\22\3\1\0\1\3\21\0\3\3\12\0\11\3"+
    "\1\u0540\21\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u0541\17\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0542\24\3\1\0\1\3\21\0\3\3\12\0\1\3"+
    "\1\u0543\31\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0544\25\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u0545\15\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0546\24\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u0547\23\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0548\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0549\30\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u054a\25\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u054b\30\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u054c\23\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u054d\12\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u054e\13\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u054f\25\3\1\0\1\3\21\0\3\3\12\0\17\3"+
    "\1\u0550\13\3\1\0\1\3\21\0\3\3\12\0\10\3"+
    "\1\u0551\22\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0552\24\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0553\25\3\1\0\1\3\21\0\3\3\12\0\13\3"+
    "\1\u0554\17\3\1\0\1\3\21\0\3\3\12\0\12\3"+
    "\1\u0555\20\3\1\0\1\3\21\0\3\3\12\0\22\3"+
    "\1\u0556\10\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0557\30\3\1\0\1\3\21\0\3\3\12\0\20\3"+
    "\1\u0558\12\3\1\0\1\3\21\0\3\3\12\0\6\3"+
    "\1\u0559\24\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u055a\30\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u055b\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u055c\26\3\1\0\1\3\21\0\3\3\12\0\7\3"+
    "\1\u055d\23\3\1\0\1\3\21\0\3\3\12\0\15\3"+
    "\1\u055e\15\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u055f\26\3\1\0\1\3\21\0\3\3\12\0\2\3"+
    "\1\u0560\30\3\1\0\1\3\21\0\3\3\12\0\4\3"+
    "\1\u0561\26\3\1\0\1\3\21\0\3\3\12\0\22\3"+
    "\1\u0562\10\3\1\0\1\3\21\0\3\3\12\0\5\3"+
    "\1\u0563\25\3\1\0\1\3\21\0\3\3\12\0\1\u0564"+
    "\32\3\1\0\1\3\21\0\3\3\12\0\5\3\1\u0565"+
    "\25\3\1\0\1\3\21\0\3\3\12\0\2\3\1\u0566"+
    "\30\3\1\0\1\3\21\0\3\3\12\0\1\u0567\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0568\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\4\3\1\u0569\26\3"+
    "\1\0\1\3\21\0\3\3\12\0\5\3\1\u056a\25\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u056b\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\25\3\1\u056c\5\3\1\0"+
    "\1\3\21\0\3\3\12\0\15\3\1\u056d\15\3\1\0"+
    "\1\3\21\0\3\3\12\0\17\3\1\u056e\13\3\1\0"+
    "\1\3\21\0\3\3\12\0\20\3\1\u056f\12\3\1\0"+
    "\1\3\21\0\3\3\12\0\10\3\1\u0570\22\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u0571\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\2\3\1\u0572\30\3\1\0"+
    "\1\3\21\0\3\3\12\0\21\3\1\u0573\11\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u0574\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\3\1\u0575\2\3\1\u0576"+
    "\26\3\1\0\1\3\21\0\3\3\12\0\1\u0577\32\3"+
    "\1\0\1\3\21\0\3\3\12\0\2\3\1\u0578\30\3"+
    "\1\0\1\3\21\0\3\3\12\0\1\u0579\32\3\1\0"+
    "\1\3\21\0\3\3\12\0\16\3\1\u057a\14\3\1\0"+
    "\1\3\21\0\3\3\12\0\4\3\1\u057b\26\3\1\0"+
    "\1\3\21\0\3\3\12\0\16\3\1\u057c\14\3\1\0"+
    "\1\3\21\0\3\3\12\0\7\3\1\u057d\23\3\1\0"+
    "\1\3\21\0\3\3\12\0\1\u057e\32\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u057f\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u0580\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\17\3\1\u0581\13\3\1\0\1\3"+
    "\21\0\3\3\12\0\2\3\1\u0582\30\3\1\0\1\3"+
    "\21\0\3\3\12\0\7\3\1\u0583\23\3\1\0\1\3"+
    "\21\0\3\3\12\0\20\3\1\u0584\12\3\1\0\1\3"+
    "\21\0\3\3\12\0\4\3\1\u0585\26\3\1\0\1\3"+
    "\21\0\3\3\12\0\1\u0586\32\3\1\0\1\3\21\0"+
    "\3\3\12\0\16\3\1\u0587\14\3\1\0\1\3\21\0"+
    "\3\3\12\0\7\3\1\u0588\23\3\1\0\1\3\21\0"+
    "\3\3\12\0\2\3\1\u0589\30\3\1\0\1\3\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[66375];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\1\11\33\1\1\11"+
    "\2\1\1\11\5\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\3\1\2\0\173\1\12\11\3\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\1\2\0\1\1\1\11"+
    "\305\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\340\1\2\0\277\1\2\0\233\1\2\0\175\1\1\11"+
    "\u0133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;   
    public int linea;
    public int columna;
    public int columnaInicial;    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 183: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXCEPT;
          }
        case 357: break;
        case 209: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SCHEMA;
          }
        case 358: break;
        case 269: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NATIONAL;
          }
        case 359: break;
        case 210: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GLOBAL;
          }
        case 360: break;
        case 329: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REPLICATION;
          }
        case 361: break;
        case 4: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Coma;
          }
        case 362: break;
        case 92: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ELSE;
          }
        case 363: break;
        case 100: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWS;
          }
        case 364: break;
        case 336: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WITHINGROUP;
          }
        case 365: break;
        case 97: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIME;
          }
        case 366: break;
        case 308: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFERRABLE;
          }
        case 367: break;
        case 344: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMEZONE_HOUR;
          }
        case 368: break;
        case 282: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTERVAL;
          }
        case 369: break;
        case 77: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GET;
          }
        case 370: break;
        case 156: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USAGE;
          }
        case 371: break;
        case 211: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MODULE;
          }
        case 372: break;
        case 229: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIMARY;
          }
        case 373: break;
        case 117: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USER;
          }
        case 374: break;
        case 159: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FETCH;
          }
        case 375: break;
        case 126: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SOME;
          }
        case 376: break;
        case 187: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RETURN;
          }
        case 377: break;
        case 316: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONSTRAINT;
          }
        case 378: break;
        case 275: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COALESCE;
          }
        case 379: break;
        case 85: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESC;
          }
        case 380: break;
        case 49: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleCorchete;
          }
        case 381: break;
        case 296: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENQUERY;
          }
        case 382: break;
        case 47: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return And;
          }
        case 383: break;
        case 227: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PERCENT;
          }
        case 384: break;
        case 182: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DOMAIN;
          }
        case 385: break;
        case 144: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOWER;
          }
        case 386: break;
        case 246: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLCODE;
          }
        case 387: break;
        case 351: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITY_INSERT;
          }
        case 388: break;
        case 73: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INT;
          }
        case 389: break;
        case 35: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OR;
          }
        case 390: break;
        case 30: 
          { linea = yyline + 1; columna = yycolumn + 1;lexeme=yytext(); columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorComentarioMulti;
          }
        case 391: break;
        case 40: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IF;
          }
        case 392: break;
        case 38: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BY;
          }
        case 393: break;
        case 108: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LIKE;
          }
        case 394: break;
        case 19: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirCorchete;
          }
        case 395: break;
        case 65: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return END;
          }
        case 396: break;
        case 83: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DATE;
          }
        case 397: break;
        case 189: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REVOKE;
          }
        case 398: break;
        case 260: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXTERNAL;
          }
        case 399: break;
        case 321: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLWARNING;
          }
        case 400: break;
        case 55: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ADA;
          }
        case 401: break;
        case 106: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEFT;
          }
        case 402: break;
        case 174: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MONTH;
          }
        case 403: break;
        case 323: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DIAGNOSTICS;
          }
        case 404: break;
        case 335: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SYSTEM_USER;
          }
        case 405: break;
        case 26: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Numeral;
          }
        case 406: break;
        case 225: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEADING;
          }
        case 407: break;
        case 140: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NAMES;
          }
        case 408: break;
        case 188: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REVERT;
          }
        case 409: break;
        case 68: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PAD;
          }
        case 410: break;
        case 158: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FALSE;
          }
        case 411: break;
        case 93: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRAN;
          }
        case 412: break;
        case 219: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRIGGER;
          }
        case 413: break;
        case 267: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROLLBACK;
          }
        case 414: break;
        case 166: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INNER;
          }
        case 415: break;
        case 230: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENXML;
          }
        case 416: break;
        case 265: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RELATIVE;
          }
        case 417: break;
        case 198: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COMMIT;
          }
        case 418: break;
        case 103: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NONE;
          }
        case 419: break;
        case 112: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPEN;
          }
        case 420: break;
        case 143: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOCAL;
          }
        case 421: break;
        case 95: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRIM;
          }
        case 422: break;
        case 147: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PIVOT;
          }
        case 423: break;
        case 191: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LINENO;
          }
        case 424: break;
        case 226: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PARTIAL;
          }
        case 425: break;
        case 292: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMESTAMP;
          }
        case 426: break;
        case 317: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHECKPOINT;
          }
        case 427: break;
        case 340: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIME;
          }
        case 428: break;
        case 212: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MINUTE;
          }
        case 429: break;
        case 76: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SUM;
          }
        case 430: break;
        case 341: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_USER;
          }
        case 431: break;
        case 322: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return STATISTICS;
          }
        case 432: break;
        case 105: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LAST;
          }
        case 433: break;
        case 135: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VIEW;
          }
        case 434: break;
        case 196: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CREATE;
          }
        case 435: break;
        case 123: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BULK;
          }
        case 436: break;
        case 278: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FREETEXT;
          }
        case 437: break;
        case 206: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SELECT;
          }
        case 438: break;
        case 333: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITYCOL;
          }
        case 439: break;
        case 309: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESCRIPTOR;
          }
        case 440: break;
        case 45: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MayorIgual;
          }
        case 441: break;
        case 263: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRUNCATE;
          }
        case 442: break;
        case 228: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PREPARE;
          }
        case 443: break;
        case 216: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFAULT;
          }
        case 444: break;
        case 306: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WRITETEXT;
          }
        case 445: break;
        case 80: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MIN;
          }
        case 446: break;
        case 42: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GO;
          }
        case 447: break;
        case 218: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXTRACT;
          }
        case 448: break;
        case 8: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorCadenaIncompleta;
          }
        case 449: break;
        case 339: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_DATE;
          }
        case 450: break;
        case 249: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SESSION;
          }
        case 451: break;
        case 61: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ASC;
          }
        case 452: break;
        case 72: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BIT;
          }
        case 453: break;
        case 74: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQL;
          }
        case 454: break;
        case 36: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ON;
          }
        case 455: break;
        case 44: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MenorIgual;
          }
        case 456: break;
        case 213: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VALUES;
          }
        case 457: break;
        case 5: 
          { /*Ignore*/
          }
        case 458: break;
        case 141: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NCHAR;
          }
        case 459: break;
        case 64: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEC;
          }
        case 460: break;
        case 271: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRESERVE;
          }
        case 461: break;
        case 120: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FILE;
          }
        case 462: break;
        case 139: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RIGHT;
          }
        case 463: break;
        case 194: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPTION;
          }
        case 464: break;
        case 331: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONSTRAINTS;
          }
        case 465: break;
        case 270: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LANGUAGE;
          }
        case 466: break;
        case 17: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SignoAdmiracionInverso;
          }
        case 467: break;
        case 121: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HOUR;
          }
        case 468: break;
        case 54: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorApostrofeCadena;
          }
        case 469: break;
        case 132: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WORK;
          }
        case 470: break;
        case 154: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNION;
          }
        case 471: break;
        case 9: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Division;
          }
        case 472: break;
        case 151: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CLOSE;
          }
        case 473: break;
        case 51: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleLlave;
          }
        case 474: break;
        case 99: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REAL;
          }
        case 475: break;
        case 207: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECOND;
          }
        case 476: break;
        case 181: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DOUBLE;
          }
        case 477: break;
        case 27: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Float;
          }
        case 478: break;
        case 293: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RAISERROR;
          }
        case 479: break;
        case 261: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TEXTSIZE;
          }
        case 480: break;
        case 150: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CROSS;
          }
        case 481: break;
        case 280: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HOLDLOCK;
          }
        case 482: break;
        case 345: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CORRESPONDING;
          }
        case 483: break;
        case 291: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSLATE;
          }
        case 484: break;
        case 290: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TEMPORARY;
          }
        case 485: break;
        case 165: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INDEX;
          }
        case 486: break;
        case 62: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AVG;
          }
        case 487: break;
        case 109: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PROC;
          }
        case 488: break;
        case 346: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTAINSTABLE;
          }
        case 489: break;
        case 130: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ZONE;
          }
        case 490: break;
        case 138: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TABLE;
          }
        case 491: break;
        case 136: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return JOIN;
          }
        case 492: break;
        case 133: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHEN;
          }
        case 493: break;
        case 104: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULL;
          }
        case 494: break;
        case 347: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FREETEXTTABLE;
          }
        case 495: break;
        case 167: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INPUT;
          }
        case 496: break;
        case 101: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RULE;
          }
        case 497: break;
        case 313: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIVILEGES;
          }
        case 498: break;
        case 70: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USE;
          }
        case 499: break;
        case 172: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MATCH;
          }
        case 500: break;
        case 122: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BOTH;
          }
        case 501: break;
        case 7: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Multiplicacion;
          }
        case 502: break;
        case 171: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GROUP;
          }
        case 503: break;
        case 255: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ABSOLUTE;
          }
        case 504: break;
        case 178: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VALUE;
          }
        case 505: break;
        case 221: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RESTORE;
          }
        case 506: break;
        case 235: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONVERT;
          }
        case 507: break;
        case 201: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPDATE;
          }
        case 508: break;
        case 328: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRY_CONVERT;
          }
        case 509: break;
        case 288: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ASSERTION;
          }
        case 510: break;
        case 137: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALTER;
          }
        case 511: break;
        case 176: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHERE;
          }
        case 512: break;
        case 332: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHAR_LENGTH;
          }
        case 513: break;
        case 63: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DAY;
          }
        case 514: break;
        case 89: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISK;
          }
        case 515: break;
        case 330: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RECONFIGURE;
          }
        case 516: break;
        case 326: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSACTION;
          }
        case 517: break;
        case 168: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLCA;
          }
        case 518: break;
        case 311: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REFERENCES;
          }
        case 519: break;
        case 310: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISCONNECT;
          }
        case 520: break;
        case 305: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SUBSTRING;
          }
        case 521: break;
        case 220: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TSEQUAL;
          }
        case 522: break;
        case 325: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TABLESAMPLE;
          }
        case 523: break;
        case 262: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRAILING;
          }
        case 524: break;
        case 16: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MayorQue;
          }
        case 525: break;
        case 57: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ARE;
          }
        case 526: break;
        case 250: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WAITFOR;
          }
        case 527: break;
        case 124: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTO;
          }
        case 528: break;
        case 18: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PuntoComa;
          }
        case 529: break;
        case 114: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASE;
          }
        case 530: break;
        case 274: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASCADED;
          }
        case 531: break;
        case 102: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NEXT;
          }
        case 532: break;
        case 148: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ORDER;
          }
        case 533: break;
        case 231: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OFFSETS;
          }
        case 534: break;
        case 52: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleNumeral;
          }
        case 535: break;
        case 223: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NOCHECK;
          }
        case 536: break;
        case 71: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOR;
          }
        case 537: break;
        case 81: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatMas;
          }
        case 538: break;
        case 248: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECTION;
          }
        case 539: break;
        case 289: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXCEPTION;
          }
        case 540: break;
        case 94: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRUE;
          }
        case 541: break;
        case 84: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DENY;
          }
        case 542: break;
        case 34: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NO;
          }
        case 543: break;
        case 110: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PLAN;
          }
        case 544: break;
        case 58: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AND;
          }
        case 545: break;
        case 334: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INSENSITIVE;
          }
        case 546: break;
        case 352: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHARACTER_LENGTH;
          }
        case 547: break;
        case 239: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNPIVOT;
          }
        case 548: break;
        case 157: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USING;
          }
        case 549: break;
        case 353: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIMESTAMP;
          }
        case 550: break;
        case 82: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatE;
          }
        case 551: break;
        case 28: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatPunto;
          }
        case 552: break;
        case 199: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURSOR;
          }
        case 553: break;
        case 20: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarCorchete;
          }
        case 554: break;
        case 281: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITY;
          }
        case 555: break;
        case 355: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICSIMILARITYTABLE;
          }
        case 556: break;
        case 78: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return KEY;
          }
        case 557: break;
        case 304: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IMMEDIATE;
          }
        case 558: break;
        case 6: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Punto;
          }
        case 559: break;
        case 349: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENDATASOURCE;
          }
        case 560: break;
        case 13: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Igual;
          }
        case 561: break;
        case 320: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BIT_LENGTH;
          }
        case 562: break;
        case 307: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEALLOCATE;
          }
        case 563: break;
        case 205: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INSERT;
          }
        case 564: break;
        case 312: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWGUIDCOL;
          }
        case 565: break;
        case 257: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFERRED;
          }
        case 566: break;
        case 286: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SMALLINT;
          }
        case 567: break;
        case 232: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CATALOG;
          }
        case 568: break;
        case 177: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHILE;
          }
        case 569: break;
        case 96: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return THEN;
          }
        case 570: break;
        case 294: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRECISION;
          }
        case 571: break;
        case 1: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ERROR;
          }
        case 572: break;
        case 31: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AT;
          }
        case 573: break;
        case 43: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IgualA;
          }
        case 574: break;
        case 146: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIOR;
          }
        case 575: break;
        case 169: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SPACE;
          }
        case 576: break;
        case 125: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SAVE;
          }
        case 577: break;
        case 238: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT;
          }
        case 578: break;
        case 116: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHAR;
          }
        case 579: break;
        case 90: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXEC;
          }
        case 580: break;
        case 283: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLERROR;
          }
        case 581: break;
        case 128: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return YEAR;
          }
        case 582: break;
        case 41: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IS;
          }
        case 583: break;
        case 237: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COMPUTE;
          }
        case 584: break;
        case 224: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NUMERIC;
          }
        case 585: break;
        case 37: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OF;
          }
        case 586: break;
        case 32: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AS;
          }
        case 587: break;
        case 46: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DiferenteDe;
          }
        case 588: break;
        case 245: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INCLUDE;
          }
        case 589: break;
        case 200: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNIQUE;
          }
        case 590: break;
        case 302: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INITIALLY;
          }
        case 591: break;
        case 252: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VARYING;
          }
        case 592: break;
        case 118: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FROM;
          }
        case 593: break;
        case 87: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DUMP;
          }
        case 594: break;
        case 348: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECURITYAUDIT;
          }
        case 595: break;
        case 287: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHENEVER;
          }
        case 596: break;
        case 268: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWCOUNT;
          }
        case 597: break;
        case 59: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ANY;
          }
        case 598: break;
        case 98: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return READ;
          }
        case 599: break;
        case 14: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Porcentaje;
          }
        case 600: break;
        case 107: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOAD;
          }
        case 601: break;
        case 155: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPPER;
          }
        case 602: break;
        case 111: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ONLY;
          }
        case 603: break;
        case 86: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DROP;
          }
        case 604: break;
        case 350: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMEZONE_MINUTE;
          }
        case 605: break;
        case 319: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FILLFACTOR;
          }
        case 606: break;
        case 131: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return KILL;
          }
        case 607: break;
        case 67: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NOT;
          }
        case 608: break;
        case 69: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OFF;
          }
        case 609: break;
        case 315: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONNECTION;
          }
        case 610: break;
        case 258: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESCRIBE;
          }
        case 611: break;
        case 242: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FORTRAN;
          }
        case 612: break;
        case 88: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DBCC;
          }
        case 613: break;
        case 233: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASCADE;
          }
        case 614: break;
        case 60: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALL;
          }
        case 615: break;
        case 244: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTEGER;
          }
        case 616: break;
        case 204: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BROWSE;
          }
        case 617: break;
        case 272: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return POSITION;
          }
        case 618: break;
        case 10: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Resta;
          }
        case 619: break;
        case 2: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); if(yylength()>31){lexeme = yytext().substring(0,31); return ErrorCadenaLarga;}else{lexeme=yytext(); return Identificador;}
          }
        case 620: break;
        case 338: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OCTET_LENGTH;
          }
        case 621: break;
        case 295: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PROCEDURE;
          }
        case 622: break;
        case 152: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COUNT;
          }
        case 623: break;
        case 300: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INDICATOR;
          }
        case 624: break;
        case 186: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ESCAPE;
          }
        case 625: break;
        case 337: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NONCLUSTERED;
          }
        case 626: break;
        case 234: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONNECT;
          }
        case 627: break;
        case 129: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GOTO;
          }
        case 628: break;
        case 241: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOREIGN;
          }
        case 629: break;
        case 208: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SCROLL;
          }
        case 630: break;
        case 145: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRINT;
          }
        case 631: break;
        case 202: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HAVING;
          }
        case 632: break;
        case 192: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PASCAL;
          }
        case 633: break;
        case 197: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLUMN;
          }
        case 634: break;
        case 327: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSLATION;
          }
        case 635: break;
        case 164: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BREAK;
          }
        case 636: break;
        case 170: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GRANT;
          }
        case 637: break;
        case 254: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALLOCATE;
          }
        case 638: break;
        case 203: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BACKUP;
          }
        case 639: break;
        case 66: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TOP;
          }
        case 640: break;
        case 185: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ERRLVL;
          }
        case 641: break;
        case 354: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICKEYPHRASETABLE;
          }
        case 642: break;
        case 243: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BETWEEN;
          }
        case 643: break;
        case 149: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OUTER;
          }
        case 644: break;
        case 39: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IN;
          }
        case 645: break;
        case 153: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHECK;
          }
        case 646: break;
        case 298: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLLATION;
          }
        case 647: break;
        case 301: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTERSECT;
          }
        case 648: break;
        case 180: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DELETE;
          }
        case 649: break;
        case 48: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Or;
          }
        case 650: break;
        case 214: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DECLARE;
          }
        case 651: break;
        case 163: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BEGIN;
          }
        case 652: break;
        case 160: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FLOAT;
          }
        case 653: break;
        case 15: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MenorQue;
          }
        case 654: break;
        case 236: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLLATE;
          }
        case 655: break;
        case 251: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VARCHAR;
          }
        case 656: break;
        case 276: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTAINS;
          }
        case 657: break;
        case 115: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CAST;
          }
        case 658: break;
        case 175: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WRITE;
          }
        case 659: break;
        case 127: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SIZE;
          }
        case 660: break;
        case 222: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NATURAL;
          }
        case 661: break;
        case 53: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorNuevaLineaCadena;
          }
        case 662: break;
        case 190: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULLIF;
          }
        case 663: break;
        case 193: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PUBLIC;
          }
        case 664: break;
        case 356: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 665: break;
        case 277: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTINUE;
          }
        case 666: break;
        case 79: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MAX;
          }
        case 667: break;
        case 12: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Bit;
          }
        case 668: break;
        case 24: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarLlave;
          }
        case 669: break;
        case 184: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXISTS;
          }
        case 670: break;
        case 343: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AUTHORIZATION;
          }
        case 671: break;
        case 173: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MERGE;
          }
        case 672: break;
        case 142: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEVEL;
          }
        case 673: break;
        case 266: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RESTRICT;
          }
        case 674: break;
        case 91: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXIT;
          }
        case 675: break;
        case 22: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarParentesis;
          }
        case 676: break;
        case 11: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Suma;
          }
        case 677: break;
        case 119: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FULL;
          }
        case 678: break;
        case 217: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXECUTE;
          }
        case 679: break;
        case 273: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OVERLAPS;
          }
        case 680: break;
        case 256: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DATABASE;
          }
        case 681: break;
        case 195: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OUTPUT;
          }
        case 682: break;
        case 299: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHARACTER;
          }
        case 683: break;
        case 161: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOUND;
          }
        case 684: break;
        case 318: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPDATETEXT;
          }
        case 685: break;
        case 247: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SETUSER;
          }
        case 686: break;
        case 259: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISTINCT;
          }
        case 687: break;
        case 264: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return READTEXT;
          }
        case 688: break;
        case 215: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DECIMAL;
          }
        case 689: break;
        case 162: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FIRST;
          }
        case 690: break;
        case 21: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirParentesis;
          }
        case 691: break;
        case 253: 
          { linea = yyline + 1; columna = yycolumn + 1;lexeme=yytext(); columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorComentarioAnidado;
          }
        case 692: break;
        case 297: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CLUSTERED;
          }
        case 693: break;
        case 240: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNKNOWN;
          }
        case 694: break;
        case 134: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WITH;
          }
        case 695: break;
        case 29: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Cadena;
          }
        case 696: break;
        case 33: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TO;
          }
        case 697: break;
        case 303: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ISOLATION;
          }
        case 698: break;
        case 113: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OVER;
          }
        case 699: break;
        case 3: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Numero;
          }
        case 700: break;
        case 75: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SET;
          }
        case 701: break;
        case 342: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SESSION_USER;
          }
        case 702: break;
        case 285: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SHUTDOWN;
          }
        case 703: break;
        case 179: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ACTION;
          }
        case 704: break;
        case 50: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleParentesis;
          }
        case 705: break;
        case 324: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISTRIBUTED;
          }
        case 706: break;
        case 23: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirLlave;
          }
        case 707: break;
        case 56: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ADD;
          }
        case 708: break;
        case 25: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Arroba;
          }
        case 709: break;
        case 284: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLSTATE;
          }
        case 710: break;
        case 279: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FUNCTION;
          }
        case 711: break;
        case 314: 
          { linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENROWSET;
          }
        case 712: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
