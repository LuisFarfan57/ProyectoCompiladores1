/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladoresf1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author luise
 */
public class JfAnalizador extends javax.swing.JFrame {

    /**
     * Creates new form JfAnalizador
     */
    boolean JF;
    public JfAnalizador() {
        initComponents();
        JF = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEntrada = new javax.swing.JTextField();
        btnCargarArchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        btnFlex = new javax.swing.JButton();
        txtFlex = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setEditable(false);

        btnCargarArchivo.setText("Cargar archivo");
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });

        txtResultado.setEditable(false);
        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        btnFlex.setText("Cargar archivo JFlex");
        btnFlex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlexActionPerformed(evt);
            }
        });

        txtFlex.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEntrada)
                            .addComponent(txtFlex))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFlex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCargarArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFlex, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFlex, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCargarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    String nombreArchivo;    
    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
        // TODO add your handling code here:
        //if(JF){
            JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(".sql", "sql");
        File fichero = null;
        String rutaArchivo = "";
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            fichero = dialogo.getSelectedFile();
            rutaArchivo = fichero.getPath();
            txtEntrada.setText(rutaArchivo);
            nombreArchivo = fichero.getName().split("\\.")[0];
        }                
        
        if (fichero != null) {
            try {
                Reader lector = new BufferedReader(new FileReader(rutaArchivo));
                Lexer lexer = new Lexer(lector);
                ArrayList<Tokens> listaTokens = new ArrayList<Tokens>();
                ArrayList<String> lineas = new ArrayList<String>();
                
                String resultado = "";
                while (true) {
                    Tokens tokens = lexer.yylex(); 
                
                    if (tokens == null) {                                            
                        //escribirArchivo(resultado);
                        txtResultado.setText(resultado);
                        AnalizadorSintactico a = new AnalizadorSintactico(listaTokens, lineas);
                        txtResultado.setText(a.analizar());
                        return;
                    }                              
                    
                    listaTokens.add(tokens);
                    lineas.add("(" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")");
                
                    switch (tokens) {
                        case ERROR:
                            resultado += lexer.lexeme + ": Error (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                        break;
                        case ErrorNuevaLineaCadena:
                            resultado += lexer.lexeme + ": Error, nueva linea encontrada en cadena (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                        break;
                        case ErrorApostrofeCadena:
                            resultado += lexer.lexeme + ": Error, apostrofe encontrado en cadena (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                        break;                
                        case ErrorCadenaIncompleta:
                            resultado += lexer.lexeme + ": Error, cadena no terminada (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                        break;
                        case ErrorComentarioAnidado:
                            resultado += lexer.lexeme + ": Error, comentario anidado (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                            break;
                        case ErrorComentarioMulti:
                            resultado += lexer.lexeme + ": Error, comentario no cerrado (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                            break;
                        case ErrorFloatPunto:
                            resultado += lexer.lexeme + ": Error, un float debe llevar un digito antes del punto (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                            break;
                        case ErrorFloatE:
                            resultado += lexer.lexeme + ": Error, un float exponencial debe llevar una \"e\" o \"E\" (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                            break;
                        case ErrorFloatMas:
                            resultado += lexer.lexeme + ": Error, un float exponencial debe llevar un signo \"+\" (" + lexer.linea + ", " + lexer.columna + ", " + lexer.columnaInicial + ")\n";
                            break;                        
                    }                                       
                }                    
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JfAnalizador.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JfAnalizador.class.getName()).log(Level.SEVERE, null, ex);
            }                        
        }           
        //}  
        //else{
            //JOptionPane.showMessageDialog(null,"Primero debe general el analizador léxico");
        //}        
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    String nombreArchivoFlex;
    private void btnFlexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlexActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(".flex", "flex");
        File fichero = null;
        String rutaArchivo = "";
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            fichero = dialogo.getSelectedFile();
            rutaArchivo = fichero.getPath();
            txtFlex.setText(rutaArchivo);
            nombreArchivoFlex = fichero.getName().split("\\.")[0];
            generarLexer(rutaArchivo);                        
        }                   
    }//GEN-LAST:event_btnFlexActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JfAnalizador().setVisible(true);
            }
        });
    }
    
    public void generarLexer(String ruta){
        File archivo = new File(ruta);
        JFlex.Main.generate(archivo);
        JF = true;
    }
    
    void escribirArchivo(String contenido){
        
        JOptionPane.showMessageDialog(null,"Seleccione donde quiere guardar el archivo con el resultado");
        JFileChooser fc = new JFileChooser();     
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int seleccion = fc.showOpenDialog(this);
        
        if(seleccion == JFileChooser.APPROVE_OPTION){     
            File fichero = fc.getSelectedFile();
            
            if(Escritor.Escribir(fichero.getAbsolutePath() + "\\" + nombreArchivo + ".out", contenido)){
                JOptionPane.showMessageDialog(null,"Archivo generado correctamente en " + fichero.getAbsolutePath() + "\\" + nombreArchivo + ".out");
            }            
        }                
    }
    
    boolean analizarSintacticamente(){
        boolean resultado = false;
        
        return resultado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton btnFlex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextField txtFlex;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
