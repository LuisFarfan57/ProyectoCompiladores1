package compiladoresf1;
import static compiladoresf1.Tokens.*;
%%
%class Lexer
%type Tokens
%line
%column
LM=[A-Z_]+
Lm=[a-z]+
D=[0-9]+
coma = ","
espacio=[ \t\r\n]+
FinLinea = \r|\n|\r\n
caracter = [^\r\n]
caracterString = [^~"'"~\r~\n]
char = [.\r\n]
caracterSinFinComentario = [^\r\n~"*/"]
caracterSinFinLineaApostrofe = [^~'~\r\n]

comentarioMulti = ("/"("")* [^] ("")* ~"/") | ("/" ("")+ "/")


cadena = "'"{caracterString}*"'"

comentario = "--" {caracter}* {FinLinea}?
%{
    public String lexeme;   
    public int linea;
    public int columna;
    public int columnaInicial;    
%}
%%
{coma} {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Coma;}
{espacio} {/*Ignore*/}
{comentarioMulti}  | {comentario} {/*Ignore*/}


ADD {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ADD;}
EXTERNAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXTERNAL;}
PROCEDURE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PROCEDURE;}
ALL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALL;}
FETCH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FETCH;}
PUBLIC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PUBLIC;}
ALTER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALTER;}
FILE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FILE;}
RAISERROR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RAISERROR;}
AND {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AND;}
FILLFACTOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FILLFACTOR;}
READ {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return READ;}
ANY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ANY;}
FOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOR;}
READTEXT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return READTEXT;}
AS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AS;}
FOREIGN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOREIGN;}
RECONFIGURE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RECONFIGURE;}
ASC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ASC;}
FREETEXT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FREETEXT;}
REFERENCES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REFERENCES;}
AUTHORIZATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AUTHORIZATION;}
FREETEXTTABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FREETEXTTABLE;}
REPLICATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REPLICATION;}
BACKUP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BACKUP;}
FROM {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FROM;}
RESTORE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RESTORE;}
BEGIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BEGIN;}
FULL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FULL;}
RESTRICT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RESTRICT;}
BETWEEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BETWEEN;}
FUNCTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FUNCTION;}
RETURN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RETURN;}
BREAK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BREAK;}
GOTO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GOTO;}
REVERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REVERT;}
BROWSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BROWSE;}
GRANT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GRANT;}
REVOKE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REVOKE;}
BULK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BULK;}
GROUP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GROUP;}
RIGHT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RIGHT;}
BY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BY;}
HAVING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HAVING;}
ROLLBACK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROLLBACK;}
CASCADE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASCADE;}
HOLDLOCK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HOLDLOCK;}
ROWCOUNT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWCOUNT;}
CASE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASE;}
IDENTITY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITY;}
ROWGUIDCOL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWGUIDCOL;}
CHECK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHECK;}
IDENTITY_INSERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITY_INSERT;}
RULE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RULE;}
CHECKPOINT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHECKPOINT;}
IDENTITYCOL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITYCOL;}
SAVE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SAVE;}
CLOSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CLOSE;}
IF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IF;}
SCHEMA {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SCHEMA;}
CLUSTERED {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CLUSTERED;}
IN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IN;}
SECURITYAUDIT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECURITYAUDIT;}
COALESCE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COALESCE;}
INDEX {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INDEX;}
SELECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SELECT;}
COLLATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLLATE;}
INNER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INNER;}
SEMANTICKEYPHRASETABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICKEYPHRASETABLE;}
COLUMN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLUMN;}
INSERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INSERT;}
SEMANTICSIMILARITYDETAILSTABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICSIMILARITYDETAILSTABLE;}
COMMIT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COMMIT;}
INTERSECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTERSECT;}
SEMANTICSIMILARITYTABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SEMANTICSIMILARITYTABLE;}
COMPUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COMPUTE;}
INTO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTO;}
SESSION_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SESSION_USER;}
CONSTRAINT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONSTRAINT;}
IS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IS;}
SET {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SET;}
CONTAINS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTAINS;}
JOIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return JOIN;}
SETUSER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SETUSER;}
CONTAINSTABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTAINSTABLE;}
KEY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return KEY;}
SHUTDOWN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SHUTDOWN;}
CONTINUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTINUE;}
KILL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return KILL;}
SOME {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SOME;}
CONVERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONVERT;}
LEFT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEFT;}
STATISTICS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return STATISTICS;}
CREATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CREATE;}
LIKE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LIKE;}
SYSTEM_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SYSTEM_USER;}
CROSS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CROSS;}
LINENO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LINENO;}
TABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TABLE;}
CURRENT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT;}
LOAD {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOAD;}
TABLESAMPLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TABLESAMPLE;}
CURRENT_DATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_DATE;}
MERGE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MERGE;}
TEXTSIZE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TEXTSIZE;}
CURRENT_TIME {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIME;}
NATIONAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NATIONAL;}
THEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return THEN;}
CURRENT_TIMESTAMP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIMESTAMP;}
NOCHECK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NOCHECK;}
TO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TO;}
CURRENT_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_USER;}
NONCLUSTERED {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NONCLUSTERED;}
TOP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TOP;}
CURSOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURSOR;}
NOT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NOT;}
TRAN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRAN;}
DATABASE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DATABASE;}
NULL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULL;}
TRANSACTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSACTION;}
DBCC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DBCC;}
NULLIF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULLIF;}
TRIGGER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRIGGER;}
DEALLOCATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEALLOCATE;}
OF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OF;}
TRUNCATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRUNCATE;}
DECLARE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DECLARE;}
OFF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OFF;}
TRY_CONVERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRY_CONVERT;}
DEFAULT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFAULT;}
OFFSETS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OFFSETS;}
TSEQUAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TSEQUAL;}
DELETE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DELETE;}
ON {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ON;}
UNION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNION;}
DENY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DENY;}
OPEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPEN;}
UNIQUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNIQUE;}
DESC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESC;}
OPENDATASOURCE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENDATASOURCE;}
UNPIVOT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNPIVOT;}
DISK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISK;}
OPENQUERY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENQUERY;}
UPDATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPDATE;}
DISTINCT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISTINCT;}
OPENROWSET {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENROWSET;}
UPDATETEXT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPDATETEXT;}
DISTRIBUTED {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISTRIBUTED;}
OPENXML {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPENXML;}
USE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USE;}
DOUBLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DOUBLE;}
OPTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPTION;}
USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USER;}
DROP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DROP;}
OR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OR;}
VALUES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VALUES;}
DUMP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DUMP;}
ORDER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ORDER;}
VARYING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VARYING;}
ELSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ELSE;}
OUTER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OUTER;}
VIEW {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VIEW;}
END {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return END;}
OVER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OVER;}
WAITFOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WAITFOR;}
ERRLVL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ERRLVL;}
PERCENT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PERCENT;}
WHEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHEN;}
ESCAPE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ESCAPE;}
PIVOT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PIVOT;}
WHERE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHERE;}
EXCEPT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXCEPT;}
PLAN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PLAN;}
WHILE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHILE;}
EXEC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXEC;}
PRECISION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRECISION;}
WITH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WITH;}
EXECUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXECUTE;}
PRIMARY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIMARY;}
WITHINGROUP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WITHINGROUP;}
EXISTS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXISTS;}
PRINT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRINT;}
WRITETEXT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WRITETEXT;}
EXIT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXIT;}
PROC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PROC;}
ABSOLUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ABSOLUTE;}
EXEC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXEC;}
OVERLAPS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OVERLAPS;}
ACTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ACTION;}
EXECUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXECUTE;}
PAD {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PAD;}
ADA {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ADA;}
EXISTS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXISTS;}
PARTIAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PARTIAL;}
ADD {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ADD;}
EXTERNAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXTERNAL;}
PASCAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PASCAL;}
ALL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALL;}
EXTRACT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXTRACT;}
POSITION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return POSITION;}
ALLOCATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALLOCATE;}
FALSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FALSE;}
PRECISION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRECISION;}
ALTER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ALTER;}
FETCH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FETCH;}
PREPARE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PREPARE;}
AND {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AND;}
FIRST {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FIRST;}
PRESERVE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRESERVE;}
ANY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ANY;}
FLOAT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FLOAT;}
PRIMARY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIMARY;}
ARE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ARE;}
FOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOR;}
PRIOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIOR;}
AS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AS;}
FOREIGN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOREIGN;}
PRIVILEGES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PRIVILEGES;}
ASC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ASC;}
FORTRAN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FORTRAN;}
PROCEDURE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PROCEDURE;}
ASSERTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ASSERTION;}
FOUND {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FOUND;}
PUBLIC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PUBLIC;}
AT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AT;}
FROM {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FROM;}
READ {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return READ;}
AUTHORIZATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AUTHORIZATION;}
FULL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return FULL;}
REAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REAL;}
AVG {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AVG;}
GET {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GET;}
REFERENCES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REFERENCES;}
BEGIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BEGIN;}
GLOBAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GLOBAL;}
RELATIVE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RELATIVE;}
BETWEEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BETWEEN;}
GO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GO;}
RESTRICT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RESTRICT;}
BIT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BIT;}
GOTO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GOTO;}
REVOKE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return REVOKE;}
BIT_LENGTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BIT_LENGTH;}
GRANT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GRANT;}
RIGHT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return RIGHT;}
BOTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BOTH;}
GROUP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return GROUP;}
ROLLBACK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROLLBACK;}
BY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return BY;}
HAVING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HAVING;}
ROWS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ROWS;}
CASCADE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASCADE;}
HOUR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return HOUR;}
SCHEMA {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SCHEMA;}
CASCADED {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASCADED;}
IDENTITY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IDENTITY;}
SCROLL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SCROLL;}
CASE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CASE;}
IMMEDIATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IMMEDIATE;}
SECOND {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECOND;}
CAST {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CAST;}
IN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IN;}
SECTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SECTION;}
CATALOG {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CATALOG;}
INCLUDE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INCLUDE;}
SELECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SELECT;}
CHAR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHAR;}
INDEX {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INDEX;}
SESSION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SESSION;}
CHAR_LENGTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHAR_LENGTH;}
INDICATOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INDICATOR;}
SESSION_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SESSION_USER;}
CHARACTER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHARACTER;}
INITIALLY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INITIALLY;}
SET {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SET;}
CHARACTER_LENGTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHARACTER_LENGTH;}
INNER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INNER;}
SIZE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SIZE;}
CHECK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CHECK;}
INPUT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INPUT;}
SMALLINT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SMALLINT;}
CLOSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CLOSE;}
INSENSITIVE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INSENSITIVE;}
SOME {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SOME;}
COALESCE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COALESCE;}
INSERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INSERT;}
SPACE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SPACE;}
COLLATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLLATE;}
INT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INT;}
SQL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQL;}
COLLATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLLATION;}
INTEGER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTEGER;}
SQLCA {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLCA;}
COLUMN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COLUMN;}
INTERSECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTERSECT;}
SQLCODE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLCODE;}
COMMIT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COMMIT;}
INTERVAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTERVAL;}
SQLERROR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLERROR;}
CONNECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONNECT;}
INTO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return INTO;}
SQLSTATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLSTATE;}
CONNECTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONNECTION;}
IS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IS;}
SQLWARNING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SQLWARNING;}
CONSTRAINT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONSTRAINT;}
ISOLATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ISOLATION;}
SUBSTRING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SUBSTRING;}
CONSTRAINTS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONSTRAINTS;}
JOIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return JOIN;}
SUM {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SUM;}
CONTINUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONTINUE;}
KEY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return KEY;}
SYSTEM_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SYSTEM_USER;}
CONVERT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CONVERT;}
LANGUAGE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LANGUAGE;}
TABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TABLE;}
CORRESPONDING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CORRESPONDING;}
LAST {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LAST;}
TEMPORARY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TEMPORARY;}
COUNT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return COUNT;}
LEADING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEADING;}
THEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return THEN;}
CREATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CREATE;}
LEFT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEFT;}
TIME {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIME;}
CROSS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CROSS;}
LEVEL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LEVEL;}
TIMESTAMP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMESTAMP;}
CURRENT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT;}
LIKE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LIKE;}
TIMEZONE_HOUR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMEZONE_HOUR;}
CURRENT_DATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_DATE;}
LOCAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOCAL;}
TIMEZONE_MINUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TIMEZONE_MINUTE;}
CURRENT_TIME {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIME;}
LOWER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return LOWER;}
TO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TO;}
CURRENT_TIMESTAMP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_TIMESTAMP;}
MATCH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MATCH;}
TRAILING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRAILING;}
CURRENT_USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURRENT_USER;}
MAX {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MAX;}
TRANSACTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSACTION;}
CURSOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CURSOR;}
MIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MIN;}
TRANSLATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSLATE;}
DATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DATE;}
MINUTE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MINUTE;}
TRANSLATION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRANSLATION;}
DAY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DAY;}
MODULE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MODULE;}
TRIM {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRIM;}
DEALLOCATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEALLOCATE;}
MONTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MONTH;}
TRUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return TRUE;}
DEC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEC;}
NAMES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NAMES;}
UNION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNION;}
DECIMAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DECIMAL;}
NATIONAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NATIONAL;}
UNIQUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNIQUE;}
DECLARE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DECLARE;}
NATURAL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NATURAL;}
UNKNOWN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UNKNOWN;}
DEFAULT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFAULT;}
NCHAR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NCHAR;}
UPDATE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPDATE;}
DEFERRABLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFERRABLE;}
NEXT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NEXT;}
UPPER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return UPPER;}
DEFERRED {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DEFERRED;}
NO {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NO;}
USAGE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USAGE;}
DELETE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DELETE;}
NONE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NONE;}
USER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USER;}
DESC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESC;}
NOT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NOT;}
USING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return USING;}
DESCRIBE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESCRIBE;}
NULL {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULL;}
VALUE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VALUE;}
DESCRIPTOR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DESCRIPTOR;}
NULLIF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NULLIF;}
VALUES {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VALUES;}
DIAGNOSTICS {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DIAGNOSTICS;}
NUMERIC {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return NUMERIC;}
VARCHAR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VARCHAR;}
DISCONNECT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISCONNECT;}
OCTET_LENGTH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OCTET_LENGTH;}
VARYING {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VARYING;}
DISTINCT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DISTINCT;}
OF {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OF;}
VIEW {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return VIEW;}
DOMAIN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DOMAIN;}
ON {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ON;}
WHEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHEN;}
DOUBLE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DOUBLE;}
ONLY {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ONLY;}
WHENEVER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHENEVER;}
DROP {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DROP;}
OPEN {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPEN;}
WHERE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WHERE;}
ELSE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ELSE;}
OPTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OPTION;}
WITH {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WITH;}
END {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return END;}
OR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OR;}
WORK {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WORK;}
ORDER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ORDER;}
WRITE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return WRITE;}
ESCAPE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ESCAPE;}
OUTER {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OUTER;}
YEAR {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return YEAR;}
EXCEPT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXCEPT;}
OUTPUT {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return OUTPUT;}
ZONE {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ZONE;}
EXCEPTION {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return EXCEPTION;}

{D}+("."){D}*(("E"|"e")({D}+)) {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatMas;}
({D}+)(".")({D}*)(("E"|"e")("+")({D}+))? {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Float;}
("."){D}+(("E"|"e")("+")({D}+))? {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatPunto;}
{D}+("."){D}*(("+")({D}+)) {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ErrorFloatE;}

({LM}|{Lm})({LM}|{Lm}|{D})* {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); if(yylength()>31){lexeme = yytext().substring(0,31); return ErrorCadenaLarga;}else{lexeme=yytext(); return Identificador;}}
("0") | ("1") | ("NULL") {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Bit;}
("-"{D}+)|{D}+ {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Numero;}

{cadena} {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Cadena;}

"," {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Coma;}
"=" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Igual;}
"+" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Suma;}
"-" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Resta;}
"*" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Multiplicacion;}
"/" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Division;}
"*" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ClausulaKleant;}
"%" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Porcentaje;}
"<" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MenorQue;}
">" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MayorQue;}
"<=" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MenorIgual;}
">=" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return MayorIgual;}
"==" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return IgualA;}
"!=" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DiferenteDe;}
"&&" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return And;}
"||" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Or;}
"!" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return SignoAdmiracionInverso;}
";" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return PuntoComa;}
"." {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Punto;}
"[" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirCorchete;}
"]" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarCorchete;}
"(" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirParentesis;}
")" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarParentesis;}
"{" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return AbrirLlave;}
"}" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return CerrarLlave;}
"[]" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleCorchete;}
"()" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleParentesis;}
"{}" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleLlave;}
"@" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Arroba;}
"#" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return Numeral;}
"##" {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return DobleNumeral;}

. {linea = yyline + 1; columna = yycolumn + 1; columnaInicial = yycolumn + yylength(); lexeme=yytext(); return ERROR;}
